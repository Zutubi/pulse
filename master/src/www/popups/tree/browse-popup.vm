<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <title>file browser</title>

    <link rel="stylesheet" type="text/css" href="/popups/tree/tree.css"/>
    <script type="text/javascript" src="/prototype.js"></script>
    <!--<script type="text/javascript" src="tree/console.js"></script>-->
    <script type="text/javascript" src="tree/tree.js"></script>
    <script type="text/javascript" src="tree/fs.js"></script>
    <script type="text/javascript" src="/main.js"></script>
    <script type="text/javascript">
        <!--
            // define the init properties that control the tree.

            window.onload = onInit;
            window.onresize = onResize;

            function onInit(event)
            {
                // manually resize the viewport so that it is the correct size.
                onResize(event);

                // initialise the tree view.
                var treeView = new ZUTUBI.widget.TreeView("browse");
                treeView.dataLoader = ZUTUBI.fs.list;
                treeView.onSelect = onSelectCallback;
                treeView.draw();

                // trigger a load of the initially required path.
                window.initialPath = ["C:\\", "tmp", "empty"];
                window.retry = 20;
                expandToPath();
            }

            function expandToPath()
            {
                if (window.retry <= 0)
                {
                    return;
                }
                window.retry = window.retry - 1;

                var initialPath = window.initialPath;

                var treeView = ZUTUBI.widget.View.getTreeById("browse");
                var node = treeView.getRoot();

                // search for node with name initialPath.
                for (var i = 0; i < initialPath.length; i++)
                {
                    var path = initialPath[i];
                    if (!node.expanded)
                    {
                        node._expand();
                    }

                    if (node.isLoaded)
                    {
                        // node is loaded, so lets go to  the next one.
                        node = $A(node.children).find(function(child)
                        {
                            return child.data.name == path;
                        });
                        if (!node)
                        {
                            // unable to locate the requested node.
                            return;
                        }
                    }
                    else
                    {
                        // node is still loading, so lets wait.
                        setTimeout(expandToPath, 250);
                        return;
                    }
                }

                // select the node.
                if (node)
                {
                    treeView._select(node);
                }
            }

            function onSelectCallback(node)
            {
                // a) display the path to the currently selected node.
                // construct the path.
                var currentPathDisplay = document.getElementById('path');                
                $A(currentPathDisplay.childNodes).each(function(child)
                {
                    Element.remove(child);
                });

                var pathToDisplay = "";
                if (node && !node.isRoot())
                {
                    if (node.isFolder())
                    {
                        pathToDisplay = node.getPath();
                    }
                    else
                    {
                        if (node.getParent())
                        {
                            pathToDisplay = node.getParent().getPath();
                        }
                    }
                }
                currentPathDisplay.appendChild(document.createTextNode(pathToDisplay));

                // b) display the name of the currently selected node.
                // clear out the existing content.
                var selectedDisplay = document.getElementById('selected');
                selectedDisplay.value = "";
                if (node && !node.isRoot())
                {
                    if (!node.isFolder())
                    {
                        selectedDisplay.value = node.data.name;
                    }
                }
            }

            function removeAll(element)
            {
                $A(element.childNodes).each(function(child)
                {
                    Element.remove(child);
                });
            }

            function copySelectedToParentForm()
            {
                var formFieldObject = opener.document.forms['$formname'].elements['$fieldname'];
                var tree = ZUTUBI.widget.View.getTreeById("browse");
                if (tree.selectedNode)
                {
                    formFieldObject.value = tree.selectedNode.getPath();
                }
                return false;
            }

            function deleteSelection()
            {
                try
                {
                    var tree = ZUTUBI.widget.View.getTreeById("browse");
                    if (tree.selectedNode)
                    {
                        ZUTUBI.fs.deleteFile(tree.selectedNode);
                    }
                }
                catch (e)
                {
                    console.log(e);
                }
                return false;
            }

            /*
             * Handle the resizing of the viewport to ensure that it is the correct size for
             * the open window.
             */
            function onResize(event)
            {
                var vElem = document.getElementById("view");

                var pElem = document.getElementById("pathElement");
                var fElem = document.getElementById("selectForm");
                var tElem = document.getElementById("toolbar");

                var pDim = Element.getDimensions(pElem);
                var fDim = Element.getDimensions(fElem);
                var tDim = Element.getDimensions(tElem);
                var wDim = windowSize();

                // work out the fudge factor - ie: the margin values.
                var fudgeFactor = 70;

                // todo: remove this fudge factor - it represents the height of the margins.
                var viewHeight = wDim.height - tDim.height - pDim.height - fDim.height - fudgeFactor;
                Element.setStyle(vElem, {"height":viewHeight + "px"});
                Element.setStyle(vElem, {"width":pDim.width + "px"});
            }


            function openNewFolderPopup()
            {
                window.open('/popups/new-folder.action', 'new_folder', 'width=400, height=120, resizable=yes', false);
                return false
            }
            //-->
    </script>

    <style type="text/css">
        .viewport{
            overflow:auto;
        }

        .bordered{
            margin:0px 0px 10px 0px;
            border-width:1px;
            border-color:blue;
            border-style:solid;
        }

        .nofluff {
           margin:0px;
           padding:0px;
        }

        .toolbarIcon {
            border-width:0px;
        }

    </style>

</head>

<body>

    <div class="bordered" id="toolbar">
        Toolbar:&nbsp;
        <a href="http://www.google.com" onclick="ZUTUBI.widget.View.getTreeById('browse').goUp(); return false;"><img class="toolbarIcon" src="" alt="up"/></a>
        <a href="http://www.google.com" onclick="return openNewFolderPopup(); return false;"><img class="toolbarIcon" src="" alt="new"/></a>
        <a href="http://www.google.com" onclick="return deleteSelection(); return false;"><img class="toolbarIcon" src="" alt="delete"/></a>
        <a href="http://www.google.com" onclick="return false;"><img class="toolbarIcon" src="" alt="refresh"/></a>
        <a href="http://www.google.com" onclick="return false;"><img class="toolbarIcon" src="" alt="pulse home"/></a>
    </div>

    <div class="bordered" id="pathElement">
        Path:&nbsp;<span id="path"></span>
    </div>
    <!--
    is it possible to tie the viewport size to the size
    of the popup window? preferably it would take up the room not used
    by the toolbar top and form at the base of the page.
    -->
    <div class="viewport bordered" id="view">
        <div id="browse" class="tree">
        </div>
    </div>

    <div class="bordered" id="selectForm">
        <form class="nofluff" name="form" action="" onSubmit="window.close();">
            <table>
                <tr>
                    <td nowrap>Selected:</td>
                    <td><input id="selected" type="text" size="40"/></td>
                    <td><input type="submit" value="select" onclick="copySelectedToParentForm();"/></td>
                    <td><input type="submit" value="cancel"/></td>
                </tr>
            </table>
        </form>
    </div>

</body>
</html>
