<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <title>file browser</title>

    <link rel="stylesheet" type="text/css" href="/css/treeview/tree.css"/>

    <script type="text/javascript" src="/js/prototype.js"></script>
    <script type="text/javascript" src="/js/yahoo/yahoo.js"></script>
    <script type="text/javascript" src="/js/yahoo/treeview.js"></script>
    <script type="text/javascript" src="/js/treeview/FileNode.js"></script>
    <script type="text/javascript" src="/js/Toolbar.js"></script>
    <script type="text/javascript" src="/js/main.js"></script>
    <script type="text/javascript">
        <!--
            // define the init properties that control the tree.

            window.onload = onInit;
            window.onresize = onResize;

            function onInit(event)
            {
                onResize(event);

                // construct the toolbar.
                var toolbar = new Toolbar('toolbar');
                var goUpTree = new ToolbarItem('up');
                goUpTree.onClick = function()
                {
                    YAHOO.widget.TreeView.getTree('browseTree').goUp();
                };
                var goToHome = new ToolbarItem('home');
                goToHome.onClick = function()
                {
                    YAHOO.widget.TreeView.getTree('browseTree').expandToPath(['C:\\', 'backup', 'SD0033']);
                }
                toolbar.add(goUpTree);
                toolbar.add(goToHome);
                toolbar.draw();

                // construct the directory browser.
                var tree = new YAHOO.widget.TreeView('browseTree');
                var dirOnly = false;

                tree.setDynamicLoad(function(node, onCompleteCallback)
                {
                    list(node, onCompleteCallback, dirOnly);
                }, 1);

                tree.onSelect = onSelectCallback;
                tree.onActivate = function(node)
                {
                    if (node.hasChildren(true))
                    {
                        node.fileToggle();
                    }
                    else
                    {
                        // this node has been selected.
                    }
                };

                // load the root nodes for the file system, then draw the tree.
                list(tree.getRoot(), function()
                {
                    tree.draw();

                    // open to initial value.
                    var initialPath = ["C:\\", "tmp", "empty"];
                    tree.expandToPath(initialPath);
                });
            }

            /*
             * Handle the resizing of the viewport to ensure that it is the correct size for
             * the open window.
             */
            function onResize(event)
            {
                var vElem = document.getElementById("view");

                var pElem = document.getElementById("pathElement");
                var fElem = document.getElementById("selectForm");
                var tElem = document.getElementById("toolbar");

                var pDim = Element.getDimensions(pElem);
                var fDim = Element.getDimensions(fElem);
                var tDim = Element.getDimensions(tElem);
                var wDim = windowSize();

                // work out the fudge factor - ie: the margin values.
                var fudgeFactor = 70;

                // todo: remove this fudge factor - it represents the height of the margins.
                var viewHeight = wDim.height - tDim.height - pDim.height - fDim.height - fudgeFactor;
                Element.setStyle(vElem, {"height":viewHeight + "px"});
                Element.setStyle(vElem, {"width":pDim.width + "px"});
            }

            function list(node, onCompleteCallback, dirOnly)
            {
                // generate id path.
                var n = node;
                var path = "";
                var p = ""
                var sep = "";
                while (n)
                {
                    if (n.data)
                    {
                        path = n.data.id + sep + path;
                        p = n.data.name + sep + p;
                        sep = "/";
                    }
                    n = n.parent;
                }

                var ajax = new Ajax.Request(
                    "/ajax/list.action",
                    {
                        method: 'get',
                        onComplete: listResponse(node, onCompleteCallback),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "pid=" + path + (dirOnly && "&dirOnly=false" || "")
                    }
                );
            }

            function listResponse(parentNode, callback)
            {
                return function(response)
                {
                    var jsonObjs = eval("(" + response.responseText + ")");

                    var results = $A(jsonObjs.results);
                    results.each(function(jsonObj)
                    {
                        // create the new nodes and add them to the parent.
                        for (var i = 0; i < jsonObj.listing.length; i++)
                        {
                            var data = {
                                "id":jsonObj.listing[i].fid,
                                "name":jsonObj.listing[i].file,
                                "label":jsonObj.listing[i].file,
                                "type":jsonObj.listing[i].type,
                                "separator":jsonObj.listing[i].separator
                            };
                            new FileNode(data, parentNode, false);
                        }
                    });
                    if (callback)
                    {
                        callback();
                    }
                };
            }

            function onSelectCallback(node)
            {
                // a) display the path to the currently selected node.
                // construct the path.
                var currentPathDisplay = document.getElementById('path');
                $A(currentPathDisplay.childNodes).each(function(child)
                {
                    Element.remove(child);
                });

                var pathToDisplay = "";
                if (node && !node.isRoot())
                {
                    if (node.isContainer())
                    {
                        pathToDisplay = node.getPath();
                    }
                    else
                    {
                        var p = node.parent;
                        if (p && !p.isRoot())
                        {
                            pathToDisplay = p.getPath();
                        }
                    }
                }
                currentPathDisplay.appendChild(document.createTextNode(pathToDisplay));

                // b) display the name of the currently selected node.
                // clear out the existing content.
                var selectedDisplay = document.getElementById('selected');
                selectedDisplay.value = "";
                if (node && !node.isRoot())
                {
                    if (!node.isContainer())
                    {
                        selectedDisplay.value = node.data.name;
                    }
                }
            }

            handleFailure = function(e, e2)
            {
                alert("handleFailure");
            }

            handleException = function(e, e2)
            {
                debug(e2);
            }

            debug = function(obj)
            {
                if (obj)
                {
                    var temp = "";
                    for (x in obj)
                    {
                        temp += x + ": " + obj[x] + "\n";
                    }
                    alert (temp);
                }
            }
            //-->
    </script>

    <style type="text/css">
        .viewport{
            overflow:auto;
        }

        .bordered{
            margin:0px 0px 10px 0px;
            border-width:1px;
            border-color:blue;
            border-style:solid;
        }

        .nofluff {
           margin:0px;
           padding:0px;
        }

    </style>

</head>

<body>

    <div class="bordered" id="toolbar">
    </div>

    <div class="bordered" id="pathElement">
        Path:&nbsp;<span id="path"></span>
    </div>

    <div class="viewport bordered" id="view">
        <div id="browseTree"></div>
    </div>

    <div class="bordered" id="selectForm">
        <form class="nofluff" name="form" action="" onSubmit="window.close();">
            <table>
                <tr>
                    <td nowrap>Selected:</td>
                    <td width="100%"><!-- how do we stretch this input field? --><input id="selected" type="text" size="40"/></td>
                    <td><input type="submit" value="select" onclick="copySelectedToParentForm();"/></td>
                    <td><input type="submit" value="cancel"/></td>
                </tr>
            </table>
        </form>
    </div>

</body>
</html>
