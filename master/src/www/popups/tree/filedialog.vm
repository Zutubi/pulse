<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <title>$title</title>

    <link rel="stylesheet" type="text/css" href="$base/css/treeview/tree.css"/>
    <link rel="stylesheet" type="text/css" href="$base/css/filedialog.css"/>

    <script type="text/javascript" src="$base/js/prototype.js"></script>
    <script type="text/javascript" src="$base/js/zutubi.js"></script>
    <script type="text/javascript" src="$base/js/yahoo/yahoo.js"></script>
    <script type="text/javascript" src="$base/js/yahoo/event.js"></script>
    <script type="text/javascript" src="$base/js/yahoo/animation.js"></script>
    <script type="text/javascript" src="$base/js/yahoo/dom.js"></script>
    <script type="text/javascript" src="$base/js/yahoo/treeview.js"></script>
    <script type="text/javascript" src="$base/js/widget/treeview.js"></script>
    <script type="text/javascript" src="$base/js/widget/toolbar.js"></script>
    <script type="text/javascript" src="$base/js/main.js"></script>
    <script type="text/javascript">
        <!--
            // define the init properties that control the tree.

            window.onload = onInit;
            window.onresize = onResize;

            function getFormValue()
            {
                var params = qs();
                var formname = params['formname'];
                var fieldname = params['fieldname'];

                var formFieldObject = opener.document.forms[formname].elements[fieldname];
                return formFieldObject.value;
            }

            function setFormValue(newValue)
            {
                var params = qs();
                var formname = params['formname'];
                var fieldname = params['fieldname'];

                var formFieldObject = opener.document.forms[formname].elements[fieldname];
                formFieldObject.value = newValue;
            }

            function copySelectedToParentForm()
            {
                var tree = YAHOO.widget.TreeView.getTree('browseTree');
                if (tree.selected)
                {
                    var path = tree.selected.getPath();
                    if ('$separator' == '/' && path.charAt(0) != '/')
                    {
                        path = '/' + path;
                    }
                    setFormValue(path);
                }
                return false;
            }

            function ensureVisible()
            {
                var tree = YAHOO.widget.TreeView.getTree('browseTree');
                var s = (tree.selected && tree.selected.getLabelEl() || null);

                if (s)
                {
                    var v = document.getElementById('view');
                    var t = document.getElementById('browseTree');

                    var cs = Position.cumulativeOffset(s);
                    var ct = Position.cumulativeOffset(t);

                    var rt = Position.realOffset(t);

                    var hv = Element.getHeight(v);
                    var hs = Element.getHeight(s);

                    var diff = rt[1] - (cs[1] - ct[1]);
                    if (diff > 0)
                    {
                        // scroll down.
                        var duration = 0.1;
                        var view = new YAHOO.util.Scroll(v, {scroll: { to: [0, cs[1] - ct[1] - hs] } }, duration);
                        view.animate();
                    }
                    diff = (cs[1] - ct[1]) - (hv + rt[1])
                    if (diff > 0)
                    {
                        var duration = 0.1;
                        var view = new YAHOO.util.Scroll(v, {scroll: { to: [0, cs[1] - ct[1] - hv + (2 * hs)] } }, duration);
                        view.animate();
                    }
                }
            }

            function onInit(event)
            {
                onResize(event);

                if ($showToolbar)
                {
                    initialiseToolbar();
                }

                // construct the directory browser.
                var tree = new ZUTUBI.widget.TreeView('browseTree');
                tree.setSeparator('$separator');

                // register event handlers and callbacks.
                tree.setDynamicLoad(function(node, onCompleteCallback)
                {
                    ls(node, onCompleteCallback, $showFiles, $showHidden);
                }, 1);

                // when a node is selected, ensure that it is visible.
                tree.onSelect = function(node)
                {
                    ensureVisible();
                }

                // when a node is activated (dblclicked), toggle it.
                tree.onActivate = function(node)
                {
                    if (node.hasChildren(true))
                    {
                        node.toggle();
                    }
                };

                // load the root nodes for the file system, then draw and open the tree.
                Element.show($('loading'));
                ls(tree.getRoot(), function()
                {
                    Element.hide($('loading'));
                    tree.draw();
                    tree.expandToPath(getFormValue());
                }, $showFiles, $showHidden);
            }

            function initialiseToolbar()
            {
                // initialise toolbar items.
                var goToHome = new ZUTUBI.widget.GoToToolbarItem('home', 'Go to user home', 'browseTree', '$!userHome');
                var goToPulseHome = new ZUTUBI.widget.GoToToolbarItem('pulsehome', 'Go to pulse home', 'browseTree', '$!pulseHome');

                var createFolder = new ZUTUBI.widget.ToolbarItem('create');
                createFolder.setTooltip('Create folder');
                createFolder.onClick = function()
                {
                    // open popup requesting the new folder name.
                    var width = 400;
                    var height = 150;
                    x = (640 - width)/2, y = (480 - height)/2;

                    if (screen) {
                        y = (screen.availHeight - height)/2;
                        x = (screen.availWidth - width)/2;
                    }

                    window.open('$base/popups/mkdir.action', 'create_folder', 'width='+width+', height='+height+',screenX='+x+',screenY='+y+',top='+y+',left='+x+', resizable=yes', false);
                    return false;
                };

                var deleteFolder = new ZUTUBI.widget.ToolbarItem('delete');
                deleteFolder.setTooltip('Delete folder');
                deleteFolder.onClick = function()
                {
                    var tree = YAHOO.widget.TreeView.getTree('browseTree');
                    var n = tree.selected;
                    if (n)
                    {
                        // make sure the user wants to do this.
                        if (confirm('Are you sure you want to delete the selected directory?'))
                        {
                            rmdir();
                        }
                    }
                };

                var refreshFolder = new ZUTUBI.widget.ToolbarItem('refresh');
                refreshFolder.setTooltip('Refresh folder');
                refreshFolder.onClick = function()
                {
                    var tree = YAHOO.widget.TreeView.getTree('browseTree');
                    var selectedNode = tree.selected;
                    if (selectedNode)
                    {
                        // collapse.
                        if (selectedNode.expanded)
                        {
                            selectedNode.toggle();
                        }
                        selectedNode.childrenRendered = false;
                        tree.removeChildren(selectedNode);
                    }
                };

                // construct the toolbar.
                var toolbar = new ZUTUBI.widget.Toolbar('toolbar');
                toolbar.add(goToHome);
                toolbar.add(goToPulseHome);
                toolbar.add(new ZUTUBI.widget.ToolbarSeparator());
                toolbar.add(createFolder);
                toolbar.add(deleteFolder);
                toolbar.add(refreshFolder);
                toolbar.draw();
            }

            /*
             * Handle the resizing of the viewport to ensure that it is the correct size for
             * the open window.
             */
            function onResize(event)
            {
                var vElem = document.getElementById("view");

                var tElem = document.getElementById("toolbar");

                var tDim = Element.getDimensions(tElem);
                var wDim = windowSize();

                // work out the fudge factor - ie: the margin values.
                var fudgeFactor = 160;

                var viewHeight = wDim.height - tDim.height - fudgeFactor;
                Element.setStyle(vElem, {"height":viewHeight + "px"});
            }

            function ls(node, onCompleteCallback, showFiles, showHidden)
            {
                hideActionErrors();

                // generate id path.
                var p = "";
                if (node.getPath)
                {
                    // not available for Yahoo.widget.RootNodes
                    p = node.getPath();
                }

                var ajax = new Ajax.Request(
                    "$base/ajax/ls.action",
                    {
                        method: 'post',
                        onComplete: lsResponse(node, onCompleteCallback),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "path=$root" + p + (showFiles && "&showFiles=" + showFiles || "") + (showHidden && "&showHidden=" + showHidden || "")
                    }
                );
            }

            function lsResponse(parentNode, callback)
            {
                return function(response)
                {
                    var jsonObj = eval("(" + response.responseText + ")");

                    if (jsonObj.actionErrors && $A(jsonObj.actionErrors).length > 0)
                    {
                        // an error has occured, present the error to the user.
                        showActionErrors(jsonObj.actionErrors);
                    }
                    else
                    {
                        var results = $A(jsonObj.listing);
                        results.each(function(obj)
                        {
                            var data = {
                                "id":obj.id,
                                "name":obj.file,            // name of the file.
                                "label":obj.file,           // Yahoo reads the label field and uses it as the display text.
                                "type":obj.type,            // the type of this file, used to define the class associated with this node.
                                "container":obj.container
                            };
                            new ZUTUBI.widget.FileNode(data, parentNode, false);
                        });
                        if (callback)
                        {
                            callback();
                        }
                    }
                };
            }

            function triggerMkdir(name)
            {
                setTimeout(function()
                {
                    mkdir(name);
                }, 100);
            }

            function mkdir(name)
            {
                hideActionErrors();

                // grab selected file.
                var node = YAHOO.widget.TreeView.getTree('browseTree').selected;
                if (!node)
                {
                    // should not be getting here... the mkdir toolbar item should not be
                    // available unless a node is selected.
                    return;
                }

                // generate id path.
                var p = node.getPath();

                var ajax = new Ajax.Request(
                    "$base/ajax/mkdir.action",
                    {
                        method: 'post',
                        onComplete: mkdirResponse(node, name),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "path=$root" + p + "&name=" + name
                    }
                );
            }

            function mkdirResponse(node, name)
            {
                return function(response)
                {
                    var jsonObj = eval("(" + response.responseText + ")");
                    if (jsonObj.actionErrors && $A(jsonObj.actionErrors).length > 0)
                    {
                        // an error has occured, present the error to the user.
                        showActionErrors(jsonObj.actionErrors);

                    }
                    else
                    {
                        var tree = YAHOO.widget.TreeView.getTree('browseTree');

                        // if response indicates success, refresh the folder response.

                        if (!node.expanded)
                        {
                            node.toggle();
                            // need to delay the node creation and selection until after the
                            // node has been expanded. can anyone say PITA?
                        }

                        var data = {
                            "id":name,
                            "name":name,
                            "label":name,
                            "type":"folder",
                            "container":true
                        };

                        var newFolder = new ZUTUBI.widget.FileNode(data, node, false);
                        node.refresh();

                        // need to select the newly created folder.
                        tree.select(newFolder);
                    }
                };
            }

            function rmdir()
            {
                hideActionErrors();

                // grab selected file.
                var node = YAHOO.widget.TreeView.getTree('browseTree').selected;

                // generate id path.
                var p = node.getPath();

                var ajax = new Ajax.Request(
                    "$base/ajax/rmdir.action",
                    {
                        method: 'post',
                        onComplete: rmdirResponse(node),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "path=$root" + p
                    }
                );
            }

            function rmdirResponse(node)
            {
                return function(response)
                {
                    // check response. if success, remove the node from the tree.
                    var jsonObj = eval("(" + response.responseText + ")");
                    if (jsonObj.actionErrors && $A(jsonObj.actionErrors).length > 0)
                    {
                        // an error has occured, present the error to the user.
                        showActionErrors(jsonObj.actionErrors);
                        
                    }
                    else
                    {
                        // remove the node.
                        var tree = YAHOO.widget.TreeView.getTree('browseTree');
                        tree.removeNode(node, true);
                    }
                }
            }

            /**
             * Display the provided list of action error messages within the configured error div.
             *
             * actionErrors:    an array of error messages.
             */
            function showActionErrors(actionErrors)
            {
                var sb = [];
                sb[sb.length] = "<div class=\"error\">";
                $A(actionErrors).each(function(msg)
                {
                    sb[sb.length] = msg;
                    sb[sb.length] = "<br/>";
                });
                sb[sb.length] = "</div>";

                var element = $('error');
                element.innerHTML = sb.join("");
                Element.show(element);
            }

            function hideActionErrors()
            {
                Element.hide($('error'));
            }

            handleFailure = function(e, e2)
            {
                openDebugAlert(e2);
            }

            handleException = function(e, e2)
            {
                openDebugAlert(e2);
            }

            //-->
    </script>

</head>

<body>
    <!-- banner -->
    <div id="banner">
        <h2>$header</h2>
        <p>
            $description
        </p>
    </div>
    <div id="loading">
        <img src="$base/images/inprogress.gif" alt="loading..."/>
    </div>

    <div style="clear:both;"></div>

    <!-- error message -->
    <div id="error">
    </div>

    <!--toolbar-->
    <div id="toolbar"></div>

    <!--directory view-->
    <div class="viewport" id="view">
        <div id="browseTree"></div>
    </div>

    <form class="nofluff" name="form" action="" onSubmit="window.close();">
        <table width="100%">
            <tr width="100%">
                <td align="right">
                    <input type="submit" value="okay" onclick="copySelectedToParentForm();"/>
                    <input type="submit" value="cancel"/>
                </td>
            </tr>
        </table>
    </form>

</body>
</html>
