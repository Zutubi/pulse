<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <title>Select directory</title>

    <link rel="stylesheet" type="text/css" href="/css/treeview/tree.css"/>

    <script type="text/javascript" src="/js/prototype.js"></script>
    <script type="text/javascript" src="/js/zutubi.js"></script>
    <script type="text/javascript" src="/js/yahoo/yahoo.js"></script>
    <script type="text/javascript" src="/js/yahoo/treeview.js"></script>
    <script type="text/javascript" src="/js/yahoo/animation.js"></script>
    <script type="text/javascript" src="/js/yahoo/event.js"></script>
    <script type="text/javascript" src="/js/yahoo/dom.js"></script>
    <script type="text/javascript" src="/js/widget/treeview.js"></script>
    <script type="text/javascript" src="/js/widget/toolbar.js"></script>
    <script type="text/javascript" src="/js/main.js"></script>
    <script type="text/javascript">
        <!--
            // define the init properties that control the tree.

            window.onload = onInit;
            window.onresize = onResize;

            function getFormValue()
            {
                var params = qs();
                var formname = params['formname'];
                var fieldname = params['fieldname'];

                var formFieldObject = opener.document.forms[formname].elements[fieldname];
                return formFieldObject.value;
            }

            function setFormValue(newValue)
            {
                var params = qs();
                var formname = params['formname'];
                var fieldname = params['fieldname'];

                var formFieldObject = opener.document.forms[formname].elements[fieldname];
                formFieldObject.value = newValue;
            }

            function copySelectedToParentForm()
            {
                var tree = YAHOO.widget.TreeView.getTree('browseTree');
                if (tree.selected)
                {
                    setFormValue(tree.selected.getPath());
                }
                return false;
            }

            function ensureVisible()
            {
                var tree = YAHOO.widget.TreeView.getTree('browseTree');
                var s = (tree.selected && tree.selected.getLabelEl() || null);

                if (s)
                {
                    var v = document.getElementById('view');
                    var t = document.getElementById('browseTree');

                    var cs = Position.cumulativeOffset(s);
                    var ct = Position.cumulativeOffset(t);

                    var rt = Position.realOffset(t);

                    var hv = Element.getHeight(v);
                    var hs = Element.getHeight(s);

                    var diff = rt[1] - (cs[1] - ct[1]);
                    if (diff > 0)
                    {
                        // scroll down.
                        var duration = 0.1;
                        var view = new YAHOO.util.Scroll(v, {scroll: { to: [0, cs[1] - ct[1] - hs] } }, duration);
                        view.animate();
                    }
                    diff = (cs[1] - ct[1]) - (hv + rt[1])
                    if (diff > 0)
                    {
                        var duration = 0.1;
                        var view = new YAHOO.util.Scroll(v, {scroll: { to: [0, cs[1] - ct[1] - hv + (2 * hs)] } }, duration);
                        view.animate();
                    }
                }
            }

            function onInit(event)
            {
                onResize(event);

                // initialise toolbar items.
                var goToHome = new ZUTUBI.widget.ToolbarItem('home');
                goToHome.setTooltip('Go to user home');
                goToHome.onClick = function()
                {
                    YAHOO.widget.TreeView.getTree('browseTree').expandToPath('$!userHome');
                };

                var goToPulseHome = new ZUTUBI.widget.ToolbarItem('pulsehome');
                goToPulseHome.setTooltip('Go to pulse home');
                goToPulseHome.onClick = function()
                {
                    YAHOO.widget.TreeView.getTree('browseTree').expandToPath('$!pulseHome');
                };

/*
                var separator = new ZUTUBI.widget.ToolbarSeparator();

                var createFolder = new ZUTUBI.widget.ToolbarItem('create');
                createFolder.setTooltip('Create folder');
                createFolder.onClick = function()
                {
                    mkdir('New Folder');
                };

                var deleteFolder = new ZUTUBI.widget.ToolbarItem('delete');
                deleteFolder.setTooltip('Delete folder');
                deleteFolder.onClick = function()
                {
                    var tree = YAHOO.widget.TreeView.getTree('browseTree');
                    var n = tree.selected;
                    if (n)
                    {
                        rmdir();
                    }
                };

*/
                // construct the toolbar.
                var toolbar = new ZUTUBI.widget.Toolbar('toolbar');
                toolbar.add(goToHome);
                toolbar.add(goToPulseHome);
                toolbar.draw();

                // construct the directory browser.
                var tree = new YAHOO.widget.TreeView('browseTree');
                tree.setSeparator('$separator');

                // register event handlers and callbacks.
                tree.setDynamicLoad(function(node, onCompleteCallback)
                {
                    ls(node, onCompleteCallback, true);
                }, 1);

                // when a node is selected, ensure that it is visible.
                tree.onSelect = function(node)
                {
                    ensureVisible();
                }

                // when a node is activated (dblclicked), toggle it.
                tree.onActivate = function(node)
                {
                    if (node.hasChildren(true))
                    {
                        node.fileToggle();
                    }
                };

                // load the root nodes for the file system, then draw and open the tree.
                ls(tree.getRoot(), function()
                {
                    tree.draw();
                    tree.expandToPath(getFormValue());
                });
            }

            /*
             * Handle the resizing of the viewport to ensure that it is the correct size for
             * the open window.
             */
            function onResize(event)
            {
                var vElem = document.getElementById("view");

                var tElem = document.getElementById("toolbar");

                var tDim = Element.getDimensions(tElem);
                var wDim = windowSize();

                // work out the fudge factor - ie: the margin values.
                var fudgeFactor = 160;

                var viewHeight = wDim.height - tDim.height - fudgeFactor;
                Element.setStyle(vElem, {"height":viewHeight + "px"});
            }

            function ls(node, onCompleteCallback, dirOnly)
            {
                // generate id path.
                var p = node.getPath();

                var ajax = new Ajax.Request(
                    "/ajax/ls.action",
                    {
                        method: 'get',
                        onComplete: lsResponse(node, onCompleteCallback),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "path=" + p + (dirOnly && "&dirOnly=true" || "")
                    }
                );
            }

            function lsResponse(parentNode, callback)
            {
                return function(response)
                {
                    var jsonObj = eval("(" + response.responseText + ")");

                    var results = $A(jsonObj.listing);
                    results.each(function(obj)
                    {
                        var data = {
                            "id":obj.id,
                            "name":obj.file,            // name of the file.
                            "label":obj.file,           // Yahoo reads the label field and uses it as the display text.
                            "type":obj.type,            // the type of this file, used to define the class associated with this node.
                            "container":obj.container
                        };
                        new ZUTUBI.widget.FileNode(data, parentNode, false);
                    });
                    if (callback)
                    {
                        callback();
                    }
                };
            }

            function mkdir(name)
            {
                // grab selected file.
                var node = YAHOO.widget.TreeView.getTree('browseTree').selected;

                // generate id path.
                var p = node.getPath();

                var ajax = new Ajax.Request(
                    "/ajax/mkdir.action",
                    {
                        method: 'get',
                        onComplete: mkdirResponse(node, name),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "path=" + p + "&name=" + name
                    }
                );
            }

            function mkdirResponse(node, name)
            {
                return function(response)
                {
                    // if response indicates success, refresh the folder response.
                    if (!node.expanded)
                    {
                        node.fileToggle();
                    }
                    else
                    {
                        var tree = YAHOO.widget.TreeView.getTree('browseTree');
//                        tree.removeNode(node, true);
//                        node.fileToggle();
                    }

                    // need to select the newly created folder.
                };
            }

            function rmdir()
            {
                // grab selected file.
                var node = YAHOO.widget.TreeView.getTree('browseTree').selected;

                // generate id path.
                var p = node.getPath();

                var ajax = new Ajax.Request(
                    "/ajax/rmdir.action",
                    {
                        method: 'get',
                        onComplete: rmdirResponse(node),
                        onFailure: handleFailure,
                        onException: handleException,
                        parameters: "path=" + p
                    }
                );
            }

            function rmdirResponse(node)
            {
                return function(response)
                {
                    // check response. if success, remove the node from the tree.
                    var tree = YAHOO.widget.TreeView.getTree('browseTree');
                    tree.removeNode(node, true);

                    // if error, present the error to the user.
                }
            }

            handleFailure = function(e, e2)
            {
                alert("handleFailure");
            }

            handleException = function(e, e2)
            {
                openDebugAlert(e2);
            }

            //-->
    </script>

    <style type="text/css">
        .viewport{
            overflow:auto;
        }

        .bordered{
            margin:0px 0px 10px 0px;
            border-width:1px;
            border-color:blue;
            border-style:solid;
        }

        .nofluff {
           margin:0px;
           padding:0px;
        }
    </style>

</head>

<body>
    <div>
        <p>
            <b>Select pulse data directory</b>
            <br/>
            All pulse data files will be stored in this directory.
        </p>
    </div>

    <div id="toolbar">
    </div>

    <div class="viewport bordered" id="view">
        <div id="browseTree"></div>
    </div>

    <form class="nofluff" name="form" action="" onSubmit="window.close();">
        <table width="100%">
            <tr width="100%">
                <td align="right">
                    <input type="submit" value="okay" onclick="copySelectedToParentForm();"/>
                    <input type="submit" value="cancel"/>
                </td>
            </tr>
        </table>
    </form>

</body>
</html>
