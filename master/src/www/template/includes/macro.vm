#macro( contactPointIcon $contact)
    #if ($contact.class.name == 'com.cinnamonbob.model.EmailContactPoint')<img src="/images/email_16.png"/>#end
    #if ($contact.class.name == 'com.cinnamonbob.model.YahooContactPoint')<img src="/images/yahoo_16.png"/>#end
#end

#macro( scmIcon $scm)
    #if ($scm.class.name == 'com.cinnamonbob.model.Svn')<img src="/images/svn_16.png"/>#end
    #if ($scm.class.name == 'com.cinnamonbob.model.Cvs')<img src="/images/cvs_16.png"/>#end
    #if ($scm.class.name == 'com.cinnamonbob.model.P4')<img src="/images/p4_16.png"/>#end
#end

#macro( scmDetail $project $scm)
    #scmIcon($scm)
    <a href="editScm!default.action?id=$scm.id&project=$project.id">
    #if ($scm.class.name == 'com.cinnamonbob.model.Svn') subversion #end
    #if ($scm.class.name == 'com.cinnamonbob.model.Cvs') cvs #end
    #if ($scm.class.name == 'com.cinnamonbob.model.P4') perforce #end
    </a>
#end

<!--- quartz trigger state -->
#macro( renderQuartzTriggerState $state)
    #if ($state == -1)<span style='color:black;'>none</span>#end
    #if ($state == 0)<span style='color:blue;'>normal</span>#end
    #if ($state == 1)<span style='color:orange;'>paused</span>#end
    #if ($state == 2)<span style='color:green;'>complete</span>#end
    #if ($state == 3)<span style='color:red;'>error</span>#end
    #if ($state == 4)<span style='color:red;'>blocked</span>#end
#end

#macro( renderTriggerState $state)
    #if ($state.ordinal() == 0)<span style='color:blue;'>active</span>#end
    #if ($state.ordinal() == 1)<span style='color:black;'>none</span>#end
    #if ($state.ordinal() == 2)<span style='color:orange;'>paused</span>#end
#end

##
## Outputs a single row for a name-value pair table.  Used for basic entity
## details.
##
#macro(detailrow $header $content)
  <tr><th class="command-detail">$header</th><td class="command-detail">$content</td></tr>
#end
#macro(scmdetailrow $header $project $scm)
  <tr><th class="command-detail">$header</th><td class="command-detail">#scmDetail($project $scm)</td></tr>
#end

##
## Sets the variable "class" depending on the state of the given result object.
##
#macro(classset $result)
  #if(!$result.commenced())
    #set($class = "pending")
  #elseif($result.inProgress())
    #set($class = "info")
  #elseif($result.succeeded())
    #set($class = "success")
  #else
    #set($class = "failure")
  #end
#end

##
## If the given result has an error or failure, outputs a table row with details.
##
#macro(errorrow $result)
  #if($result.errored())
    #set($resultMessage = $result.errorMessage)
  #elseif($result.failed())
    #set($resultMessage = $result.failureMessage)
  #else
    #set($resultMessage = false)
  #end

  #if($resultMessage)
    <tr>
      <td class="build-failure" colspan="4">
        <h4>error message</h4>
        <ul class="error-message">
          <li class="error">$resultMessage</li>
        </ul>
      </td>
    </tr>
  #end
#end

##
## Outputs table rows with a summary of the given result.
##
#macro(resultsummary $result)
  #classset($result)

  <tr>
    <th class="command-detail">commenced</th>
    <th class="command-detail">completed</th>
    <th class="command-detail">elapsed</th>
    <th class="command-detail">status</th>
  </tr>
  <tr>
    <td class="build-$class">$result.stamps.prettyStartTime</td>
    <td class="build-$class">$result.stamps.prettyEndTime</td>
    <td class="build-$class">$result.stamps.prettyElapsed</td>
    <td class="build-$class">$result.state.prettyString</td>
  <tr>
#end

##
## Outputs a nested list of RecipeResult details starting from the given node.
## If $showCommands is true, command results will also be displayed.
##
#macro(showrecipes $node $showCommands $projectId)
  <ul class="recipe-tree">
  #foreach($child in $node.children)
    <li class="recipe-tree">
      <table>
    #if($child.result.commenced())
        <tr>
          <th colspan="4" class="command-detail">$child.result.recipeNameSafe @ $child.hostSafe <a href="viewRecipe.action?id=$child.id&projectId=$projectId">details</a></th>
        </tr>
      #resultsummary($child.result)
    #else
        <tr>
          <th class="build-pending">$child.result.recipeNameSafe @ [pending]  <a href="viewRecipe.action?id=$child.id&projectId=$projectId">details</a></th>
        <tr>
    #end

    #if($showCommands && $child.result.commandResults.size() > 0)
        <tr>
          <th class="command-detail">command</th>
          <th class="command-detail">elapsed</th>
          <th class="command-detail">status</th>
          <th class="command-detail">primary artifact</th>
        </tr>
      #foreach($commandResult in $child.result.commandResults)
        #classset($commandResult)
        <tr>
          <td class="build-$class">$commandResult.commandName</td>
          <td class="build-$class">$commandResult.stamps.prettyElapsed</td>
          <td class="build-$class">$commandResult.state.prettyString</td>
          <td class="build-$class">
            #if($commandResult.artifacts.size() > 0)
              #set($artifact = $commandResult.artifacts.get(0))
                <img src="/images/gnome-mime-text.png"/><a href="viewArtifact.action?id=$artifact.id&commandId=$commandResult.id">$artifact.title</a>
            #else
              [none]
            #end
          </td>
        </tr>
        #errorrow($commandResult)
      #end
    #end
      </table>
    #if($child.children.size() > 0)
      #showrecipes($child $showCommands $projectId)
    #end
  #end
  </ul>
#end

##
## Outputs list items for messages of a given level directly on the given result
##
#macro(resultMessageItems $result $level)
  #if($level.toString() == "ERROR")
    #if($result.errorMessage)
      <li class="error">$result.errorMessage</li>
    #end
    #if($result.failureMessage)
      <li class="error">$result.failureMessage</li>
    #end
  #end
#end

##
## Summarises the messages of a given level on an artifact into a nested list
##
#macro(artifactMessageSummary $artifact $level)
  #if($artifact.hasMessages($level))
    #foreach($feature in $artifact.getFeatures($level))
      <li class="$level.toString().toLowerCase()">$feature.summary</li>
    #end
  #end
#end

##
## Summarises the messages of a given level on a command result into a nested list
##
#macro(commandMessageSummary $commandResult $level)
  #if($commandResult.hasMessages($level))
    #resultMessageItems($commandResult $level)
    #foreach($artifact in $commandResult.getArtifacts())
      #if($artifact.hasMessages($level))
        <li class="header">artifact '$artifact.title'</li>
        <ul>
          #artifactMessageSummary($artifact $level)
        </ul>
      #end
    #end
  #end
#end

##
## Summarises the messages of a given level on a recipe result into a nested list
##
#macro(recipeMessageSummary $recipeResult $level $top)
  #if($recipeResult.hasMessages($level))
    #if($top)
      <h4>$level.toString().toLowerCase() messages</h4>
      <ul class="$level.toString().toLowerCase()">
    #end

    #resultMessageItems($recipeResult $level)
    #foreach($commandResult in $recipeResult.commandResults)
      #if($commandResult.hasMessages($level))
        <li class="header">command '$commandResult.commandName'</li>
        <ul>
          #commandMessageSummary($commandResult $level)
        </ul>
      #end
    #end

    #if($top)
      </ul>
    #end
  #end
#end

##
## Summarises the messages of a given level on a recipe result node into a nested list
##
#macro(nodeMessageSummary $node $level)
  #if($node.hasMessages($level))
    <li class="header">recipe $node.result.recipeNameSafe @ $node.hostSafe</li>
    <ul>
      #recipeMessageSummary($node.result $level false)
      #foreach($child in $node.children)
        #nodeMessageSummary($child $level)
      #end
    </ul>
  #end
#end

##
## Summarises the messages of a given level on a build result into a nested list
##
#macro(buildMessageSummary $buildResult $level)
  #if($buildResult.hasMessages($level))
    <h4>$level.toString().toLowerCase() messages</h4>
    <ul class="$level.toString().toLowerCase()">
      #resultMessageItems($buildResult $level)
      #foreach($node in $buildResult.root.children)
        #nodeMessageSummary($node $level)
      #end
    </ul>
  #end
#end
