package com.zutubi.pulse.web.setup;

import com.zutubi.prototype.webwork.TransientAction;
import com.zutubi.pulse.bootstrap.Data;
import com.zutubi.pulse.bootstrap.MasterConfigurationManager;
import com.zutubi.pulse.bootstrap.SetupManager;
import com.zutubi.pulse.core.PulseException;
import com.zutubi.pulse.prototype.config.setup.SetupDatabaseTypeConfiguration;
import com.zutubi.pulse.util.FileSystemUtils;
import com.zutubi.util.IOUtils;

import java.io.File;
import java.util.Properties;

/**
 */
public class SetupDatabaseTypeAction extends TransientAction<SetupDatabaseTypeConfiguration>
{
    private MasterConfigurationManager configurationManager;
    private SetupManager setupManager;

    public SetupDatabaseTypeAction()
    {
        super("init/databaseType");
    }

    protected SetupDatabaseTypeConfiguration initialise() throws Exception
    {
        return new SetupDatabaseTypeConfiguration();
    }

    protected String complete(SetupDatabaseTypeConfiguration instance) throws Exception
    {
        Data data = configurationManager.getData();
        if (!instance.getType().isEmbedded())
        {
            // TODO: handle the case when the driver file is already in the driver lib directory (both literally
            // TODO: and already copied there).
            File libRoot = data.getDriverRoot();
            if(!libRoot.exists() && !libRoot.mkdirs())
            {
                throw new PulseException("Unable to create driver library directory '" + libRoot.getAbsolutePath() + "'");
            }

            File driverFile = new File(instance.getDriverFile());
            FileSystemUtils.copy(libRoot, driverFile);
        }
        
        File databaseConfig = new File(data.getUserConfigRoot(), "database.properties");
        Properties p = instance.getDatabaseProperties();

        IOUtils.write(p, databaseConfig, "Generated by Pulse setup wizard");

        setupManager.requestDbComplete();
        
        return SUCCESS;
    }

    public void setConfigurationManager(MasterConfigurationManager configurationManager)
    {
        this.configurationManager = configurationManager;
    }

    public void setSetupManager(SetupManager setupManager)
    {
        this.setupManager = setupManager;
    }
}
