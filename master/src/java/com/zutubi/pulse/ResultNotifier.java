package com.zutubi.pulse;

import com.zutubi.pulse.bootstrap.ComponentContext;
import com.zutubi.pulse.bootstrap.MasterConfigurationManager;
import com.zutubi.pulse.events.Event;
import com.zutubi.pulse.events.EventListener;
import com.zutubi.pulse.events.EventManager;
import com.zutubi.pulse.events.build.BuildCompletedEvent;
import com.zutubi.pulse.model.*;
import com.zutubi.pulse.renderer.BuildResultRenderer;
import com.zutubi.pulse.util.logging.Logger;

import java.io.StringWriter;
import java.util.*;

/**
 *
 */
public class ResultNotifier implements EventListener
{
    public static final String FAILURE_LIMIT_PROPERTY = "pulse.notification.test.failure.limit";
    public static final int DEFAULT_FAILURE_LIMIT = 20;

    private static final Logger LOG = Logger.getLogger(ResultNotifier.class);

    private SubscriptionManager subscriptionManager;
    private UserManager userManager;
    private MasterConfigurationManager configurationManager;
    private BuildResultRenderer buildResultRenderer;
    private BuildManager buildManager;

    public static int getFailureLimit()
    {
        int limit = DEFAULT_FAILURE_LIMIT;
        String property = System.getProperty(FAILURE_LIMIT_PROPERTY);
        if(property != null)
        {
            try
            {
                limit = Integer.parseInt(property);
            }
            catch(NumberFormatException e)
            {
                LOG.warning(e);
            }
        }

        return limit;
    }

    public void handleEvent(Event evt)
    {
        BuildCompletedEvent event = (BuildCompletedEvent) evt;
        BuildResult buildResult = event.getResult();

        buildResult.loadFailedTestResults(configurationManager.getDataDirectory(), getFailureLimit());

        Set<Long> notifiedContactPoints = new HashSet<Long>();
        Map<String, String> renderCache = new HashMap<String, String>();

        // Retrieve all of the subscriptions indicating an interest in the project
        // associated with the build result.
        List<Subscription> subscriptions = subscriptionManager.getSubscriptions(buildResult.getProject());
        for (Subscription subscription : subscriptions)
        {
            // filter out contact points that we have already notified.
            ContactPoint contactPoint = subscription.getContactPoint();
            if (notifiedContactPoints.contains(contactPoint.getId()))
            {
                continue;
            }

            // subscriptions are generated by hibernate, so we will need to
            // manually wire them to ensure they have access to the necessary resources.
            ComponentContext.autowire(subscription);

            // determine which of these subscriptions should be notified.
            if (subscription.conditionSatisfied(buildResult))
            {
                String templateName = subscription.getTemplate();
                String rendered = renderResult(buildResult, templateName, renderCache);
                notifiedContactPoints.add(contactPoint.getId());
                contactPoint.notify(buildResult, rendered, buildResultRenderer.getTemplateInfo(templateName, buildResult.isPersonal()).getMimeType());
                
                // Contact point may be modified: e.g. error may be set.
                userManager.save(contactPoint);
            }
        }
    }

    private String renderResult(BuildResult result, String template, Map<String, String> cache)
    {
        String rendered = cache.get(template);
        if(rendered == null)
        {
            StringWriter w = new StringWriter();
            buildResultRenderer.render(configurationManager.getAppConfig().getBaseUrl(), result, buildManager.getChangesForBuild(result), template, w);
            rendered = w.toString();
            cache.put(template, rendered);
        }

        return rendered;
    }

    public Class[] getHandledEvents()
    {
        return new Class[]{BuildCompletedEvent.class};
    }

    public void setEventManager(EventManager eventManager)
    {
        eventManager.register(this);
    }

    public void setSubscriptionManager(SubscriptionManager subscriptionManager)
    {
        this.subscriptionManager = subscriptionManager;
    }

    public void setUserManager(UserManager userManager)
    {
        this.userManager = userManager;
    }

    public void setConfigurationManager(MasterConfigurationManager configurationManager)
    {
        this.configurationManager = configurationManager;
    }

    public void setBuildResultRenderer(BuildResultRenderer buildResultRenderer)
    {
        this.buildResultRenderer = buildResultRenderer;
    }

    public void setBuildManager(BuildManager buildManager)
    {
        this.buildManager = buildManager;
    }
}
