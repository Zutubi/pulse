package com.zutubi.pulse;

import com.zutubi.pulse.bootstrap.ComponentContext;
import com.zutubi.pulse.events.Event;
import com.zutubi.pulse.events.EventListener;
import com.zutubi.pulse.events.EventManager;
import com.zutubi.pulse.events.build.BuildCompletedEvent;
import com.zutubi.pulse.model.BuildResult;
import com.zutubi.pulse.model.ContactPoint;
import com.zutubi.pulse.model.Subscription;
import com.zutubi.pulse.model.SubscriptionManager;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 */
public class ResultNotifier implements EventListener
{
    /**
     * The systems subscription manager.
     */
    private SubscriptionManager subscriptionManager;

    public void setEventManager(EventManager eventManager)
    {
        eventManager.register(this);
    }

    /**
     * The subscription manager used by the result notifier to access subscription details.
     *
     * @param subscriptionManager
     */
    public void setSubscriptionManager(SubscriptionManager subscriptionManager)
    {
        this.subscriptionManager = subscriptionManager;
    }

    public void handleEvent(Event evt)
    {
        BuildCompletedEvent event = (BuildCompletedEvent) evt;
        BuildResult buildResult = event.getResult();

        Set<String> notifiedContactPoints = new HashSet<String>();

        // Retrieve all of the subscriptions indicating an interest in the project
        // associated with the build result.
        List<Subscription> subscriptions = subscriptionManager.getSubscriptions(buildResult.getProject());
        for (Subscription subscription : subscriptions)
        {
            // filter out contact points that we have alredy notified.
            ContactPoint contactPoint = subscription.getContactPoint();
            if (notifiedContactPoints.contains(contactPoint.getUid()))
            {
                continue;
            }

            // subscriptions are generated by hibernate, so we will need to
            // manually wire them to ensure they have access to the necessary resources.
            ComponentContext.autowire(subscription);

            // determine which of these subscriptions should be notified.
            if (subscription.conditionSatisfied(buildResult))
            {
                notifiedContactPoints.add(contactPoint.getUid());
                contactPoint.notify(buildResult);
            }
        }
    }

    public Class[] getHandledEvents()
    {
        return new Class[]{BuildCompletedEvent.class};
    }
}
