label=run executable task
introduction=A run executable task can be used to run an arbitrary command.
verbose=<p>A run executable task can be used to run an arbitrary command on the pulse master \
  when the hook is triggered. The command can be passed arguments based on the build details \
  using properties based on the hook context.</p>\
  <p>A possible use case for this post build action is to trigger a custom notification mechanism \
  (lava lamps anyone?).</p>

# Form fields
command.label=command
command.verbose=The executable to run, either as an absolute path or the name of an executable \
  in the PATH for the pulse master process.
command.example.1=/usr/local/bin/my-notification-script.sh

arguments.label=arguments
arguments.help=space-separated list of arguments to pass to the command, may include property references (note \
  that backslashes thus must be escaped)
arguments.verbose=<p>A space-separated list of arguments to pass to the command. To include spaces \
  in an argument, you may escape them with a backslash (\\), or surround the argument in double \
  quotes (&quot;...&quot;).  To include a literal backslash or double quote, escape with a \
  backslash (e.g. \\\\, \\&quot;).</p>\
  <p>The arguments may include references to properties from the context of the hook.  These \
  include the properties visible to the build (or stage), and hook-specific properties such as \
  the status of the build.</p>
arguments.example.1=$'{'project'}' $'{'number'}' &quot;$'{'reason'}'&quot; $'{'status'}' &quot;$'{'test.summary'}'&quot;
arguments.example.1.blurb=Pass some relevant details to a custom notification command as separate \
  arguments
arguments.example.2=&quot;$'{'stage.default.command.test.dir'}'/reports&quot;
arguments.example.2.blurb=Pass the directory containing files for an artifact named \
  &quot;reports&quot; produced by command &quot;test&quot; in stage &quot;default&quot;
arguments.example.3=&quot;this is a single argument&quot;
arguments.example.3.blurb=Pass any argument with spaces

workingDir.label=working directory
workingDir.help=the working directory for invocation of the command

timeoutApplied.label=apply timeout
timeoutApplied.verbose=If checked, a timeout will be applied to the command execution.

timeout.label=command timeout (seconds)
timeout.verbose=Timeout, in seconds, to apply to the command.  If the command does not complete \
  within that time it will be terminated and the task deemed to have failed.

