<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
The core subsystem is the first sub-system initialise after bootstrapping.
-->
<beans>

    <bean id="eventManager" class="com.cinnamonbob.events.DefaultEventManager">
        <constructor-arg index="0" ref="eventDispatcher"/>
    </bean>

    <bean id="eventDispatcher" class="com.cinnamonbob.events.SynchronousDispatcher"/>

    <!--
    Initial security components.
    -->
    <bean id="httpSessionContextIntegrationFilterProxy" class="org.acegisecurity.util.FilterChainProxy">
        <property name="filterInvocationDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /**=httpSessionContextIntegrationFilter
            </value>
        </property>
    </bean>

    <!--
    This filter is placed at the start of the chain so that a Context can be setup in the SecurityContextHolder at the
    beginning of a web request, and any changes to the Context can be copied to the HttpSession when the web request
    ends (ready for use with the next web request)
    -->
    <bean id="httpSessionContextIntegrationFilter"
          class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>

    <!--
    ideally, we want to initialise the log configuration manager as soon as possible. the problem
    is that to locate the correct logging.properties file we need the config manager, which requires
    spring.
    Leave it here for now until a solution presents itself.
    -->
    <bean id="logConfigurationManager" class="com.cinnamonbob.logging.LogConfigurationManager" init-method="init">
        <property name="configurationManager">
            <ref bean="configurationManager"/>
        </property>
    </bean>

</beans>
