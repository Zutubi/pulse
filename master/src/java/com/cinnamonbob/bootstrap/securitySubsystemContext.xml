<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
The security subsystem contains the configuration of the authentication and authorization system,
based upon the Acegi-Security system.
For details on the individual components configured here, see http://acegisecurity.org/docbook/acegi.html

This file is split into two regions.
a) the upper half deals with authentication.
b) the lower half deals with authorization.

The beans defined within the security subsystem need not be accessed by other contexts.
-->
<beans>

    <bean id="securityManager" class="com.cinnamonbob.security.AcegiSecurityManager" init-method="init">
        <property name="jettyManager"><ref bean="jettyManager"/></property>
    </bean>

    <!-- ============================================================= -->
    <!-- The first half of this context is dedicated to authentication -->

    <bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
        <property name="providers">
            <list>
                <ref local="daoAuthenticationProvider"/>
                <ref local="rememberMeAuthenticationProvider"/>
            </list>
        </property>
    </bean>

    <bean id="daoAuthenticationProvider" class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
        <property name="userDetailsService">
            <ref bean="userManager"/>
        </property>
<!-- no password encoding at the moment.
        <property name="passwordEncoder">
            <ref local="passwordEncoder"/>
        </property>
-->
    </bean>

    <bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.Md5PasswordEncoder"/>

<!-- Use this for an in memory user manager.
    <bean id="userManager" class="org.acegisecurity.userdetails.memory.InMemoryDaoImpl">
        <property name="userMap">
            <value>
                admin=admin,ROLE_ADMINISTRATOR,ROLE_USER
                user=user,ROLE_USER
            </value>
        </property>
    </bean>
-->

    <!--
    this filter chain proxy is referenced in web.xml
    -->
    <bean id="filterChainProxy" class="org.acegisecurity.util.FilterChainProxy">
        <property name="filterInvocationDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,basicProcessingFilter,rememberMeProcessingFilter,anonymousProcessingFilter,securityEnforcementFilter,switchUserProcessingFilter
            </value>
        </property>
    </bean>

    <!--
    The AuthenticationProcessingFilter is responsible for handling the login request. It monitors for requests
    sent to 'filterProcessesUrl', and uses the 'authenticationManager' to handle the actual authentication.
    -->
    <bean id="authenticationProcessingFilter" class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
        <property name="authenticationManager">
            <ref local="authenticationManager"/>
        </property>
        <property name="authenticationFailureUrl">
            <value>/login.action?error=true</value>
        </property>
        <!-- this default is only used when the target url is not available via the session.-->
        <property name="defaultTargetUrl">
            <value>/</value>
        </property>
        <property name="filterProcessesUrl">
            <value>/j_acegi_security_check</value>
        </property>
        <property name="rememberMeServices">
            <ref local="rememberMeServices"/>
        </property>
    </bean>

    <!--
    This filter is placed at the start of the chain so that a Context can be setup in the SecurityContextHolder at the
    beginning of a web request, and any changes to the Context can be copied to the HttpSession when the web request
    ends (ready for use with the next web request)
    -->
    <bean id="httpSessionContextIntegrationFilter"
          class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>

    <!--
    This filter provides support for processing basic authentication credentials presented in HTTP headers.
    -->
    <bean id="basicProcessingFilter" class="org.acegisecurity.ui.basicauth.BasicProcessingFilter">
        <property name="authenticationManager">
            <ref local="authenticationManager"/>
        </property>
        <property name="authenticationEntryPoint">
            <ref local="basicProcessingFilterEntryPoint"/>
        </property>
    </bean>

    <bean id="basicProcessingFilterEntryPoint" class="org.acegisecurity.ui.basicauth.BasicProcessingFilterEntryPoint">
        <property name="realmName">
            <value>Bob Realm</value>
        </property>
    </bean>

    <!--
    This endpoint defines where a user is directed when authentication is required.
    -->
    <bean id="authenticationProcessingFilterEntryPoint"
          class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
        <property name="loginFormUrl">
            <value>/login.action</value>
        </property>
        <property name="forceHttps">
            <value>false</value>
        </property>
    </bean>

    <bean id="httpRequestAccessDecisionManager" class="org.acegisecurity.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions">
            <value>false</value>
        </property>
        <property name="decisionVoters">
            <list>
                <ref local="roleVoter"/>
            </list>
        </property>
    </bean>


    <!--
    The remember me processing filter allows for automatic 'remember me' cookie login.
    With the remember me services, we need to ensure that the following links are configured:
    a) AuthenticationProcessingFilter.setRememberMeServices()
    b) AuthenticationManager.setProviders()
    c) FilterChainProxy
    -->
    <bean id="rememberMeProcessingFilter" class="org.acegisecurity.ui.rememberme.RememberMeProcessingFilter">
        <property name="rememberMeServices">
            <ref local="rememberMeServices"/>
        </property>
    </bean>

    <bean id="rememberMeServices" class="org.acegisecurity.ui.rememberme.TokenBasedRememberMeServices">
        <property name="userDetailsService">
            <ref bean="userManager"/>
        </property>
        <property name="key">
            <value>bob</value>
        </property>
    </bean>

    <bean id="rememberMeAuthenticationProvider"
          class="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider">
        <property name="key">
            <value>bob</value>
        </property>
    </bean>

    <!--
    AnonymousProcessingFilter, which is chained after the normal authentication mechanisms and automatically
    add an AnonymousAuthenticationToken to the SecurityContextHolder if there is no existing Authentication
    held there.
    -->
    <bean id="anonymousProcessingFilter" class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
        <property name="key">
            <value>foobar</value>
        </property>
        <property name="userAttribute">
            <value>anonymous,ROLE_ANONYMOUS</value>
        </property>
    </bean>

    <bean id="anonymousAuthenticationProvider"
          class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
        <property name="key">
            <value>foobar</value>
        </property>
    </bean>

    <!--
    Filter used to switch the user context. Note: the switch and exit url must be secured
    based on the role granted the ability to 'switch' to another user
    -->
    <!-- In this example 'marissa' has ROLE_SUPERVISOR that can switch to regular ROLE_USER(s) -->
    <bean id="switchUserProcessingFilter" class="org.acegisecurity.ui.switchuser.SwitchUserProcessingFilter">
        <property name="userDetailsService" ref="userManager"/>
        <property name="switchUserUrl">
            <value>/j_acegi_switch_user</value>
        </property>
        <property name="exitUserUrl">
            <value>/j_acegi_exit_user</value>
        </property>
        <property name="targetUrl">
            <value>/acegi-security-sample-contacts-filter/secure/index.htm</value>
        </property>
    </bean>

    <!--
    Not exactly sure what this one does.... other than redirecting a user to the login endpoint
    if they do not comply with the authorization requirements?
    -->
    <bean id="securityEnforcementFilter" class="org.acegisecurity.intercept.web.SecurityEnforcementFilter">
        <property name="filterSecurityInterceptor">
            <ref local="filterInvocationInterceptor"/>
        </property>
        <property name="authenticationEntryPoint">
            <ref local="authenticationProcessingFilterEntryPoint"/>
        </property>
    </bean>

    <!--
    The order that entries are placed against the objectDefinitionSource is critical.
    The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that
    matches the request URL. Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions
    first, with LEAST SPECIFIC (ie a/.*) expressions last
    -->
    <bean id="filterInvocationInterceptor" class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
        <property name="authenticationManager">
            <ref local="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref local="httpRequestAccessDecisionManager"/>
        </property>
        <property name="objectDefinitionSource">
            <value>
                CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
                PATTERN_TYPE_APACHE_ANT
                /switchuser.vm=ROLE_ADMINISTRATOR
                /j_acegi_switch_user=ROLE_ADMINISTRATOR
                /login.action*=ROLE_ANONYMOUS,ROLE_USER
                /logout.action=ROLE_ANONYMOUS,ROLE_USER
                /=ROLE_USER
                /default.action=ROLE_USER
                /setup/**/*=ROLE_ANONYMOUS,ROLE_USER
                /admin/**/*=ROLE_ADMINISTRATOR
                /**/*.action*=ROLE_USER
            </value>
        </property>
    </bean>


    <!-- ==================================================================== -->
    <!-- The second half of this context file is dedicated to authorization   -->

    <!-- ACL permission masks used by this application -->
    <bean id="org.acegisecurity.acl.basic.SimpleAclEntry.ADMINISTRATION"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acl.basic.SimpleAclEntry.ADMINISTRATION</value>
        </property>
    </bean>
    <bean id="org.acegisecurity.acl.basic.SimpleAclEntry.READ"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acl.basic.SimpleAclEntry.READ</value>
        </property>
    </bean>
    <bean id="org.acegisecurity.acl.basic.SimpleAclEntry.DELETE"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField">
            <value>org.acegisecurity.acl.basic.SimpleAclEntry.DELETE</value>
        </property>
    </bean>

    <!-- An access decision voter that reads ROLE_* configuration settings -->
    <bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter"/>

</beans>
