package com.zutubi.pulse.restore;

import com.zutubi.pulse.test.PulseTestCase;
import com.zutubi.pulse.util.FileSystemUtils;

import java.io.File;
import java.util.Date;
import java.util.Calendar;

/**
 *
 *
 */
public class ArchiveFactoryTest extends PulseTestCase
{
    private ArchiveFactory factory;

    private File tmp;

    protected void setUp() throws Exception
    {
        super.setUp();

        tmp = FileSystemUtils.createTempDir();
        factory = new ArchiveFactory();
        factory.setArchiveDirectory(new File(tmp, "archive"));
        factory.setTmpDirectory(new File(tmp, "tmp"));
    }

    protected void tearDown() throws Exception
    {
        removeDirectory(tmp);
        super.tearDown();
    }

    public void testCreateNewExpandedDirectoryArchive() throws ArchiveException
    {
        // specify the location for new archives.

        // create a new archive.
        // -- names are automatically generated by archive name generator, looks at directory into which
        //    the archive will be created and does the rest.

        Date bc = Calendar.getInstance().getTime();

        Archive createdArchive = factory.createArchive();

        Date ac = Calendar.getInstance().getTime();

        assertEquals("created", createdArchive.getCreated());       // ensure that the date is within the appropriate bounds.
        assertEquals("version", createdArchive.getVersion());       // what do we expect here?
        assertEquals("author", createdArchive.getAuthor());

        // verify the generated file name - based on the file name generator, so maybe leave that to another test.

        assertNotNull(createdArchive.getFile());
        assertTrue(createdArchive.getFile().exists());

        Archive loadedArchive = factory.openArchive(createdArchive.getFile());
        assertEquals(createdArchive.getAuthor(), loadedArchive.getAuthor());
        assertEquals(createdArchive.getVersion(), loadedArchive.getVersion());
        assertEquals(createdArchive.getCreated(), loadedArchive.getCreated());
    }
}
