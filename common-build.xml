<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:fr.jayasoft.ivy.ant" name="common core" basedir=".">

    <!-- initialise configuration -->
    <target name="init" depends="module-init">

        <property name="module.root.dir" value="${project.root.dir}/${module}"/>

        <property name="src.dir" value="${module.root.dir}/src/java"/>
        <property name="test.dir" value="${module.root.dir}/src/test"/>

        <property name="build.dir" value="${module.root.dir}/build"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="test.classes.dir" value="${build.dir}/test.classes"/>
        <property name="report.dir" value="${build.dir}/reports"/>

        <dirname property="current.dir" file="ivy.xml"/>

        <property file="${project.root.dir}/ivy.properties"/>
        <ivy:configure file="${project.root.dir}/ivyconf.xml"/>

        <!-- library paths. -->
        <fileset id="module.libs" dir="${module.root.dir}/build/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path id="lib.path">
            <fileset refid="module.libs"/>
        </path>

        <!-- resources / properties definition-->
        <patternset id="resources">
            <include name="**/*.properties"/>
            <include name="**/*.gif"/>
            <include name="**/*.png"/>
            <include name="**/*.xml"/>
            <include name="**/*.txt"/>
        </patternset>

    </target>

    <!-- clean dependencies -->
    <target name="clean" depends="init">
        <delete dir="${build.dir}"/>
    </target>

    <!-- prepare for new build -->
    <target name="prepare" depends="init">
        <!-- create necessary directories -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${module.root.dir}/build/lib"/>
        <mkdir dir="${report.dir}"/>
        <mkdir dir="${report.dir}/junit"/>

        <!-- resolve dependencies -->
        <resolve conf="external"/>
        <resolve conf="internal"/>

    </target>

    <!-- execute build -->
    <target name="build" depends="init">

        <javac srcdir="${src.dir}" destdir="${classes.dir}">
            <classpath refid="lib.path"/>
        </javac>

        <copy todir="${classes.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

        <javac srcdir="${test.dir}" destdir="${test.classes.dir}">
            <classpath refid="lib.path"/>
            <classpath location="${classes.dir}"/>
        </javac>

        <copy todir="${test.classes.dir}" overwrite="true">
            <fileset dir="${test.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

    </target>

    <target name="build.module" depends="clean, prepare, build, test, package, publish"/>

    <!-- run test cases -->
    <target name="test" depends="init">
        <junit printsummary="yes" fork="on" haltonfailure="yes">
            <classpath>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <path refid="lib.path"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/junit">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Cvs*"/>
                    <exclude name="**/P4*"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}/junit">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}"/>
        </junitreport>
    </target>

    <!-- package artifacts -->
    <target name="package" depends="init">
        <jar file="${module.root.dir}/build/${module}.jar" basedir="${classes.dir}"/>
        <jar file="${module.root.dir}/build/${module}-test.jar" basedir="${test.classes.dir}"/>
    </target>

    <target name="publish" depends="init">
        <dirname property="current.dir" file="ivy.xml"/>
        <!-- copy built artifacts to the build/repository -->
        <ivy:publish resolver="build" artifactspattern="${current.dir}/build/[artifact].[ext]"/>
    </target>

    <!-- build file extras -->
    <macrodef name="resolve">
        <attribute name="conf"/>
        <sequential>
            <!-- lookup dependencies, loading them into the cache -->
            <ivy:resolve conf="@{conf}"/>
            <!-- copy the dependencies into the local directory -->
            <ivy:retrieve validate="true" conf="@{conf}"/>
            <!-- deliver resolved ivy file so that it can be used by dependent modules. -->
            <ivy:deliver deliverpattern="${project.root.dir}/build/repository/[module]/ivy-[revision].xml"/>
        </sequential>
    </macrodef>

</project>