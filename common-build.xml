<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:fr.jayasoft.ivy.ant" name="common core" basedir=".">

    <!-- initialise configuration -->
    <target name="init" depends="module-pre-init, common-init, module-post-init"/>

    <target name="module-pre-init"/>

    <target name="module-post-init"/>

    <target name="common-init">

        <echo message="-----------------------------------"/>
        <echo message="    Component: init ${module}"/>
        <echo message="-----------------------------------"/>

        <property name="module.root.dir" value="${project.root.dir}/${module}"/>

        <property name="src.dir" value="${module.root.dir}/src/java"/>
        <property name="test.dir" value="${module.root.dir}/src/test"/>
        <property name="accept.dir" value="${module.root.dir}/src/acceptance"/>

        <property name="build.dir" value="${module.root.dir}/build"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="test.classes.dir" value="${build.dir}/test.classes"/>
        <property name="process.src.dir" value="${build.dir}/src"/>
        <property name="accept.classes.dir" value="${build.dir}/accept.classes"/>
        <property name="report.dir" value="${build.dir}/reports"/>

        <property name="project.repository" value="${project.root.dir}/build/repository"/>

        <dirname property="current.dir" file="ivy.xml"/>

        <property file="${project.root.dir}/ivy.properties"/>
        <ivy:configure file="${project.root.dir}/ivyconf.xml"/>

        <!-- library paths. -->
        <fileset id="module.libs" dir="${module.root.dir}/build/lib">
            <include name="**/*.jar"/>
        </fileset>
        <path id="lib.path">
            <fileset refid="module.libs"/>
        </path>

        <path id="custom.task.path">
            <pathelement path="${project.root.dir}/etc/copyrighttask.jar"/>
        </path>
        <taskdef name="copyright" classname="com.zutubi.pulse.CopyrightTask" classpathref="custom.task.path"/>

        <!-- resources / properties definition-->
        <patternset id="resources">
            <include name="**/*.properties"/>
            <include name="**/*.gif"/>
            <include name="**/*.png"/>
            <include name="**/*.html"/>
            <include name="**/*.xml"/>
            <include name="**/*.txt"/>
            <include name="**/*.zip"/>
        </patternset>

        <patternset id="release.excludes">
            <exclude name="**/LicenseEncoder*"/>
        </patternset>

    </target>

    <!-- clean dependencies -->
    <target name="clean" depends="init">
        <delete dir="${build.dir}"/>
        <delete dir="${user.home}/.ivy-cache/zutubi/pulse-${module}"/>
    </target>

    <!-- prepare for new build -->
    <target name="prepare" depends="init, module-pre-prepare, common-prepare, module-post-prepare"/>

    <target name="module-pre-prepare"/>

    <target name="module-post-prepare"/>

    <target name="common-prepare" depends="init">

        <echo message="-----------------------------------"/>
        <echo message="    Component: prepare ${module}"/>
        <echo message="-----------------------------------"/>

        <!-- create necessary directories -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${accept.classes.dir}"/>
        <mkdir dir="${module.root.dir}/build/lib"/>
        <mkdir dir="${report.dir}"/>
        <mkdir dir="${report.dir}/junit"/>
        <mkdir dir="${report.dir}/junit/xml"/>
        <mkdir dir="${report.dir}/junit/html"/>

        <mkdir dir="${process.src.dir}"/>

        <!-- resolve dependencies -->
        <resolve conf="build"/>

    </target>

    <!-- execute the build -->
    <target name="build" depends="init, module-pre-build, common-build, module-post-build"/>

    <!-- a pre build hook that can be overriden in the modules build.xml -->
    <target name="module-pre-build"/>

    <!-- a post build hook that can be overriden in the modules build.xml -->
    <target name="module-post-build"/>

    <!-- execute the common portion of the build. -->
    <target name="common-build" depends="init">

        <echo message="-----------------------------------"/>
        <echo message="    Component: building ${module}"/>
        <echo message="-----------------------------------"/>

        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
            <classpath refid="lib.path"/>
        </javac>

        <copy todir="${classes.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

        <javac srcdir="${test.dir}" destdir="${test.classes.dir}" debug="true">
            <classpath refid="lib.path"/>
            <classpath location="${classes.dir}"/>
        </javac>

        <copy todir="${test.classes.dir}" overwrite="true">
            <fileset dir="${test.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

        <javac srcdir="${accept.dir}" destdir="${accept.classes.dir}" debug="true">
            <classpath refid="lib.path"/>
            <classpath location="${classes.dir}"/>
            <classpath location="${test.classes.dir}"/>
        </javac>

        <copy todir="${accept.classes.dir}" overwrite="true">
            <fileset dir="${accept.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

        <copy todir="${process.src.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${test.dir}">
                <include name="**/*.java"/>
            </fileset>
        </copy>

        <!-- process copyright. -->
        <copyright src="${process.src.dir}" value="${copyright.statement}">
            <include name="**/*.java"/>
        </copyright>

    </target>

    <target name="test" depends="init, module-pre-test, common-test, module-post-test" unless="skip.tests"/>

    <target name="module-pre-test" unless="skip.tests"/>
    
    <target name="module-post-test" unless="skip.tests"/>

    <!-- run test cases -->
    <target name="common-test" unless="skip.tests">
        <echo message="-----------------------------------"/>
        <echo message="    Component: testing ${module}"/>
        <echo message="-----------------------------------"/>

        <junit printsummary="yes" fork="on" failureProperty="test.failed" errorProperty="test.failed">
            <classpath>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <path refid="lib.path"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/junit/xml">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Cvs*"/>
                    <exclude name="**/LogInformationAnalyserTest*"/>
                    <exclude name="**/SVN*"/>
                    <exclude name="**/*WorkingCopyTest*"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}/junit">
            <fileset dir="${report.dir}/junit/xml">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/junit/html"/>
        </junitreport>
        <!--<fail message="One or more tests failed.  See the reports (${report.dir}) for details." if="test.failed"/>        -->
    </target>

    <!-- package artifacts -->
    <target name="package" depends="init, module-pre-package, common-package, module-post-package"/>

    <target name="module-pre-package"/>

    <target name="module-post-package"/>

    <target name="common-package" depends="init">
        
        <echo message="-----------------------------------"/>
        <echo message="    Component: package ${module}"/>
        <echo message="-----------------------------------"/>

        <jar file="${module.root.dir}/build/${module}.jar" basedir="${classes.dir}">
            <!-- contains license encoding details. -->
            <patternset refid="release.excludes"/>
        </jar>
        <jar file="${module.root.dir}/build/${module}-test.jar" basedir="${test.classes.dir}">
            <!-- contains license encoding details. -->
            <patternset refid="release.excludes"/>
        </jar>
        <jar file="${module.root.dir}/build/${module}-src.jar" basedir="${process.src.dir}">
            <!-- contains license encoding details. -->
            <patternset refid="release.excludes"/>
        </jar>
    </target>

    <target name="publish" depends="init">
        <dirname property="current.dir" file="ivy.xml"/>
        <!-- copy built artifacts to the build/repository -->
        <ivy:publish resolver="build" artifactspattern="${current.dir}/build/[artifact].[ext]"/>
    </target>

    <!-- build file extras -->
    <macrodef name="resolve">
        <attribute name="conf"/>
        <sequential>
            <!-- lookup dependencies, loading them into the cache -->
            <ivy:resolve conf="@{conf}"/>
            <!-- copy the dependencies into the local directory -->
            <ivy:retrieve validate="true" conf="@{conf}"/>
            <!-- deliver resolved ivy file so that it can be used by dependent modules. -->
            <ivy:deliver deliverpattern="${project.repository}/[module]/ivy-[revision].xml"/>
        </sequential>
    </macrodef>

    <!-- the command that rules them all. -->
    <target name="build.module" depends="clean, prepare, build, test, package, publish"/>


</project>
