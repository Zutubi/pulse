<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:fr.jayasoft.ivy.ant" name="command bundle" basedir=".">

    <target name="clean">
        <delete dir="build"/>
    </target>

    <!-- initialise configuration -->
    <target name="init" depends="module-pre-init, common-init, module-post-init"/>

    <target name="module-pre-init"/>

    <target name="module-post-init"/>

    <target name="common-init">

        <!-- load the modules properties first to allow them to override the default root level properties. -->
        <property file="build.properties"/>
        <property file="${project.root.dir}/build.properties"/>

        <echo message="-----------------------------------"/>
        <echo message="    Component: init ${module}"/>
        <echo message="-----------------------------------"/>

        <!-- behavioural properties -->
        <property name="javac.debug" value="true"/>

        <!-- project structural properties -->
        <property name="src.dir" value="src/java"/>
        <property name="test.dir" value="src/test"/>

        <property name="build.dir" value="build"/>
        <property name="build.lib.dir" value="${build.dir}/lib"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="test.classes.dir" value="${build.dir}/test.classes"/>
        <property name="report.dir" value="${build.dir}/report"/>

        <dirname property="current.dir" file="ivy.xml"/>

        <property file="${project.root.dir}/ivy.properties"/>
        <ivy:configure file="${project.root.dir}/ivyconf.xml"/>

        <fileset id="module.libs" dir="${build.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <path id="lib.path">
            <fileset refid="module.libs"/>
        </path>

        <!-- resources / properties definition-->
        <patternset id="resources">
            <include name="**/*.properties"/>
            <include name="**/*.gif"/>
            <include name="**/*.png"/>
            <include name="**/*.html"/>
            <include name="**/*.xml"/>
            <include name="**/*.txt"/>
            <include name="**/*.zip"/>
        </patternset>

    </target>

    <!-- prepare for new build -->
    <target name="prepare" depends="init, module-pre-prepare, common-prepare, module-post-prepare"/>

    <target name="module-pre-prepare"/>

    <target name="module-post-prepare"/>

    <target name="common-prepare" depends="init">

        <echo message="-----------------------------------"/>
        <echo message="    Component: prepare ${module}"/>
        <echo message="-----------------------------------"/>

        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${report.dir}/junit/xml"/>
        <mkdir dir="${report.dir}/junit/html"/>

        <!-- resolve the dependencies, into the build/lib directory. -->
        <retrieve.dependencies dest="${build.lib.dir}"/>

    </target>

    <!-- prepare for new build -->
    <target name="build" depends="init, module-pre-build, common-build, module-post-build"/>

    <target name="module-pre-build"/>

    <target name="module-post-build"/>

    <target name="common-build">

        <echo message="-----------------------------------"/>
        <echo message="    Component: build ${module}"/>
        <echo message="-----------------------------------"/>

        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="${javac.debug}">
            <classpath refid="lib.path"/>
        </javac>

        <copy todir="${classes.dir}" overwrite="true">
            <fileset dir="${src.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

        <javac srcdir="${test.dir}" destdir="${test.classes.dir}" debug="${javac.debug}">
            <classpath refid="lib.path"/>
            <classpath location="${classes.dir}"/>
        </javac>

        <copy todir="${test.classes.dir}" overwrite="true">
            <fileset dir="${test.dir}">
                <patternset refid="resources"/>
            </fileset>
        </copy>

    </target>

    <!-- prepare for new build -->
    <target name="test" depends="init, module-pre-test, common-test, module-post-test"/>

    <target name="module-pre-test"/>

    <target name="module-post-test"/>

    <target name="common-test" unless="skip.tests">

        <echo message="-----------------------------------"/>
        <echo message="    Component: testing ${module}"/>
        <echo message="-----------------------------------"/>

        <junit printsummary="yes" fork="on" failureProperty="test.failed" errorProperty="test.failed">
            <classpath>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <path refid="lib.path"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/junit/xml">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <!-- generate the junit html report. -->
        <junitreport todir="${report.dir}/junit">
            <fileset dir="${report.dir}/junit/xml">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/junit/html"/>
        </junitreport>
        
        <fail if="test.failed" message="One or more tests failed.  See the reports (${report.dir}) for details."/>

    </target>

    <!-- package artifacts -->
    <target name="package" depends="init, module-pre-package, common-package, module-post-package"/>

    <target name="module-pre-package"/>

    <target name="module-post-package"/>

    <target name="common-package">

        <echo message="-----------------------------------"/>
        <echo message="    Component: package ${module}"/>
        <echo message="-----------------------------------"/>

        <jar file="build/${module}.jar" manifest="resources/META-INF/MANIFEST.MF">
            <fileset dir="${classes.dir}"/>
            <fileset dir="resources" excludes="**/META-INF/MANIFEST.MF"/>
        </jar>

        <!-- generate the source jar. -->

    </target>

    <target name="publish">
        <!-- publish the artifacts to the defined repository. -->
    </target>

    <!-- build this module. -->
    <target name="build.module" depends="prepare, build, test, package, publish"/>

    <!-- refresh this modules dependencies lib. -->
    <target name="refresh.lib">
        <!-- resolve the dependencies into the lib directory. -->
        <retrieve.dependencies dest="lib"/>
    </target>

    <!--
     Retrieve the dependencies for the module, and place them into the destination directory.
     module:
     conf:
     dest:
    -->
    <macrodef name="retrieve.dependencies">
        <attribute name="conf" default="default"/>
        <attribute name="dest" default="lib"/>
        <sequential>
            <ivy:resolve file="ivy.xml" conf="@{conf}"/>
            <!--<ivy:deliver deliverpattern="${project.repository}/[module]/ivy-[revision].xml"/>-->
            <ivy:retrieve pattern="@{dest}/[artifact]-[revision].[ext]" validate="true" conf="@{conf}"/>
        </sequential>
    </macrodef>


</project>