<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:fr.jayasoft.ivy.ant" name="command bundle" basedir=".">

    <target name="clean">
        <delete dir="build"/>
    </target>

    <target name="prepare">

        <property name="module" value="ant-command-bundle"/>

        <echo message="-----------------------------------"/>
        <echo message="    Component: prepare ${module}"/>
        <echo message="-----------------------------------"/>

        <property name="src.dir" value="src/java"/>
        <property name="test.src.dir" value="src/test"/>

        <property name="build.dir" value="build"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="test.classes.dir" value="${build.dir}/test.classes"/>
        <property name="test.classes.dir" value="${build.dir}/test.classes"/>

        <property name="report.dir" value="${build.dir}/report"/>

        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>

        <dirname property="current.dir" file="ivy.xml"/>

        <property name="project.root.dir" value=".."/>
        <property file="${project.root.dir}/ivy.properties"/>
        <ivy:configure file="${project.root.dir}/ivyconf.xml"/>

        <!-- resolve the dependencies, into the build/lib directory. -->
        <retrieve.dependencies dest="build/lib"/>

        <fileset id="module.libs" dir="build/lib">
            <include name="**/*.jar"/>
        </fileset>

        <path id="lib.path">
            <fileset refid="module.libs"/>
        </path>

    </target>

    <target name="build">

        <echo message="-----------------------------------"/>
        <echo message="    Component: build ${module}"/>
        <echo message="-----------------------------------"/>

        <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
            <classpath refid="lib.path"/>
        </javac>

        <javac srcdir="${src.test.dir}" destdir="${test.classes.dir}" debug="true">
            <classpath refid="lib.path"/>
            <classpath location="${classes.dir}"/>
        </javac>

    </target>

    <target name="test">
        
        <echo message="-----------------------------------"/>
        <echo message="    Component: testing ${module}"/>
        <echo message="-----------------------------------"/>

        <junit printsummary="yes" fork="on" failureProperty="test.failed" errorProperty="test.failed">
            <classpath>
                <pathelement location="${classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <path refid="lib.path"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/junit/xml">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}/junit">
            <fileset dir="${report.dir}/junit/xml">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/junit/html"/>
        </junitreport>
        <fail message="One or more tests failed.  See the reports (${report.dir}) for details." if="test.failed"/>

    </target>

    <target name="package">

        <echo message="-----------------------------------"/>
        <echo message="    Component: package ${module}"/>
        <echo message="-----------------------------------"/>

        <jar file="build/${module}.jar" manifest="resources/META-INF/MANIFEST.MF">
            <fileset dir="build/classes"/>
            <fileset dir="resources" excludes="**/META-INF/MANIFEST.MF"/>
        </jar>
    </target>

    <target name="publish">
        
    </target>

    <target name="build.module" depends="clean, prepare, build, test, package, publish"/>

    <target name="refresh.lib">
        <!-- resolve the dependencies into the lib directory. -->
        <retrieve.dependencies dest="lib"/>
    </target>

    <!--
     Retrieve the dependencies for the module, and place them into the destination directory.
     module:
     conf:
     dest:
    -->
    <macrodef name="retrieve.dependencies">
        <attribute name="conf" default="default"/>
        <attribute name="dest" default="lib"/>
        <sequential>
            <ivy:resolve file="ivy.xml" conf="@{conf}"/>
            <!--<ivy:deliver deliverpattern="${project.repository}/[module]/ivy-[revision].xml"/>-->
            <ivy:retrieve pattern="@{dest}/[artifact]-[revision].[ext]" validate="true" conf="@{conf}"/>
        </sequential>
    </macrodef>


</project>