package com.zutubi.util;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;

/**
 * Utilities for generating random data.
 */
public class RandomUtils
{
    private static final Random RAND = new Random(System.currentTimeMillis());

    private static final char[] ALPHA_NUMERIC_CHARACTERS = new char[]{'a', 'b', 'c', 'd', 'e', 'f',
            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
            'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
            'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
            'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};

    /**
     * Generates a random integer using an insecure source.
     *
     * @return the next random integer
     */
    public static int insecureRandomInt()
    {
        return RAND.nextInt();
    }

    /**
     * Generates a random long using an insecure source.
     *
     * @return the next random long
     */
    public static long insecureRandomLong()
    {
        return RAND.nextLong();
    }

    /**
     * Generates a random string of alphanumeric characters using an insecure source.
     *
     * @param length the length of the string to generate
     * @return a random string of alphanumeric characters of the given length
     * @see #secureRandomString(int)
     */
    public static String insecureRandomString(int length)
    {
        return randomString(RAND, length);
    }

    /**
     * Generates a random string of alphanumeric characters using a secure source.  If the
     * required secure source is not available an error is thrown.
     *
     * @param length the length of the string to generate
     * @return a random string of alphanumeric characters of the given length
     * @see #insecureRandomString(int)
     */
    public static String secureRandomString(int length)
    {
        try
        {
            return randomString(SecureRandom.getInstance("SHA1PRNG"), length);
        }
        catch (NoSuchAlgorithmException e)
        {
            throw new RuntimeException(e);
        }
    }

    /**
     * Version of the randomString function that allows you to provide the random instance.
     *
     * @param rand instance of the java.util.Random used to randomly select the characters.
     * @param length of the string to be created.
     * @return a pseudo random string of specified length generated using the provided Random instance.  The
     * randomness of the generated string will be limited by the randomness of the numbers generated by Random.nextInt()
     */
    static String randomString(Random rand, int length)
    {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < length; i++)
        {
            builder.append(ALPHA_NUMERIC_CHARACTERS[rand.nextInt(ALPHA_NUMERIC_CHARACTERS.length)]);
        }
        return builder.toString();
    }
}
