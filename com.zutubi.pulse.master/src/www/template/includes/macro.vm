##
## Outputs security / credentials content tgs for permissions related uses.
##
#macro(authorisationTags $user)
    #if($user)
        <content tag="user.name">$user.name</content>
        <content tag="user.login">$user.login</content>
    #end
#end

##
## Outputs a sitemesh tag for context-sensitive help
##
#macro(helpTag $path)
    <content tag="helpPage">$path</content>
#end

##
## Outputs sitemesh content tags for the project links on the header bar
##
#macro(projectTags $project)
    <content tag="selectedTab">projects</content>
#end

##
## Outputs sitemesh content tags for user links on the header bar
##
#macro(userTags $user)
    <content tag="personalBuild">true</content>
    <content tag="selectedTab">dashboard</content>
#end

##
## Outputs sitemesh content tags for build links on the header bar
##
#macro(buildTags $project $buildResult $selectedTab)
#if($buildResult.user)
    #userTags($buildResult.user)
#else
    #projectTags($project)
#end
    <content tag="buildNumber">$buildResult.number</content>
    <content tag="selectedBuildTab">$selectedTab</content>
#end

##
## Outputs sitemesh content tags for stage links on the header bar
##
#macro(stageTags $buildResult $selectedTab)
    #buildTags($buildResult.project $buildResult $selectedTab)
    <content tag="h_stageName">$h_stageName</content>
    <content tag="u_stageName">$u_stageName</content>
#end

##
## Outputs sitemesh content tags for the agent links on the header bar
##
#macro(agentTags)
    <content tag="selectedTab">agents</content>
#end

##
## Outputs a project heading
##        
#macro(projectName $project)
    :: <a href="$urls.projectHome($project)">$!webwork.htmlEncode($project.name)</a> ::
#end

##
## Outputs a tab header bar, with the javascript necessary to control the
## tab selection.
##
#macro(tabBar $tabNames)
    <script language="JavaScript" type="text/javascript">
        function Tab(htmlId)
       {
            this.elementId = htmlId;
            var selected = false;
            var self = this;

            /*
             * Shows or hides this page depending on whether the visible
             * tab id matches this objects id.
             *
             * @param visibleTabId the id of the tab that was selected
             */
            this.updateVisibility = function(visibleTabId)
            {
                var thElement = document.getElementById('tab_header_' + self.elementId);
                var tcElement = document.getElementById('tab_contents_' + self.elementId);

                if(!selected && visibleTabId == self.elementId)
                {
                    thElement.className = "active";
                    tcElement.style.display = "block";
                    self.selected = true;
                }
                else
                {
                    thElement.className = "inactive";
                    tcElement.style.display = "none";
                    self.selected = false;
                }
            }
        }

        var pageTabs = new Array(3);

    #foreach($name in $tabNames)
        #set($index = $velocityCount - 1)
        pageTabs[$index] = new Tab("$name");
    #end

        function chooseTab(selectedTab)
        {
            for(i in pageTabs)
            {
                pageTabs[i].updateVisibility(selectedTab);
            }

            return false;
        }

    </script>

    <ul id="innernav">
    #foreach($name in $tabNames)
        <li><a id="tab_header_$name" href="#" onclick="chooseTab('$name')" class="inactive">#wwtext("name=${name}.tab")</a></li>
    #end
    </ul>
    <span class="hidden">ie workaround</span>
#end

##
## Selects the given tab
##
#macro(selectTab $name)
    <script language="JavaScript" type="text/javascript">
        chooseTab("$name");
    </script>
#end

##
## Outputs a div to open a tab page
##
#macro(openTab $name)
    <div id="tab_contents_$name">
#end

##
## Closes off a tab page
##
#macro(closeTab)
    </div>
#end

##
## Opens a list of tabs
##
#macro(openTabs)
<div id="tabbar">
    <ul id="innernav">
#end

##
## Closes a list of tabs
##
#macro(closeTabs)
    </ul>
    <div class="clear"></div>
</div>
#end

##
## A single tab
##
#macro(tabItem $id $name $url $selected)
    <li>
        <a id="$id" href="$url"
    #if($selected == $name)
            class="active"
    #else
            class="inactive"
    #end
          >
            #wwtext("name=${name}.tab")
        </a>
    </li>
#end

##
## Shows a project tab of the given name with the given action name
##
#macro(projectTab $name $selected)
    #tabItem("tab.project.$name" $name "$urls.project($u_projectName)${name}/" $selected)
#end

##
## Shows the tab bar for project pages with the given tab selected.
##
#macro(projectTabs $selected)
    #openTabs()
        #projectTab("home" $selected)
        #projectTab("reports" $selected)
        #projectTab("history" $selected)
        #projectTab("dependencies" $selected)
        #projectTab("log" $selected)
    #closeTabs()
#end

##
## Shows a build tab of the given name with the given action name
##
#macro(buildTab $result $name $selected)
    #tabItem("tab.build.$name" $name "$urls.build($result)$name/" $selected)
#end

##
## Shows the tab bar for build pages with the given tab selected.
##
#macro(buildTabs $result $selected)
    #openTabs()
        #buildTab($result "summary" $selected)
        #buildTab($result "logs" $selected)
        #buildTab($result "details" $selected)
        #buildTab($result "changes" $selected)
        #buildTab($result "tests" $selected)
        #buildTab($result "file" $selected)
        #buildTab($result "artifacts" $selected)
    #closeTabs()
#end

##
## Shows a server tab of the given name with the given action name
##
#macro(serverTab $name $selected)
    #tabItem("tab.server.$name" $name "$urls.server()$name/" $selected)
#end

##
## Shows the tab bar for project pages with the given tab selected.
##
#macro(serverTabs $selected)
    #openTabs()
        #serverTab("activity" $selected)
        #serverTab("history" $selected)
#auth("action=ADMINISTER")
        #serverTab("messages" $selected)
#end
        #serverTab("info" $selected)
    #closeTabs()
#end

##
## Shows an agent tab of the given name with the given action name
##
#macro(agentTab $name $selected)
    #tabItem("tab.agent.$name" $name "$urls.agent($agent)$name/" $selected)
#end

##
## Shows the tab bar for server pages with the given tab selected.
##
#macro(agentTabs $selected)
    #openTabs()
        #agentTab("status" $selected)
        #agentTab("statistics" $selected)
        #agentTab("history" $selected)
#auth("action=ADMINISTER")
        #agentTab("messages" $selected)
#end
        #agentTab("info" $selected)
    #closeTabs()
#end

##
## Shows an admin tab of the given name with the given action name
##
#macro(adminTab $name $action $selected)
    #tabItem("tab.administration.$name" $name "${action}" $selected)
#end

##
## Shows the tab bar for admin pages with the given tab selected.
##
#macro(adminTabs $selected)
    #openTabs()
        #adminTab("projects" "$base/admin/projects/" $selected)
        #adminTab("agents" "$base/admin/agents/" $selected)
#auth("action=ADMINISTER")
        #adminTab("settings" "$base/admin/settings/" $selected)
        #adminTab("users" "$base/admin/users" $selected)
        #adminTab("groups" "$base/admin/groups" $selected)
        #adminTab("plugins" "$base/admin/plugins/" $selected)
#end
#closeTabs()
#end

##
## Shows a dashboard tab of the given name with the given action name
##
#macro(dashboardTab $name $action $selected)
    #tabItem("tab.dashboard.$name" $name "${action}" $selected)
#end

##
## Shows the tab bar for dashboard pages with the given tab selected.
##
#macro(dashboardTabs $selected)
    #openTabs()
        #dashboardTab("homepage" "$base/dashboard/home/" $selected)
        #dashboardTab("my-builds" "$base/dashboard/my/" $selected)
        #dashboardTab("preferences" "$base/dashboard/preferences/" $selected)
    #closeTabs()
#end

##
## Outputs an image tag with alt key looked up
##
#macro(image $src $altKey)
    <img src="$src" alt="$action.getText('$altKey')"/>
#end

##
## Outputs a heading row for a content table with an action, restricted to specific roles
##
#macro(restrictedHeadingRow $key $span $role $actionKey $url $image $id)
    <tr>
        <th class="heading" colspan="$span">
    #auth("action=$role")
            <span class="action">
                <a #if($id != "")id="$id"#end href="$url"><img alt="$action.getText($actionKey)" src="$base/images/$image"/>#wwtext("name=$actionKey")</a>
            </span>
    #end
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs a heading row for a content table
##
#macro(headingRow $key $span)
    <tr>
        <th class="heading" colspan="$span">
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs an information row for a content table
##
#macro(noteRow $key $span)
    <tr>
        <th id="$key" class="note leftmost rightmost" colspan="$span">#wwtext("name=$key")</th>
    </tr>
#end

##
## Outputs a heading cell for a content table
##
#macro(contentHeading $key $span)
    #contentClassHeading($key $span "")
#end

##
## Outputs a heading cell for a content table with a given additional class
##
#macro(contentClassHeading $key $span $additionalClass)
    <th class="content $additionalClass" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
#end

##
## Outputs a row heading cell for a content table
##
#macro(contentRowHeading $key)
    <th class="content-row">#wwtext("name=$key")</th>
#end

##
## Outputs a regular cell for a content table
##
#macro(contentCell $key)
    <td class="content">#wwtext("name=$key")</td>
#end

#macro(contentClassCell $key)
    <td class="$cssClass">#wwtext("name=$key")</td>
#end

##
## Outputs a static cell for a content table
##
#macro(staticCell $cc)
    <td class="content">$cc</td>
#end

#macro(staticClassCell $cc)
    <td class="$cssClass">$cc</td>
#end

##
## Outputs a right-aligned cell for a content table
##
#macro(rightCell $cc)
    <td class="content-right">$cc</td>
#end

##
## Outputs a heading cell for a content table with the given dynamic content,
## which should be escaped
##
#macro(dynamicHeading $content)
    <th class="content-row">$!webwork.htmlEncode($content)</th>
#end


##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped and is allowed to wrap.
##
#macro(wrapCell $content)
    <td class="content-wrap">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped, with a row span.
##
#macro(dynamicCellSpan $content $span)
    <td class="content" rowspan="$span">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped
##
#macro(dynamicCell $content)
    <td class="content">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped with an id.
##
#macro(dynamicIdCell $id $content)
    <td id='#id($id)' class="content">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped, with a link to somewhere and right justified...
##
#macro(dynamicRightLinkCell $content $url)
    <td class="content-right">
    #if($url)
        <a href="$url">
    #end
            $!webwork.htmlEncode($content)
    #if($url)
        </a>
    #end
     </td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped, with a link to somewhere...
##
#macro(dynamicLinkCell $content $url)
    <td class="content">
    #if($url)
        <a href="$url">
    #end
            $!webwork.htmlEncode($content)
    #if($url)
        </a>
    #end
     </td>
#end

##
## Outputs a name:value pair row where the value needs to be escaped, with a link
##
#macro(dynamicLinkRow $key $value $url)
    <tr>
        <th class="content-row" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
        #dynamicLinkCell($value $url)
    </tr>
#end

##
## Outputs a name:value pair row where the value needs to be escaped
##
#macro(dynamicRow $key $value)
    <tr>
        <th class="content-row" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
        #dynamicCell($value)
    </tr>
#end

##
## Outputs an action cell with an id
##
#macro(actionCellId $actionKey $url $image $id $span)
    <td class="content"
#if($span)
        colspan="$span"
#end
    >
        <a href="$url"
#if($id)
           id="$id"
#end
        >
            <img alt="$action.getText($actionKey)" src="$base/images/$image"/>
            #wwtext("name=$actionKey")
        </a>
    </td>
#end

##
## Outputs an action cell for a content table with an image.
##
#macro(actionCell $actionKey $url $image)
    #actionCellId($actionKey $url $image false false)
#end

##
## Outputs a link cell for a content table
##
#macro(linkCell $id $key $url)
    #linkClassCell($id $key $url "")
#end

##
## Outputs a link cell for a content table with the given additional class.
##
#macro(linkClassCell $id $key $url $additionalClass)
    <td class="content $additionalClass">
        <a id="$id" href="$url">#wwtext("name=$key")</a>
    </td>
#end

##
## Outputs an edit cell for a content table with a  row span
##
#macro(editCellSpan $url $id $span)
    #actionCellId("configure" $url "pencil.gif" $id $span)
#end

##
## Outputs a table cell with class based on $cssClass
##
#macro(classCell $content)
    <td class="$cssClass">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a content row for the tail of a content table
##
#macro(contentRow $key $span)
    <tr>
        <td class="content" colspan="$span">
            #wwtext("name=$key")
        </td>
    </tr>
#end

##
## Outputs an add row for the tail of a content table
##
#macro(addRow $key $span $url $id)
    <tr>
        <td class="add" colspan="$span">
            <a #if($id != "") id="$id"#end href="$url"><img alt="add" src="$base/images/add.gif"/> #wwtext("name=$key")</a>
        </td>
    </tr>
#end

##
## Outputs a build/project status cell
##
#macro(statusCell $result $showAnimated)
    <td class="$result.state.string">
        #statusImage($result $showAnimated)
    </td>
    <td #if($result.number) id='#id("${result.ownerName}.build.${result.number}.status")' #end class="$result.state.string">
        $result.state.prettyString
    </td>
#end

#macro(statusImage $result $showAnimated)
    #if($result.succeeded())
        <img alt="success" src="$base/images/accept.gif"/>
    #elseif($result.warned())
        <img alt="warning" src="$base/images/error.gif"/>
    #elseif($result.skipped())
        <img alt="skipped" src="$base/images/none_blue.gif"/>
    #elseif($result.inProgress())
        #if($showAnimated)
            <img alt="in progress" src="$base/images/inprogress.gif"/>
        #else
            <img alt="in progress" src="$base/images/cog.gif"/>
        #end
    #elseif($result.terminating())
        <img alt="terminating" src="$base/images/stop.gif"/>
    #elseif($result.pending())
        <img alt="pending" src="$base/images/hourglass.gif"/>
    #elseif($result.errored() || $result.failed() || $result.terminated())
        <img alt="failure" src="$base/images/exclamation.gif"/>
    #else
        &nbsp;
    #end
#end


#macro(showHideButton $category $id $align)
    <a href="#" class="unadorned" id="${id}-link" onclick="Zutubi.FloatManager.showHideFloat('$category', '$id', '$align'); return false"><img alt="actions" id="${id}-button" class="popdown floating-widget" src="$base/images/default/s.gif"/></a>
#end


##
## Outputs an owner cell for a build request or result
##
#macro(ownerCell $rr $cssClass)
    #if($rr.personal)
        <td class="$cssClass">
            <img alt="personal" src="$base/images/user.gif"/>
            $!webwork.htmlEncode($rr.owner.config.login)
        </td>
    #else
        <td class="$cssClass">
            <a href="$urls.projectHome($rr.owner)">
                $!webwork.htmlEncode($rr.owner.name)
            </a>
         </td>
    #end
#end

##
## Outputs an elapsed cell for a result, with progress bar if there is an
## estimated time remaining.
##
#macro(elapsedCell $result)
    #if($result.stamps.hasEstimatedTimeRemaining())
        #set($percentComplete = $result.stamps.estimatedPercentComplete)
        #set($percentRemaining = 100 - $percentComplete)
        <td class="content">
            #if($percentComplete > 0)<img class="centre" title="$result.stamps.prettyElapsed (${percentComplete}%) elapsed" src="$base/images/box-elapsed.gif" height="10" width="$percentComplete"/>#end#if($percentRemaining > 0)<img class="centre" title="$result.stamps.prettyEstimatedTimeRemaining (${percentRemaining}%) remaining" src="$base/images/box-remaining.gif" height="10" width="$percentRemaining"/>#end
        </td>
    #else
        #classCell($result.stamps.prettyElapsed)
    #end
#end


##
## Outputs list items for messages of a given level directly on the given result
##
#macro(resultMessageItems $result $level)
    #if($result.hasDirectMessages($level))
        #foreach($feature in $result.getFeatures($level))
    <li class="$level.toString().toLowerCase()">
        $action.plainToHtml($feature.summary)
    </li>
        #end
    #end
#end

##
## Summarises the messages of a given level on a file artifact
##
#macro(fileArtifactMessageSummary $build $recipe $command $fileArtifact $level $showHeader)
    #if($fileArtifact.hasMessages($level))
        #if($showHeader)
    <li class="header">#wwtext("name=artifact") :: $!webwork.htmlEncode("$fileArtifact.path")
        #end
        <ul>
        #set($trimmedFileArtifactFeatures = false)
        #set($fileArtifactFeatures = $fileArtifact.getFeatures($level))
        #if($recipe.completed())  ## Not sure why we are using this, but it has the desired effect of only trimming when showing the summary.
            #if($fileArtifactFeatures.size() > 100)
                #set($fileArtifactFeatures = $fileArtifactFeatures.subList(0, 100))
                #set($trimmedFileArtifactFeatures = true)
            #end
        #end
        #foreach($feature in $fileArtifactFeatures)
            <li class="$level.toString().toLowerCase()">
            #if($feature.hasContext())
                <span class="context">
                #foreach($line in $feature.summaryLines)
                    #if($velocityCount == $feature.lineOffset())
                </span>
                <span class="feature">
                    $action.plainToHtml($line)<br/>
                </span>
                <span class="context">
                    #else
                $action.plainToHtml($line)<br/>
                    #end
                #end
                </span>
            #else
                $action.plainToHtml($feature.summary)<br/>
            #end
            #if($recipe.completed())
                <a class="unadorned" href="$urls.commandArtifacts($build, $command)${fileArtifact.pathUrl}#${feature.lineNumber}">
                    <span class="small">#wwtext("name=jump.to")</span> <img src="$base/images/go_small.gif"/>
                </a>
            #end
            </li>
        #end
        #if($trimmedFileArtifactFeatures)
            <li>
                #wwtext("name=trimmed.features")
                <a class="unadorned" href="$urls.commandArtifacts($build, $command)${fileArtifact.pathUrl}">
                      <span class="small">#wwtext("name=jump.to")</span> <img src="$base/images/go_small.gif"/>
                </a>
            </li>
        #end
        </ul>
        #if($showHeader)
    </li>
        #end
    #end
#end

##
## Summarises the messages of a given level on an artifact into a nested list
##
#macro(artifactMessageSummary $build  $recipe $command $artifact $level $showHeader)
    #if($artifact.hasMessages($level))
        #foreach($fileArtifact in $artifact.children)
            #fileArtifactMessageSummary($build $recipe $command $fileArtifact $level $showHeader)
        #end
    #end
#end

##
## Summarises the messages of a given level on a command result into a nested list
##
#macro(commandMessageSummary $build $recipeResult $commandResult $level)
    #if($commandResult.hasMessages($level))
        #resultMessageItems($commandResult $level)
        #foreach($artifact in $commandResult.artifacts)
            #artifactMessageSummary($build $recipeResult $commandResult $artifact $level true)
        #end
    #end
#end

##
## Summarises the messages of a given level on a recipe result into a nested list
##
#macro(recipeMessageSummary $build $recipeResult $level $top)
    #if($recipeResult.hasMessages($level))
        #if($top)
            <h4>#wwtext("name=${level.toString().toLowerCase()}.messages")</h4>
            <ul class="$level.toString().toLowerCase()">
        #end

        #resultMessageItems($recipeResult $level)
        #foreach($commandResult in $recipeResult.commandResults)
            #if($commandResult.hasMessages($level))
                <li class="header">#wwtext("name=command") :: $!webwork.htmlEncode("$commandResult.commandName")
                    <ul>
                    #commandMessageSummary($build $recipeResult $commandResult $level)
                    </ul>
                </li>
            #end
        #end

        #if($top)
            </ul>
        #end
    #end
#end

##
## Summarises the messages of a given level on a recipe result node into a nested list
##
#macro(nodeMessageSummary $build $node $level)
    #if($node.hasMessages($level))
        <li class="header">#wwtext("name=build.stage") :: $!webwork.htmlEncode($node.stageName) :: $!webwork.htmlEncode("$node.result.recipeNameSafe@$node.agentNameSafe")
            <ul>
            #recipeMessageSummary($build $node.result $level false)
            #foreach($child in $node.children)
                #nodeMessageSummary($build $child $level)
            #end
            </ul>
        </li>
    #end
#end

##
## Summarises the messages of a given level on a build result into a nested list
##
#macro(buildMessageSummary $buildResult $level)
    #if($buildResult.hasMessages($level))
<table id="features-${level.prettyString}" class="two-content spaced">
    <tr><th class="two-heading">#wwtext("name=features.${level.prettyString}")</th></tr>
    <tr>    
        <td class="content leftmost rightmost">
            <ul>
                #resultMessageItems($buildResult $level)
        #foreach($node in $buildResult.stages)
                #nodeMessageSummary($buildResult $node $level)
        #end
            </ul>
        </td>
    </tr>
</table>
    #end
#end

##
## Shows features of all levels for the given artifact
##
#macro(fileArtifactFeatures $build $recipe $result $fileArtifact)
    #foreach($level in $featureLevels)
        #if($fileArtifact.hasMessages($level))
    <ul class="$level.toString().toLowerCase()">
        <li class="header">$level.toString().toLowerCase() #wwtext("name=features")
        #fileArtifactMessageSummary($build $recipe $result $fileArtifact $level false)
        </li>
    </ul>
        #end
    #end
#end

#macro(buildTestFailures $buildResult)
    #set($failuresFound = false)
    #foreach($recipeNode in $buildResult.stages)
        #if($recipeNode.result.completed() && $recipeNode.hasBrokenTests())
            #set($failuresFound = true)
        #end
    #end

    #if($failuresFound)
    <table id="failed-tests" class="two-content spaced">
        <tr>
            <th class="two-heading" colspan="5">#wwtext("name=failed.tests")</th>
        </tr>
        <tr>
            #contentClassHeading("test.name" 1 "leftmost")
            #contentHeading("test.status" 2)
            #contentHeading("test.details" 1)
            #contentClassHeading("test.duration" 1 "rightmost")
        </tr>
        #foreach($recipeNode in $buildResult.stages)
            #if($recipeNode.result.completed() && $recipeNode.hasBrokenTests())
        <tr id='#id("stage-${recipeNode.stageName}-failed")'>
            <td class="content leftmost">
                <a href="$urls.stageTests($buildResult, $recipeNode)">#wwtext("name=build.stage") $!webwork.htmlEncode($recipeNode.stageName)</a>
            </td>
            <td class="content"><img src="$base/images/exclamation.gif"/></td>
            <td class="content">$recipeNode.result.testSummary</td>
            #dynamicCell("$recipeNode.result.recipeNameSafe@$recipeNode.agentNameSafe")
            <td class="content rightmost">&nbsp;</td>
        </tr>
        #set($broken = $recipeNode.result.loadedTestFailures)
                #if($broken == 0)
        #noteRow("test.broken.unavailable" 5)
                #else
                    #set($excess = $recipeNode.result.excessFailureCount)
                    #if($excess > 0)
        #noteRow($action.getText("test.excess.failures", [$excess]) 5)
                    #end
        #showRecipeTestFailures($buildResult $recipeNode)
                #end
            #end
        #end
    </table>
    #end
#end

##
## Shows a table row with pages and previous/next etc links.  Pager should be
## an instance of paging support.
##
#macro(pagingRow $url $extraParams $pager)
    #if($pager.pageCount > 1)
        #set($nextPage = $pager.startPage + 1)
        #set($previousPage = $pager.startPage - 1)
        #set($lastPage = $pager.pageCount - 1)
                <tr>
                    <td class="content-centre">
        #if($pager.startPage > 0)
                        <a href="${url}0/${extraParams}" id="page.latest" class="unadorned">
        #end
                            #image("$base/images/resultset_first.gif" "page.latest") #wwtext("name=page.latest")
        #if($pager.startPage > 0)
                        </a>
        #end
                    </td>
                    <td class="content-centre">
        #if($pager.startPage > 0)
                        <a href="${url}$previousPage/${extraParams}" id="page.previous" class="unadorned">
        #end
                            #image("$base/images/resultset_previous.gif" "page.newer") #wwtext("name=page.newer")
        #if($pager.startPage > 0)
                        </a>
        #end
                    </td>
                    <td class="content-centre">
        #foreach($pageIndex in [$pager.pageRangeStart..$pager.pageRangeEnd])
            #set($pageNumber = $pageIndex + 1)
                        &nbsp;
            #if($pageIndex != $pager.startPage)
                        <a href="${url}$pageIndex/${extraParams}" id="page.$pageNumber">
            #end
                            $pageNumber#if($pageIndex != $pager.startPage)</a>#end
        #end
                        &nbsp;
                    </td>
                    <td class="content-centre">
        #if($pager.startPage < $lastPage)
                        <a href="${url}$nextPage/${extraParams}" id="page.next" class="unadorned">
        #end
                            #wwtext("name=page.older") #image("$base/images/resultset_next.gif" "page.older")
        #if($pager.startPage < $lastPage)
                        </a>
        #end
                    </td>
                    <td class="content-centre">
        #if($pager.startPage < $lastPage)
                        <a href="${url}$lastPage/${extraParams}" id="page.oldest" class="unadorned">
        #end
                            #wwtext("name=page.oldest") #image("$base/images/resultset_last.gif" "page.oldest")
        #if($pager.startPage < $lastPage)
                        </a>
        #end
                    </td>
                </tr>
    #end
#end

##
## Shows a test status cell for a broken case.
##
#macro(brokenTestStatusCell $test $key $extraClass)
    <td class="test-failure fit-width $extraClass">
    #if($test.wasBrokenPreviously())
        <img alt="broken test" src="$base/images/exclamation-bw.gif"/>
    #else
        <img alt="broken test" src="$base/images/exclamation.gif"/>
    #end
    </td>
    <td class="test-failure">
        #wwtext("name=$key")
        #if($test.wasBrokenPreviously())
            <br/>(<a href="$urls.build($buildResult.project, $test.brokenNumber.toString())">#wwtext("name=test.broken.since") $test.brokenNumber</a>)
        #end
    </td>
#end

##
## Outputs a status cell for a test result
##
#macro(testStatusCell $test $extraClass)
    #if($test.errors > 0)
        #brokenTestStatusCell($test "test.error" $extraClass)
    #elseif($test.failures > 0)
        #brokenTestStatusCell($test "test.failure" $extraClass)
    #elseif($test.expectedFailures > 0)
        #brokenTestStatusCell($test "test.expected.failure" $extraClass)
    #elseif($test.total == 0)
    <td class="content fit-width $extraClass">
        <img alt="none" src="$base/images/none_blue.gif"/>
    </td>
    <td class="content">
        #wwtext("name=test.none")
    </td>
    #elseif($test.allTestsSkipped())
    <td class="content fit-width $extraClass">
        <img alt="skipped" src="$base/images/none_blue.gif"/>
    </td>
    <td class="test-skipped">
        #wwtext("name=test.skipped")
    </td>
    #else
    <td class="success fit-width $extraClass">
        <img alt="success" src="$base/images/accept.gif"/>
    </td>
    <td class="success">
        #wwtext("name=test.passed")
        #if($test.fixed)
            <br/>(#wwtext("name=test.fixed"))
        #end
    </td>
    #end
#end

#macro(showTestCaseFailure $recipe $test $indent)
    <tr>
        <td class="test-failure content-nowrap leftmost">
             ${indent}$!webwork.htmlEncode($test.name)
        </td>
        #testStatusCell($test "")
    #if($test.message)
        <td class="content-wrap">
            $action.plainToHtml($test.message)
        </td>
    #else
        #contentCell("empty.cell")
    #end
        <td class="content rightmost" width="10%">
            $!webwork.htmlEncode($test.prettyDuration)
        </td>
    </tr>
#end

##
## Shows a test suite with any nested tests.
##
#macro(showTestSuiteFailures $build $recipe $test $indent)
    ## Yes, this is insane, but velocity does not have locals, so there is no
    ## pure velocity way (that I know of) to implement the path construction
    #set($path = $action.pushSuite($test))

    <tr>
        <td class="test-failure content-nowrap leftmost">
             ${indent}<a href='$urls.stageTests($build, $recipe)${path}/'>$!webwork.htmlEncode($test.name)</a>
         </td>
        #contentCell("empty.cell")
        #contentCell("empty.cell")
        #contentCell("empty.cell")
        <td class="content rightmost" width="10%">
            $!webwork.htmlEncode($test.prettyDuration)
        </td>
    </tr>

    #foreach($child in $test.suites)
        #showTestSuiteFailures($build $recipe $child "${indent}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
    #end
    #foreach($child in $test.cases)
        #showTestCaseFailure($recipe $child "${indent}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
    #end

    $action.popSuite()
#end

##
## Shows the test summary view for all tests in the given recipe.
##
#macro(showRecipeTestFailures $build $recipe)
    #if($recipe.result.failedTestResults)
        #foreach($child in $recipe.result.failedTestResults.suites)
            #showTestSuiteFailures($build $recipe $child "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
        #end
        #foreach($child in $recipe.result.failedTestResults.cases)
            #showTestCaseFailure($recipe $child "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;")
        #end
    #end
#end

##
## Inserts javascript for an auto-updating panel.  Assumes we don't care
## about errors.
##
#macro(updater $url $panelId $interval $callback)
    ## We should be able to use Updater.setAutoRefresh but for some reason it
    ## gives aborted transactions after a few refreshes (no idea why as yet).
    #if($interval)
        Ext.onReady(function() {
            var task = {
                run: function(){
                    var updater = new Ext.Updater('#jss("#id($panelId)")');
                    updater.showLoadIndicator = false;
                    updater.update({
                        url: '#jss($url)',
                        scripts: true,
                        callback: $callback
                    });
                },
                interval: 1000 * $interval
            }
            var runner = new Ext.util.TaskRunner();
            ## Tasks run immediately on start, so delay starting by one interval.
            setTimeout(function() { runner.start(task); }, task.interval);
        });
    #end
#end

##
## Shows a server (log) message
##
#macro(serverMessage $record)
    <table class="fill-content">
    #if($action.isError($record))
        #set($image = "exclamation")
        #set($cssClass = "error")
    #elseif($action.isWarning($record))
        #set($image = "error")
        #set($cssClass = "warning")
    #else
        #set($image = "information")
        #set($cssClass = "info")
    #end
        <tr>
            <td class="$cssClass" width="26%">$action.getPrettyDate($record.millis) ($action.getPrettyTime($record.millis))</td>
            <td class="$cssClass" width="9%"><img alt="failure" src="$base/images/${image}.gif"/> $record.level.toString().toLowerCase()</td>
            <td class="$cssClass" width="9%">#wwtext("name=count") :: $record.count</td>
            <td class="$cssClass">$!webwork.htmlEncode("$record.sourceClassName :: $record.sourceMethodName")</td>
        </tr>
    #if($record.message)
        <tr>
            <td class="content-large" colspan="4">
                <pre>$!webwork.htmlEncode($record.message)</pre>
            </td>
        </tr>
    #end
    #if($action.hasThrowable($record))
        <tr>
            <td class="content-large" colspan="4">
                <pre>$!webwork.htmlEncode($record.stackTrace))</pre>
            </td>
        </tr>
    #end
    </table>
#end

##
## Shows a test summary table for a result
##
#macro(testSummaryTable $summary)
    <table id="test-summary" class="fill two-content">
        <tr>
            <th class="two-heading" colspan="8">
                #wwtext("name=test.summary")
            </th>
        </tr>
        <tr>
            #contentClassHeading("test.status" 2 "leftmost")
            #contentHeading("test.total" 1)
            #contentHeading("test.failures" 1)
            #contentHeading("test.errors" 1)
            #contentHeading("test.expected.failures" 1)
            #contentHeading("test.skipped" 1)
            #contentClassHeading("test.success.rate" 1 "rightmost")
        </tr>
        <tr>
            #testStatusCell($summary "leftmost")
            #rightCell($summary.total)
            #rightCell($summary.failures)
            #rightCell($summary.errors)
            #rightCell($summary.expectedFailures)
            #rightCell($summary.skipped)
            <td class="content-right rightmost">${summary.successRate}%</td>
        </tr>
    </table>
#end


#macro(pluginStateImage $plugin)
    #if($plugin.disabled || $plugin.disabling)
        #set($image = "exclamation-bw.gif")
    #elseif($plugin.error)
        #set($image = "exclamation.gif")
    #elseif($plugin.enabled)
        #set($image = "accept.gif")
    #elseif($plugin.uninstalling)
        #set($image = "delete.gif")
    #elseif($plugin.installing || $plugin.upgrading)
        #set($image = "arrow-refresh.gif")
    #end

    <img alt="plugin state" src="$base/images/$image"/>
#end

#macro(pluginLink $plugin)
    <a id="select:$plugin.id" href="#" onclick="pluginsTree.selectPlugin('$plugin.id'); return false;">
        $!webwork.htmlEncode($plugin.name)
    </a>
#end

#macro(pluginDisable $plugin)
    <img alt="disable" src="$base/images/cancel.gif"/> <a href="#" id="disable:$plugin.id" onclick="pluginsTree.pluginAction('$plugin.id', 'disable'); return false;">#wwtext("name=plugin.disable")</a>
#end

#macro(pluginEnable $plugin)
    <img alt="enable" src="$base/images/accept.gif"/> <a href="#" id="enable:$plugin.id" onclick="pluginsTree.pluginAction('$plugin.id', 'enable'); return false;">#wwtext("name=plugin.enable")</a>
#end

#macro(pluginUninstall $plugin)
    <img alt="delete" src="$base/images/delete.gif"/> <a href="#" id="uninstall:$plugin.id" onclick="pluginsTree.pluginAction('$plugin.id', 'uninstall'); return false;">#wwtext("name=plugin.uninstall")</a>
#end

#macro(checkForm $path $type $formName $namespace)
    <div id="check.frame" class="frame">
        #i18nexists("key=test.heading" "context=$type.symbolicName")<h3 class="config-header">#i18n("key=test.heading" "context=$type.symbolicName")</h3>#end
        #i18nexists("key=test.description" "context=$type.symbolicName")<p class="config-description">#i18n("key=test.description" "context=$type.symbolicName")</p>#end
        <p class="config-check-result" id="check.result" style="display: none">
        </p>
        <div class="config-container">
            #checkform("path=$path" "symbolicName=$type.symbolicName" "mainFormName=$formName" "checkFormName=checkform" "namespace=$namespace")
        </div>
        <script type="text/javascript">
            ## Used for Selenium testing
            checkComplete = false;
            checkOK = true;

            var frameEl = Ext.get('nested-layout');
            var checkEl = Ext.get('check.result');
            checkEl.enableDisplayMode();

            checkform.on('beforeaction', function(form, action)
            {
                checkComplete = false;
                frameEl.mask('Checking configuration...');
                return true;
            });

            checkform.on('actioncomplete', function(form, action)
            {
                frameEl.unmask();
                checkEl.setVisible(true, true);
                checkEl.update(action.result.panel, true);
                checkOK = action.result.checkSucceeded;
                checkComplete = true;
            });

            checkform.on('actionfailed', function(form, action)
            {
                frameEl.unmask();

                var message;
                if(action.failureType == Ext.form.Action.SERVER_INVALID)
                {
                    message = 'unable to check configuration due to validation errors';
                }
                else
                {
                    message = 'unable to contact Pulse to run check';
                }

                checkEl.setVisible(true, true);
                checkEl.update('<img src="$base/images/exclamation.gif" alt="error"/> <span class="config-check-failure">' + message + '</span>', true);
                checkOK = false;
                checkComplete = true;
            });
        </script>
    </div>
#end

#macro(standardFormEvents $formName)
    <script type="text/javascript">
        ${formName}.on('actioncomplete', function(form, action)
        {
            handleConfigurationResponse(action.result);
        });
        ${formName}.on('actionfailed', function(form, action)
        {
            if(action.failureType == Ext.form.Action.SERVER_INVALID)
            {
                form.handleActionErrors(action.result.actionErrors);
            }
            else
            {
                showStatus('unable to contact pulse server', 'failure');
            }
        });
    </script>
#end

#macro(responsibilityPanel $result)
    #if($responsibleOwner)
    <p class="note" style="margin-top: 0; margin-bottom: 16px" id="responsible-panel">
            <img alt="fixing" src="$base/images/config/actions/takeResponsibility.gif" style="padding: 0 6px 0 6px"/> <span id="responsible-message">#html($responsibleOwner)</span>
        #if($canClearResponsible)
            [<a href="#" id="responsible-clear" onclick="clearResponsibility('$result.project.id'); return false">clear</a>]
        #end
        #if($responsibleComment && $responsibleComment.length() > 0)
            : <img alt="comment" src="$base/images/comment.gif" style="padding: 0 6px 0 6px"/> <span id="responsible-comment" class="comment">#html($responsibleComment)</span>
        #end
    </p>
    #end
#end

##
## Renders state tables for configuration pages.
##
#macro(renderState $configUIModel)
    <div id="config-state" class="config-panel">
        #i18nexists("key=state.heading")<h3 class="config-header">#i18n("key=state.heading")</h3>#end
        <table class="config-state-table">
            #i18nexists("key=state.table.heading")<th colspan="2">#i18n("key=state.table.heading")</th>#end
            #set($odd = true)
            #foreach($field in $configUIModel.displayFields)
            <tr>
                <td class="label" width="20%">#i18n("key=${field}.label")</td>
                <td id='#id("state.$field")' class="value #if($odd) odd #else even #end">
                    $configUIModel.format($field)
                </td>
            </tr>
                #if($odd) #set($odd = false) #else #set($odd = true) #end
            #end
        </table>
    </div>
#end

##
## Renders a table of basic information about a build.
##
#macro(buildBasicsTable $buildResult)
    <table id="build-basics" class="two-content">
        <tr><th class="two-heading" colspan="2">#wwtext("name=build") $buildResult.number</th></tr>
        #resultBasicsRow("status" "#statusImage($buildResult true) $buildResult.state.prettyString")
        #resultBasicsRow("reason" "#html($buildResult.reason.summary)")
    #if($buildResult.revision)
        #resultBasicsRow("rev" "$buildResult.revision")
    #else
        #resultBasicsRow("rev" $action.getText("revision.none"))
    #end
        #resultBasicsRow("tests" "$buildResult.testSummary")
        #resultBasicsRow("when" "$buildResult.stamps.getPrettyStartDate($locale) ($buildResult.stamps.prettyStartTime)")
    #if($buildResult.completed())
        #resultBasicsRow("completed" "$buildResult.stamps.getPrettyEndDate($locale) ($buildResult.stamps.prettyEndTime)")
    #end
        #resultBasicsRow("elapsed" "$buildResult.stamps.prettyElapsed")
    #if($buildResult.completed())
        #resultBasicsRow("errors" "$buildResult.errorFeatureCount")
        #resultBasicsRow("warnings" "$buildResult.warningFeatureCount")
    #end
    </table>
#end

##
## Renders a single row for a result basics table (summary of a result field).
##
#macro(resultBasicsRow $key $content)
    <tr>
        <th class="content fit-width right leftmost">#wwtext("name=build.$key")</th>
        <td id="basics-${key}" class="content rightmost">$content</td>
    </tr>
#end

##
## Renders a table of direct features of the given level on the given result.
##
#macro(resultFeatureTable $result $level)
    #if($result.hasDirectMessages($level))
<table id="features-${level.prettyString}" class="two-content spaced">
    <tr><th class="two-heading">#wwtext("name=features.${level.prettyString}")</th></tr>
    <tr>    
        <td class="content leftmost rightmost">
            <ul>
    #foreach($feature in $result.getFeatures($level))
                <li class="$level.prettyString">$action.plainToHtml($feature.summary)</li>
    #end
            </ul>
        </td>
    </tr>
</table>
    #end
#end

##
## Renders tables for all direct features on the given result.
##
#macro(resultFeatureTables $result)
    #resultFeatureTable($result $errorLevel)
    #resultFeatureTable($result $warningLevel)
    #resultFeatureTable($result $infoLevel)
#end

##
## Renders a table of simple properties, e.g. custom fields, command properties.
##
#macro(resultPropertyTable $map $id $headingKey)
    #if($map.size() > 0)
        <table class="two-content spaced" id="$id">
        <tr><th class="two-heading" colspan="2">#wwtext("name=$headingKey")</th></tr>
        #foreach($entry in $map.entrySet())
        <tr>
            <th class="content fit-width right leftmost">#html($entry.key)</th>
            <td class="content rightmost">#html($entry.value)</td>
        </tr>
        #end
    </table>
    #end
#end

##
## Renders a table of custom fields on the given result.
##
#macro(resultCustomFields $result)
    #resultPropertyTable($action.getCustomFields($result) "custom-fields" "build.custom.fields")
#end
