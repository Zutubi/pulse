#authorisationTags($principle)
<content tag="selectedTab">administration</content>
<html>
<head>
    <title>#wwtext("name=administration")</title>
	<script type="text/javascript">
	    var actionInProgress = false;

        var tabPanel;
        var configPanel;
        var configTree;
        var templateTree;
        var visibleTree;
        var treesInitialised = false;
        var detailPanel = new ZUTUBI.DetailPanel();
        
        // ------------------------------------------------------------------
	    // Shared tree functions
        // ------------------------------------------------------------------

        var handleConfigurationResponse = function(result)
        {
            if (result.success)
            {
                if (result.newPanel)
                {
                    detailPanel.update(result.newPanel);
                }

                if (configTree)
                {
                    configTree.handleResponse(result);
                }

                if (templateTree)
                {
                    templateTree.handleResponse(result);
                }

                if (visibleTree.dead)
                {
                    // Config tree dies when the root is deleted.
                    tabPanel.activate('template-tree');
                    visibleTree = templateTree;
                }

                visibleTree.redirectToNewPath(result);
            }
            else
            {
                if(result.actionErrors && result.actionErrors.length > 0)
                {
                    showStatus(result.actionErrors[0], 'failure');
                }
            }
        }

        // ------------------------------------------------------------------
        // Config tree
        // ------------------------------------------------------------------

        var createConfigTree = function(project, cls, iconCls)
        {
            if(configTree)
            {
                configPanel.remove(configTree, true);
            }

            tabPanel.el.createChild({tag: 'div', id: 'config-tree'});
            var loader = new ZUTUBI.ConfigTreeLoader('$base/aconfig');

            configTree = new ZUTUBI.ConfigTree({
                el: 'config-tree',
                pathPrefix: '${scope}',
                animate: false,
                loader: loader,
                rootVisible: true,
                autoScroll: true,
                border: false,
                autoCreate: true,
                bodyStyle: 'padding: 10px'
            });

            var root = new Ext.tree.AsyncTreeNode({
                baseName: project,
                text: project,
                cls: cls,
                iconCls: iconCls,
                allowDrag: false,
                allowDrop: false
            });

            configTree.setRootNode(root);
            configTree.getSelectionModel().on('selectionchange', onConfigSelect);
            configPanel.add(configTree);
            configTree.render();
            root.expand();
            configPanel.doLayout();
        }

        var clonePath = function(path)
        {
            runAjaxRequest('$base/aconfig/' + path + '?clone=input');
        }

        // ------------------------------------------------------------------
        // Template tree
        // ------------------------------------------------------------------

        var onTemplateSelect = function(sm, node)
        {
            if(treesInitialised && node)
            {
                detailPanel.load({
                    url: '$base/atemplate/$scope/' + node.attributes.baseName,
                    scripts: true,
                    callback: function(element, success, response) {
                        if(!success)
                        {
                            onSelectFailure(element, response);
                        }
                    }
                });
            }
        }

        var configureRecord = function(id)
        {
            tabPanel.activate('config-panel');
        }

        var selectTemplate = function(path)
        {
            templateTree.getSelectionModel().clearSelections();
            templateTree.selectPath(templateTree.getRootNode().getPath('baseName') + '/' + path, 'baseName');
        }

        // ------------------------------------------------------------------
        // Layout
        // ------------------------------------------------------------------

        var Layout = function()
        {
#if($path)
            var path = '#jss($path)';
#else
            var path = '';
#end

            return {
                init : function()
                {
                    var center = Ext.getCmp('nested-center');
                    center.add(detailPanel);

                    var templateLoader = new ZUTUBI.ConfigTreeLoader('$base/atemplate/$scope');

                    templateTree = new ZUTUBI.TemplateTree('$scope', {
                        el: 'template-tree',
                        id: 'template-tree',
                        animate: false,
                        loader: templateLoader,
                        rootVisible: false,
                        autoScroll: true,
                        border: false,
                        title: 'hierarchy',
                        bodyStyle: 'padding: 10px'
                    });

                    var templateRoot = new Ext.tree.AsyncTreeNode({
                        baseName: 'x',
                        text: 'settings',
                        allowDrag: false,
                        allowDrop: false
                    });

                    templateTree.setRootNode(templateRoot);
                    templateTree.getSelectionModel().on('selectionchange', onTemplateSelect);

                    configPanel = new Ext.Panel({
                        layout: 'fit',
                        border: false,
                        id: 'config-panel',
                        title: 'configuration'
                    });

                    var nestedWest = Ext.getCmp('nested-west');
                    tabPanel = new Ext.TabPanel({
                        border: false,
                        tabPosition: 'bottom',
                        defaults: {
                            layout: 'fit',
                            border: false
                        },
                        items: [templateTree, configPanel]
                    });


                    tabPanel.on('render', function() {
                        tabPanel.el.createChild({tag: 'div', id: 'template-tree'});

                        templateTree.render();
                        nestedWest.doLayout();

#if($configTreePath)
                        templateTree.expandToPath('#jss($templateTreePath)', function(success, lastNode) {
                            tabPanel.activate('template-tree');
                            nestedWest.doLayout();
                            lastNode.select();
                            tabPanel.activate('config-panel');
                            treesInitialised = true;
                            configTree.selectConfigPath('#jss($configTreePath)');
                        });
#else
                        templateRoot.expand(false, 'baseName', function() {
                            templateRoot.firstChild.expand();
                            treesInitialised = true;
                            tabPanel.activate('template-tree');
                            nestedWest.doLayout();
                        });
#end

                        // Attach the activate handlers after the initial
                        // render to avoid uneccessary panel loads during
                        // initialisation.
                        templateTree.on('activate', function() {
                            var node;

                            if(configTree)
                            {
                                var configBaseName = configTree.getRootNode().attributes.baseName;
                                node = templateTree.findNodeByAttribute('baseName', configBaseName);
                            }

                            if(!node)
                            {
                                node = templateTree.getRootNode().firstChild;
                            }

                            templateTree.getSelectionModel().clearSelections();
                            node.select();
                            visibleTree = templateTree;
                        });

                        configPanel.on('activate', function() {
                            var node = templateTree.getSelectionModel().getSelectedNode();
                            if (!node)
                            {
                                node = templateTree.getRootNode();
                            }

                            if(!configTree || configTree.getRootNode().attributes.baseName != node.attributes.baseName)
                            {
                                createConfigTree(node.attributes.baseName, node.attributes.cls, node.attributes.iconCls);
                            }

                            configTree.getSelectionModel().clearSelections();
                            configTree.selectPath(node.attributes.baseName, 'baseName');
                            visibleTree = configTree;
                        });
                    });

                    nestedWest.add(tabPanel);
                    nestedWest.show();
                    nestedWest.setWidth(300);
                    Ext.getCmp('nested-east').show()
                    Ext.getCmp('nested-layout').doLayout();
                }
            }
        }();

        Ext.onReady(Layout.init, Layout, true);
	</script>
</head>
<body>
    #adminTabs("${tab}")
    </div>
</body>
</html>
