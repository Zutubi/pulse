#macro(actionHeader $id $action $img $url)
    <th><img alt="$action" src="$base/images/${img}.gif"/> #if($url)<a href="$url" id="$id">#end$action#if($url)</a>#end</th>
#end

#authorisationTags($principle)
<html>
<head>
    <title>welcome</title>
    <style>
        h1 { margin-top: 0.8em; }
        table.template-actions, p { width: 770px; }
    </style>
</head>
<body>
    <h1 id="welcome.heading">:: #wwtext("name=welcome") :: </h1>
    <p>
        Welcome to the Pulse 2.1!  This page provides information on common next steps and important
        new features in the 2.1 release.
    </p>
    <p>
        You can return to this page at any time by clicking on the "pulse 2.1" link in the top left
        corner.
    </p>
    <h1> :: getting started :: </h1>
    <p>
        New to Pulse?  Here are a few ways to get started:
    </p>
    <p>
        <table class="template-actions" cellspacing="5px">
            <tr>
                <th class="category" colspan="2">configure</th>
            </tr>
#auth("path=projects" "action=create")
            <tr>
                #actionHeader("add.projects" "add new projects" "add" "$urls.adminProjects()")
                <td>using the add project wizard (administration &gt; projects tab)</td>
            </tr>
#end
#auth("path=users" "action=create")
            <tr>
                #actionHeader("add.users" "add new users" "add" "$urls.adminUsers()")
                <td>at the users view (administration &gt; users tab)</td>
            </tr>
#end
#auth("path=agents" "action=create")
            <tr>
                #actionHeader("add.agents" "add new agents" "add" "$urls.adminAgents()")
                <td>using the add agent wizard (administration &gt; agents tab)</td>
            </tr>
#end
#auth("path=settings" "action=write")
            <tr>
                #actionHeader("configure.settings" "configure server settings" "pencil" "$urls.adminSettings()")
                <td>at the server settings view (administration &gt; settings tab)</td>
            </tr>
#end
            <tr>
                #actionHeader("configure.preferences" "configure your preferences" "pencil" "$urls.dashboardPreferences()")
                <td>at the preferences view (dashboard &gt; preferences tab)</td>
            </tr>
            <tr>
                <th class="category" colspan="2">explore</th>
            </tr>
            <tr>
                #actionHeader("view.dashboard" "go to your home page" "zoom" "$urls.dashboard()")
                <td>at the dashboard view (dashboard &gt; home)</td>
            </tr>
            <tr>
                #actionHeader("browse.projects" "browse build reports" "zoom" "$urls.browse()")
                <td>at the browse view (browse)</td>
            </tr>
            <tr>
                #actionHeader("view.activity" "view server activity" "zoom" "$urls.server()")
                <td>at the server view (server)</td>
            </tr>
            <tr>
                #actionHeader("view.agents" "view all agents" "zoom" "$urls.agents()")
                <td>at the agents view (agents)</td>
            </tr>
        </table>
    </p>
    
    <h1> :: what's new :: </h1>
    <p>
        Pulse 2.1 has several new features.  Among the most important are:
    </p>
    <p>
        <table class="template-actions" cellspacing="5px" style="margin-bottom: 10px;">
            <tr>
                <th class="category" colspan="2">new in 2.1</th>
            </tr>
            <tr>
                #actionHeader("project.dependecies" "project dependencies" "accept" false)
                <td>
                    Pulse now boasts project dependency management, allowing you to declare
                    dependencies between your projects and deliver built artifacts between them.
                    Smarter triggering has also been added for dependent projects.  Dependency
                    support is built on Apache Ivy, making it interoperable with Maven and Ivy
                    repositories, and with projects that already use Ivy.  Pulse can act as an Ivy
                    repository both for internal projects and external ones.
                </td>
            </tr>
            <tr>
                #actionHeader("multi.command.projects" "multi-command projects" "accept" false)
                <td>
                    Pulse has always allowed a build to consist of multiple steps, but in previous
                    versions to access this flexibility you had to write a Pulse file by hand.  Now
                    there is full UI support for configuring multi-command projects, and the full
                    flexibility of all the commands has also been exposed in the UI.  You can still
                    write your Pulse files by hand, and in fact they have been simplified in some
                    ways.
                </td>
            </tr>
            <tr>
                #actionHeader("personal.build.improvements" "personal build improvements" "accept" false)
                <td>
                    Several improvements have been made to personal builds, including:
                    <ul class="points">
                        <li>The ability to choose the revision for the build.</li>
                        <li>No more forced update when requesting a personal build.</li>
                        <li>Pluggable patch formats: including support for standard unified diffs.</li>
                        <li>The ability to submit an existing patch file (in any supported format).</li>
                        <li>Smarter internal patch format and application.</li>
                    </ul>
                    These improvements make requesting personal builds more flexible and
                    interoperable.  For example, you can create patches with other tools and submit
                    them directly to Pulse.
                </td>
            </tr>
            <tr>
                #actionHeader("multiple.agents.per.host" "multiple agents per host" "accept" false)
                <td>
                    Pulse now directly supports running multiple agents on the same host, including the
                    ability to run multiple master agents.  This allows you to make full use of high
                    end hardware with just a single Pulse service installed on a machine.  To make use
                    of this ability, configure multiple agents with identical host and port details.
                    Pulse will recognise agents that share a host and act accordingly.
                </td>
            </tr>
            <tr>
                #actionHeader("further.net.support" "further .net tool support" "accept" false)
                <td>
                    Support has been added for the popular .Net build tool NAnt and the NUnit testing
                    library. NAnt support includes a new command and a post-processor to extract error
                    and warning messages from both NAnt itself and commonly-used tools (e.g. the
                    Visual Studio compilers). NUnit support includes a post-processor that can read
                    NUnit XML reports to integrate test results into your Pulse builds.
                </td>
            <tr>
                #actionHeader("agent.utilisation.stats" "agent utilisation statistics" "accept" false)
                <td>
                    A new "statistics" tab has been added for agents. This tab lists various figures
                    such as the number of recipes the agent executes each day and how long the average
                    recipe keeps the agent busy. Statistics are also shown for agent utilisation,
                    including a pie chart that makes them easy to visualise. This allows you to see if
                    you are getting the most out of your agent machines.
                </td>
            </tr>
            <tr>
                #actionHeader("build.comments" "build result comments" "accept" false)
                <td>
                    Users can now leave comments on build results. This allows teams to communicate;
                    for example by leaving a note indicating why the build failed. Comments are displayed
                    prominently on the build summary tab, where users viewing the build will be most
                    likely to see them.
                </td>
            </tr>
            <tr>
                #actionHeader("finer.cleanup.rules" "fine-grained cleanup rules" "accept" false)
                <td>
                    Cleanup rules allow you to reduce disk space usage by having Pulse automatically
                    delete old and unwanted build data. In 2.1, there are more options controlling exactly
                    what is cleaned up. This allows you greater control: for example you can remove old
                    build artifacts but maintain the key build result information.
                </td>
            </tr>
            <tr>
                #actionHeader("built.in.docs" "built-in documentation" "accept" false)
                <td>
                    The documentation for Pulse files is now built-in to the Pulse server, so that
                    it matches the exact version and plugin set you have installed.  Clicking the
                    book link in the top right-hand corner of the UI opens this reference
                    documentation.
                </td>
            </tr>
            <tr>
                #actionHeader("pluggable.commands" "pluggable commands" "accept" false)
                <td>
                    As part of the changes for multi-command projects, both command configuration
                    and the command APIs were overhauled.  These changes make plugging in a command
                    much easier than before.  As with other configurable elements, commands can now
                    be fully documented and integrated into the UI when plugged-in.  Single command
                    projects can use any plugged-in command with no extra effort for the plugin
                    author.
                </td>
            </tr>
            <tr>
                #actionHeader("admin.ui.improvements" "admin ui improvements" "accept" false)
                <td>
                    Multiple improvements have been made to the administration user interface.  Most
                    notable among these are:
                    <ul class="points">
                        <li>A reduction in nesting in the configuration tree (simplifying navigation).</li>
                        <li>Performance improvements for large configuration sets.</li>
                    </ul>
                    These changes make the UI both simpler and snappier.
                </td>
            </tr>
        </table>
    </p>
</body>
</html>

