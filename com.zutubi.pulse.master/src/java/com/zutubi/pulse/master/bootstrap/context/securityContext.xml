<?xml version="1.0" encoding="UTF-8"?>
<!--
The security subsystem contains the configuration of the authentication and authorization system,
based upon the Spring Security system.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.4.xsd">

    <!-- do not trigger an init from here. We need the spring context to be completely loaded before
     doing so otherwise the DelegatingFilterProxy will be unable to locate the defined beans.
     -->
    <bean id="securityManager" class="com.zutubi.pulse.master.security.PulseSecurityManager">
        <property name="jettyServerManager" ref="jettyServerManager"/>
        <property name="configurationManager" ref="configurationManager"/>
    </bean>

    <bean id="ldapManager" class="com.zutubi.pulse.master.security.ldap.AcegiLdapManager">
        <property name="userManager" ref="userManager"/>
        <property name="eventManager" ref="eventManager"/>
    </bean>

    <!-- ============================================================= -->
    <!-- The first half of this context is dedicated to authentication -->

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="customAuthenticationProvider"/>
        <security:authentication-provider ref="rememberMeAuthenticationProvider"/>
        <security:authentication-provider ref="repositoryAuthenticationProvider"/>
        <security:authentication-provider ref="preAuthenticatedAuthenticationProvider"/>
    </security:authentication-manager>

    <bean id="preAuthenticatedAuthenticationProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService"><ref local="preAuthenticationUserDetailsService"/></property>
    </bean>

    <bean id="preAuthenticationUserDetailsService" class="com.zutubi.pulse.master.security.api.ApiAuthenticationUserDetailsService">
        <property name="userManager" ref="userManager"/>
    </bean>

    <bean id="customAuthenticationProvider" class="com.zutubi.pulse.master.security.CustomAuthenticationProvider">
        <property name="userManager" ref="userManager"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="ldapManager"><ref local="ldapManager"/></property>
    </bean>

    <bean id="repositoryAuthenticationProvider" class="com.zutubi.pulse.master.security.RepositoryAuthenticationProvider"/>

    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map path-type="ant">
            <security:filter-chain pattern="/js/**"         filters="none" />
            <security:filter-chain pattern="/css/**"        filters="none" />
            <security:filter-chain pattern="/images/**"     filters="none" />
            <security:filter-chain pattern="/favicon.*"     filters="none" />
            <security:filter-chain pattern="/ajax/**"       filters="securityContextFilter, apiPreAuthenticatedProcessingFilter, anonymousAuthenticationFilter, ajaxExceptionTranslationFilter, filterInvocationInterceptor"/>
            <security:filter-chain pattern="/**"            filters="securityContextFilter, logoutFilter, formLoginAuthenticationFilter, basicAuthenticationFilter, apiPreAuthenticatedProcessingFilter, rememberMeProcessingFilter, requestCacheFilter, anonymousAuthenticationFilter, sessionManagementFilter, exceptionTranslationFilter, filterInvocationInterceptor"/>
        </security:filter-chain-map>
        <property name="firewall"><bean class="com.zutubi.pulse.master.spring.web.context.OpenFirewall"/></property>
    </bean>

    <!--
    This filter must be included in any filter chain. It is responsible for storing authentication information
    (a SecurityContext instance) between requests. It also for sets up the thread-local variable in which it is
    stored during a request and clears it when the request completes. Its default strategy is to store the
    SecurityContext in the HTTP session, hence the use of the HttpSessionSecurityContextRepository bean.     
    -->
    <bean id="securityContextFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" >
        <property name="securityContextRepository"><ref local="securityContextRepository"/></property>
    </bean>
    <bean id="securityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />

    <bean id="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter" >
        <constructor-arg ref="securityContextRepository" />
    </bean>

    <!--
    The AuthenticationProcessingFilter is responsible for handling the login request. It monitors for requests
    sent to 'filterProcessesUrl', and uses the 'authenticationManager' to handle the actual authentication.
    -->
    <bean id="formLoginAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
                <property name="defaultTargetUrl" value="/"/>
                <property name="requestCache"><ref local="requestCache"/></property>
            </bean>
        </property>
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <property name="defaultFailureUrl" value="/login!input.action?error=true"/>
            </bean>
        </property>
        <property name="rememberMeServices"><ref local="rememberMeServices"/></property>
    </bean>

    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg value="/" />
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
                <ref local="rememberMeServices"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="requestCacheFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter">
        <property name="requestCache"><ref local="requestCache"/></property>
    </bean>
    
    <!--
    This filter provides support for processing basic authentication credentials presented in HTTP headers.
    -->
    <bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint"/>
        <!-- We override the default details class to aid in detecting HTTP basic authentication. -->
        <property name="authenticationDetailsSource"><ref local="basicProcessingAuthenticationDetailsSource"/></property>
    </bean>

    <bean id="basicAuthenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <property name="realmName" value="Pulse"/>
    </bean>

    <bean id="basicProcessingAuthenticationDetailsSource" class="org.springframework.security.authentication.AuthenticationDetailsSourceImpl">
        <property name="clazz" value="com.zutubi.pulse.master.security.BasicAuthenticationDetails"/>
    </bean>

    <!--
     The filter used to pick out the API TOKEN from the request header, if present.  The api token is generated by the
      RemoteApi.login request.
     -->
    <bean id="apiPreAuthenticatedProcessingFilter" class="com.zutubi.pulse.master.security.api.ApiPreAuthenticatedProcessingFilter">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="eventManager"><ref bean="eventManager"/></property>
    </bean>

    <!--
    The remember me processing filter allows for automatic 'remember me' cookie login.
    With the remember me services, we need to ensure that the following links are configured:
    a) AuthenticationProcessingFilter.setRememberMeServices()
    b) AuthenticationManager.setProviders()
    c) FilterChainProxy
    -->
    <bean id="rememberMeProcessingFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="rememberMeServices"><ref local="rememberMeServices"/></property>
    </bean>

    <bean id="rememberMeServices" class="com.zutubi.pulse.master.security.CustomTokenBasedRememberMeServices">
        <property name="userDetailsService" ref="userManager"/>
        <property name="key" value="pulse"/>
    </bean>

    <bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
        <property name="key" value="pulse"/>
    </bean>

    <!--
    AnonymousAuthenticationFilter, which is chained after the normal authentication mechanisms and automatically
    add an AnonymousAuthenticationToken to the SecurityContextHolder if there is no existing Authentication
    held there.
    -->
    <bean id="anonymousAuthenticationFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
        <property name="key" value="foobar"/>
        <property name="userAttribute" value="anonymous,ROLE_ANONYMOUS"/>
    </bean>

    <bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
        <property name="key" value="foobar"/>
    </bean>

    <!--
    If the request is not authorized (either because the user isn't authenticated, or because they
    don't have the required authorities) it will raise an exception. This will be handled by the
    ExceptionTranslationFilter
    -->
    <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <!-- This endpoint defines where a user is directed when authentication is required. -->
        <property name="authenticationEntryPoint"><ref local="loginUrlAuthenticationEntryPoint"/></property>
        <property name="requestCache"><ref local="requestCache"/></property>
    </bean>

    <bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/login!input.action"/>
        <property name="portResolver"><ref local="portResolver"/></property>
        <property name="portMapper"><ref local="portMapper"/></property>
    </bean>

    <bean id="requestCache" class="org.springframework.security.web.savedrequest.HttpSessionRequestCache">
        <property name="portResolver"><ref local="portResolver"/></property>
    </bean>

    <bean id="portResolver" class="org.springframework.security.web.PortResolverImpl">
        <property name="portMapper"><ref local="portMapper"/></property>
    </bean>

    <bean id="portMapper" class="org.springframework.security.web.PortMapperImpl">
        <property name="portMappings">
            <map>
                <!-- This disables mapping between 80/843 and 8080/8443 for HTTP/HTTPS.  Since we only allow
                     all-or-none SSL, the mapping does not help us and leads to confusion like CIB-3025. -->
                <entry key="80" value="80"/>
                <entry key="8080" value="8080"/>
            </map>
        </property>
    </bean>

    <bean id="ajaxExceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <property name="authenticationEntryPoint">
            <bean class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>
        </property>
    </bean>

    <!--
    The order that entries are placed against the objectDefinitionSource is critical.
    The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that
    matches the request URL. Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions
    first, with LEAST SPECIFIC (ie a/.*) expressions last
    -->
    <bean id="filterInvocationInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager"><ref local="authenticationManager"/></property>
        <property name="accessDecisionManager"><ref local="httpRequestAccessDecisionManager"/></property>
        <property name="securityMetadataSource">
            <security:filter-security-metadata-source path-type="ant" lowercase-comparisons="true">
                <security:intercept-url pattern="/login*.action*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/signup*.action*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/logout.action" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/" access="ROLE_USER,ROLE_GUEST" />
                <security:intercept-url pattern="/default.action" access="ROLE_GUEST,ROLE_USER" />
                <security:intercept-url pattern="/xmlrpc/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/hessian/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/packages/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/pluginrepository/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/patch*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/rss.action*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
                <security:intercept-url pattern="/view/**/*" access="ROLE_GUEST,ROLE_USER" />
                <security:intercept-url pattern="/file/**/*" access="ROLE_GUEST,ROLE_USER" />
                <security:intercept-url pattern="/dashboard/**" access="ROLE_USER" />
                <security:intercept-url pattern="/admin/actions/**" access="ADMINISTER" />
                <security:intercept-url pattern="/admin/settings/**" access="ADMINISTER" />
                <security:intercept-url pattern="/admin/users/**" access="ADMINISTER" />
                <security:intercept-url pattern="/admin/groups/**" access="ADMINISTER" />
                <security:intercept-url pattern="/admin/plugins/**" access="ADMINISTER" />
                <security:intercept-url pattern="/ajax/admin/**" access="ADMINISTER" />
                <security:intercept-url pattern="/**" access="ROLE_GUEST,ROLE_USER" />
            </security:filter-security-metadata-source>
        </property>
    </bean>

    <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false"/>
        <property name="decisionVoters">
            <list>
                <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
                    <property name="rolePrefix" value=""/>
                </bean>
                <bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </property>
    </bean>

    <!-- ===================================================================================== -->
    <!--
    The security configuration for the artifact repository.  This should be reviewed so that it uses a
    more standard approach to configuration.  NOTE: just because it is not using the default web app does
    not mean it should not use the same support.
    -->
    <bean name="artifactRepositorySecurityHandler" class="com.zutubi.pulse.servercore.jetty.FilteringHandler">
        <property name="filters">
            <list>
                <!-- IMPORTANT NOTE:
                 Because the repository is available outside of a web context, and
                 because we are using the basic processing filter (which does not clear
                 the context itself), the SecurityContextHolder needs to be cleared manually.
                 This is usually handled by the httpSessionContextIntegrationFilter.
                 -->
                <ref local="clearContextFilter"/>
                <ref local="basicAuthenticationFilter"/>
                <ref local="anonymousAuthenticationFilter"/>
            </list>
        </property>
        <property name="handler" ref="securityDelegateHandler"/>
    </bean>

    <bean name="securityDelegateHandler" class="com.zutubi.pulse.master.jetty.SecurityHandler">
        <property name="accessManager" ref="accessManager"/>
        <property name="basicEntryPoint" ref="basicAuthenticationEntryPoint"/>
    </bean>

    <!-- This filter is responsible for clearing the security context when each request is complete. -->
    <bean id="clearContextFilter" class="com.zutubi.pulse.master.security.BasicClearContextFilter"/>



</beans>
