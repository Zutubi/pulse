label=bootstrap options
introduction=Options that control how each build stage is bootstrapped.

checkoutScheme.label=checkout scheme
checkoutScheme.help=defines the scheme used by pulse to bootstrap a build
checkoutScheme.verbose=<p>The checkout scheme defines two things:\
  <ol>\
    <li>Whether a clean working copy is used for each build</li>\
    <li>How the project source code is obtained from the SCM.</li>\
  </ol>\
  </p>\
  <p>The three checkout schemes currently available are:\
  <ul>\
    <li><strong>Clean checkout</strong>: always check out a fresh copy of the source from the SCM \
        and rebuild from scratch. This is the default behaviour, and has the advantage of \
        guaranteeing that the build is executed in a freshly checked out directory. This scheme is \
        recommended for those projects where checking out the full source and rebuilding does not \
        introduce too much of a delay into the build cycle.</li>\
    <li><strong>Clean update</strong>: uses a local check out directory to improve the efficiency \
        of updating the source code. When a project is built for the first time, the source files \
        are checked out into a directory on the server, and copied into the build directory. Each \
        build after that will trigger an update of the source files followed by a copy into a \
        clean build directory. The advantage of this approach is that pulse will only retrieve the \
        latest changes from the SCM. This scheme may be used as an optimisation for projects where \
        checking out the source takes a significant amount of time. Clean rebuilds are maintained \
        by copying into a clean build directory every time.</li>\
    <li><strong>Incremental update</strong>: keeps a working copy of the project source code and \
        reuses it for multiple builds of the project. When the project is built for the first \
        time, the source files are checked out directly into the build directory. Each build \
        after that the source code will be updated and the build executed in the same directory. \
        The advantage of this approach is that it allows incremental builds. The disadvantage is \
        that builds are not isolated from one another: the artifacts from one build can affect \
        the next. This scheme is recommended for projects that have build cycles too long to \
        allow clean rebuilds.</li>\
  </ul>\
  </p>


persistentDirPattern.label=persistent directory pattern
persistentDirPattern.help=specifies the persistent directory to use for a build stage on an agent
persistentDirPattern.verbose=<p>Specifies a pattern for the persistent work directory for a \
  project on an agent.  This directory is used for incremental updates and builds (i.e. the clean \
  update and incremental update checkout schemes) only.  The pattern may include the following \
  properties:</p>\
  <ul>\
    <li>agent.data.dir: the data directory for the agent running the build</li>\
    <li>data.dir: the data directory for the pulse installation on the agent host</li>\
    <li>project: the name of the project being built, encoded to form a valid file name</li>\
    <li>project.handle: a unique id for the project being built</li>\
    <li>stage: the name of the stage being built, encoded to form a valid file name</li>\
    <li>stage.handle: a unique id for the stage being built</li>\
  </ul>\
  <p>We recommend leaving the work directory pattern at the default unless it causes a problem.  \
  If a custom pattern is used, it must include $(project) or $(project.handle) to ensure \
  a different directory for each project.  It should usually also include $(stage) or \
  $(stage.handle) to ensure different stages of the same project use different directories.</p>
persistentDirPattern.example.1.blurb=The default, which uses directories named after the project and \
  stage handles under the data/agents/&lt;agent handle&gt;/work directory
persistentDirPattern.example.1=$(agent.data.dir)/work/$(project.handle)/$(stage.handle)
persistentDirPattern.example.2.blurb=A slight variation which uses names instead of handles, this \
  assumes the names are safe on the target file systems
persistentDirPattern.example.2=$(agent.data.dir)/work/$(project)/$(stage)

tempDirPattern.label=temporary directory pattern
tempDirPattern.help=specifies the temporary directory to use for a build stage on an agent
