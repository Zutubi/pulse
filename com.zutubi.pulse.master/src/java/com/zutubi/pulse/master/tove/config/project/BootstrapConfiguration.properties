label=bootstrap options
introduction=Options that control how each build stage is bootstrapped.

checkoutType.label=checkout type
checkoutType.help=defines where and how source is checked out at the start of a build stage
checkoutType.verbose=<p>The checkout type defines where source is checked out from your SCM at \
  start of a build stage.  The checkout location will determine if checkouts take place at all, \
  and if so whether they are clean or incremental (i.e. updates to existing checkouts).  This \
  setting combines with the build type - note that if they indicate different directories source \
  is copied from the checkout to the build directory before the build starts.\
  </p>\
  <p>The three checkout types currently available are:</p>\
  <ul>\
    <li><strong>Clean checkout</strong>: checks the source out to the temporary recipe directory. \
        As this directory is cleaned after the recipe completes, choosing this option means you \
        will always get a fresh copy of the source from the SCM. By default clean checkouts (and \
        builds) are preferred, unless they make the build cycle too slow.  Combine this option \
        with the clean build type to have completely clean builds.</li>\
    <li><strong>Incremental checkout</strong>: checks the source out to the persistent directory. \
        If a checkout is already present in this directory, it is updated incrementally.  This is \
        useful if you want incremental builds (combine this option with the incremental build \
        type).  It can also be used with the clean build type if your SCM checkouts are slow, but \
        you still desire clean build directories.</li>\
    <li><strong>No checkout</strong>: does not check out any source.  Choose this option if you \
        don't need to get source form your SCM, or if you prefer to have your build do the \
        checkout itself.</li>\
  </ul>

checkoutSubdir.label=checkout subdirectory
checkoutSubdir.verbose=If set this defines a subdirectory of the base that should be used for \
  checking out source from the SCM.  By default the source will be checked out directly into the \
  base directory.

buildType.label=build type
buildType.help=defines where builds are executed (in a clean directory or not)
buildType.verbose=<p>The build type defines the location of the working directory for a build \
  stage.  The build location will determine if builds are clean or incremental.  This  setting \
  combines with the checkout type - note that if they indicate different directories source \
  is copied from the checkout to the build directory before the build starts.</p>\
  <p>The two build types currently available are:</p>\
  <ul>\
    <li><strong>Clean build</strong>: runs the build in the temporary recipe directory.  As this \
        directory is cleaned after the recipe completes, choosing this option means your builds \
        start from a clean state. By default clean builds (and checkouts) are preferred, unless \
        they make the build cycle too slow.  Combine this option with the clean checkout type to \
        have completely clean builds.</li>\
    <li><strong>Incremental build</strong>: runs the build in the persistent directory.  This \
        directory is maintained between builds (unless it is explicitly cleaned up).  The \
        advantage of this approach is that it allows incremental builds. The disadvantage is \
        that builds are not isolated from one another: the artifacts from one build can affect \
        the next. This scheme is recommended for projects that have build cycles too long to \
        allow clean rebuilds.</li>\
  </ul>

persistentDirPattern.label=persistent directory pattern
persistentDirPattern.help=specifies the persistent directory to use for a build stage on an agent
persistentDirPattern.verbose=<p>Specifies a pattern for the persistent work directory for a \
  project on an agent.  This directory is used for incremental checkouts and builds only.  The \
  pattern may include the following properties:</p>\
  <ul>\
    <li>agent.data.dir: the data directory for the agent running the build</li>\
    <li>data.dir: the data directory for the pulse installation on the agent host</li>\
    <li>project: the name of the project being built, encoded to form a valid file name</li>\
    <li>project.handle: a unique id for the project being built</li>\
    <li>stage: the name of the stage being built, encoded to form a valid file name</li>\
    <li>stage.handle: a unique id for the stage being built</li>\
  </ul>\
  <p>We recommend leaving the persistent directory pattern at the default unless it causes a problem.  \
  If a custom pattern is used, it must include $(project) or $(project.handle) to ensure \
  a different directory for each project.  It should usually also include $(stage) or \
  $(stage.handle) to ensure different stages of the same project use different directories.</p>
persistentDirPattern.example.1.blurb=The default, which uses directories named after the project and \
  stage handles under the data/agents/&lt;agent handle&gt;/work directory
persistentDirPattern.example.1=$(agent.data.dir)/work/$(project.handle)/$(stage.handle)
persistentDirPattern.example.2.blurb=A slight variation which uses names instead of handles, this \
  assumes the names are safe on the target file systems
persistentDirPattern.example.2=$(agent.data.dir)/work/$(project)/$(stage)

tempDirPattern.label=temporary directory pattern
tempDirPattern.help=specifies the temporary directory to use for a build stage on an agent
tempDirPattern.verbose=<p>Specifies a pattern for the temporary recipe directory for a build \
  stage on an agent.  This directory is used for clean checkouts and builds only.  It is \
  created at the start of a build stage and cleaned up when the stage completes.  The \
  pattern may include the following properties:</p>\
  <ul>\
    <li>agent.data.dir: the data directory for the agent running the build</li>\
    <li>data.dir: the data directory for the pulse installation on the agent host</li>\
    <li>project: the name of the project being built, encoded to form a valid file name</li>\
    <li>project.handle: a unique id for the project being built</li>\
    <li>recipe.id: a unique id for the recipe being built</li>\
    <li>stage: the name of the stage being built, encoded to form a valid file name</li>\
    <li>stage.handle: a unique id for the stage being built</li>\
  </ul>\
  <p>We recommend leaving the temporary directory pattern at the default unless it causes a problem.  \
  If a custom pattern is used, it should include the $(recipe.id) property to avoid name clashes.</p>
