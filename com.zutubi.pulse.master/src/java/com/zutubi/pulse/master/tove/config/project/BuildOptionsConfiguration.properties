label=build options
introduction=A set of generic options to control the build.

isolateChangelists.label=isolate changelists
isolateChangelists.help=if checked, each build contains at most one new change
isolateChangelists.verbose=When checked, each build of the project will include at most one new \
  change. This allows a change that breaks the build to be idenitified easily. For projects that \
  can afford this level of isolation (i.e. where the change frequency and build times are low \
  enough), this setting is recommended.

prompt.label=prompt
prompt.help=if checked, a manual trigger will prompt for revision and property values
prompt.verbose=When checked, a manual trigger will take the user to a form prompting for \
  revision and property values.  This is useful when there is some manual workflow as part of \
  the build.  For example, the user could set a property named $'{'my.version'}' to a custom \
  version string.

timeout.label=timeout
timeout.min=timeout must not be negative
timeout.help=a timeout (in minutes) to apply to each build stage
timeout.verbose=<p>A timeout (in minutes) to apply to each build stage.  If any stage of the\
  project takes longer than the specified amount of time to complete, the stage will be \
  forcefully terminated and will finish in the error state. The build itself will also finish in \
  the error state.</p>\
  <p>A value of zero indicates that no timeout should be applied.</p>

stageFailureLimit.label=stage failure limit
stageFailureLimit.help=if not zero, the number of failed stages that will cause the \
  build to be terminated
stageFailureLimit.verbose=If not zero, specifies the number of stage failures that \
  will cause the build to be immediately terminated.  This is useful to abort builds that appear \
  to have several problems already without waiting for all stages to completed.

autoClearResponsibility.label=automatically clear responsibility
autoClearResponsibility.help=if checked, responsibility for a project is automatically cleared on \
  a successful build
autoClearResponsibility.verbose=If checked, the responsibility for a project will be automatically \
  cleared when a build completes successfully.  Usually responsibility is used to indicate that a \
  user is fixing the build.  Thus when the build returns to a successful status the user need no \
  longer be responsible.  If you use responsibility for other purposes, you can uncheck this \
  option to allow users to choose explicitly when responsibility can be cleared.

idLeader.label=build id sequence leader
idLeader.help=if selected, the chosen project''s build id sequence is used to allocate ids for \
  this project
idLeader.verbose=By default each concrete project has its own build id sequence, where the id is \
  incremented for each build.  By selecting a build id leader, the leader''s id sequence will be \
  used to allocate build ids for this project.  This allows a single id sequence to be shared by \
  multiple projects.  All projects with the same leader will share a single sequence, thus no two \
  builds of those projects will use the same id.

persistentWorkDir.label=persistent work directory pattern
persistentWorkDir.help=pattern used to determine the persistent work directory for a project on an \
  agent
persistentWorkDir.verbose=<p>Specifies a pattern for the persistent work directory for a \
  project on an agent.  This directory is used for incremental updates and builds (i.e. the clean \
  update and incremental update checkout schemes) only.  The pattern may include the following \
  properties:</p>\
  <ul>\
    <li>agent.data.dir: the data directory for the agent running the build</li>\
    <li>data.dir: the data directory for the pulse installation on the agent host</li>\
    <li>project: the name of the project being built, encoded to form a valid file name</li>\
    <li>project.handle: a unique id for the project being built</li>\
    <li>stage: the name of the stage being built, encoded to form a valid file name</li>\
    <li>stage.handle: a unique id for the stage being built</li>\
  </ul>\
  <p>We recommend leaving the work directory pattern at the default unless it causes a problem.  \
  If a custom pattern is used, it must include $(project) or $(project.handle) to ensure \
  a different directory for each project.  It should usually also include $(stage) or \
  $(stage.handle) to ensure different stages of the same project use different directories.</p>
persistentWorkDir.example.1.blurb=The default, which uses directories named after the project and \
  stage under the data/agents/&lt;agent name&gt;/work directory
persistentWorkDir.example.1=$(agent.data.dir)/work/$(project)/$(stage)
persistentWorkDir.example.2.blurb=A slight variation which uses handles to avoid awkward \
  characters and/or long paths
persistentWorkDir.example.2=$(agent.data.dir)/work/$(project.handle)/$(stage.handle)

logCompressionEnabled.label=compress large logs
logCompressionEnabled.help=if checked, large build logs will be compressed with gzip
logCompressionEnabled.verbose=If checked, build and recipe logs that are larger than a threshold \
  (100KB) are compressed with gzip when writing to them is complete.  This helps reduce the disk \
  space required to store build results with a lot of output.
