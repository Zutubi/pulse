label=build stage
introduction=A stage is used to execute a single recipe on an agent.
verbose=<p>A stage is used to execute a single recipe on an agent.  Builds are made up of one or \
  more stages, each of which execute independently and in parallel where possible.</p>\
  <p>A typical use case for multiple stages is to test the project in multiple environments, for \
  example multiple operating systems.</p>

name.label=name
name.verbose=A descriptive name for the stage, used to identify it in build reports.

recipe.label=recipe
recipe.verbose=Name of the recipe to execute for the build stage. For built-in projects, leave \
  the recipe blank.  When left blank the default recipe will be built.

agent.label=agent
agent.verbose=The agent which should execute this stage.  This may be either a specific agent or \
  &quot;any capable&quot; agent.  In the latter case, the resource requirements for the stage and \
  available resources on the agents will be used to determine which agents may be considered to \
  run the stage.

properties.label=properties

publicationPattern.label=publication pattern
publicationPattern.verbose=defines a pattern that describes where the stage'''s \
  publications can be found.  This pattern can include the following tokens\
  <ul>\
  <li>[artifact]: the name of the artifact</li>\
  <li>[ext]: the artifact file'''s extension </li>\
  <li>[type]: the type of the artifact.</li>\
  </ul>
publicationPattern.example.1=build/[artifact].[ext]
publicationPattern.example.1.blurb=The publications are located in the base.dir/build directory \
  and are defined by the publication'''s name and extension.
publicationPattern.example.2=build/sample-[artifact].[ext]
publicationPattern.example.2.blurb=The publications are located in the base.dir/build directory \
  and all publication file names have the prefix '''sample-'''.
publicationPattern.example.3=build/[type]/[artifact].[ext]
publicationPattern.example.3.blurb=The publications are located in the base.dir/build directory \
  and further subdivided based on a type classification.  For example, build/txt/artifact.txt

retrievalPattern.label=retrieval pattern
retrievalPattern.verbose=defines a pattern that describes where a stage'''s \
  dependencies will be delivered.  The pattern can include the following tokens \
  <ul>\
  <li>[artifact]: the name of the artifact</li>\
  <li>[ext]: the artifact file extension, and </li>\
  <li>[revision]: the revision of the artifact.</li>\
  <li>[type]: the type of the artifact.  If not specified during publication, the type field defaults \
  to the file extension.  That is, the type of artifact.jar is by default '''jar'''.</li>\
  </ul>
retrievalPattern.example.1=lib/[artifact].[ext]
retrievalPattern.example.1.blurb=The dependencies are delivered into the base.dir/lib directory.
