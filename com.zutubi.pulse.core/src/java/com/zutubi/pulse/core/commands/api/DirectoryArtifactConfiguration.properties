label=directory artifact
introduction=Captures files nested within a directory for processing and/or storage with the \
  build result.
verbose=Directory artifacts are used to capture multiple files nested under a directory.  The \
  captured files may be post-processed to extract features and test results.  They are kept with \
  the build result where they may be viewed and downloaded.  Example directory artifacts include \
  HTML reports, collections of test reports or directories containing output packages.

reference=<p>\
  Directory artifacts are used to capture multiple files nested under a directory.  The \
  captured files may be post-processed to extract features and test results.  They are kept with \
  the build result where they may be viewed and downloaded.  Example directory artifacts include \
  HTML reports, collections of test reports or directories containing output packages.\
  </p>\
  <h2>HTML reports</h2>\
  <p>\
  HTML report capturing allows reports produced by various build/testing tools to be easily linked \
  to build results in the Pulse web interface. Examples include test reports, static code analysis \
  reports and code coverage reports. By simply capturing the directory containing the report, it \
  should appear in the Pulse web interface as a linked HTML report. HTML reports are identified by \
  searching for an index file (e.g. index.html in the captured directory. To force a specific index \
  file (when multiple exist or the file is not found), use the index attribute.\
  </p>\
  <h2>filtering captured files</h2>\
  <p>\
  The files captured from the specified directory may be filtered using Apache Ant style inclusion\
  and exclusion patterns. The patterns can be applied in the <include> and <exclude> child elements \
  only. These patterns allow the following wildcards:\
  \
  <table class="content">\
      <tr><th>wildcard</th><th>description</th></tr>\
      <tr><td>?</td><td>Matches any single character.</td></tr>\
      <tr><td>*</td><td>Matches any string of characters (including the empty string) within a single directory or filename, but does not match multiple path elements.</td></tr>\
      <tr><td>**</td><td>Matches any string of characters, possibly including multiple path elements.</td></tr>\
  </table>\
  \
  To illustrate:\
  \
  <table class="content">\
      <tr><th>pattern</th><th>description</th><th>matches</th><th>does not match</th></tr>\
      <tr><td>*.java</td><td>Matches all files in the base directory ending in ".java".</td><td>Foo.java Bar.java</td><td>src/Foo.java</td></tr>\
      <tr><td>MyFile.?</td><td>Matches any file named "MyFile" with a single character extension.</td><td>MyFile.c MyFile.h</td><td>MyFile.txt</td></tr>\
      <tr><td>*.*</td><td>Matches any file in the base directory with a "." somewhere in the name.</td><td>Foo.java Foo. .txt</td><td>Foo</td></tr>\
      <tr><td>src/Source.?*</td><td>Matches any file in the directory "src/" name named "Source" with an extension of at least one character.</td><td>src/Source.txt src/Source.java Source.java</td><td>src/Source.</td></tr>\
      <tr><td>**/*.java</td><td>Matches any file ending in ".java", nested anywhere in the base directory.</td><td>Foo.java src/Foo.java src/com/zutubi/Foo.java</td><td>Bar.c Bar.javax</td></tr>\
      <tr><td>src/**/*.java</td><td>Matches any file ending in ".java" nested under the "src/" directory.</td><td>src/Foo.java src/com/zutubi/Foo.java</td><td>Foo.java test/src/Foo.java</td></tr>\
  </table>\
  </p>

base.label=base directory
base.verbose=The base directory for the files and directories to be captured, relative to the \
  base directory for the recipe.  If left blank, the base directory itself is used.

index.label=index file
index.verbose=For HTML reports, the name of the file to use as the index (default file when the \
  captured report is viewed).

followSymlinks.label=follow symbolic links
followSymlinks.verbose=If true, symbolic links to directories found when scanning for included \
  files will be followed.

inclusions.label=include patterns
inclusions.verbose=Apache Ant style patterns for files to be included in the artifact.  If no \
  patterns are specified, all files are captured.
inclusions.example.1=*.java
inclusions.example.1.blurb=Match all files in the base directory ending in ".java"
inclusions.example.2=**/*.java
inclusions.example.2.blurb=Match any file ending in ".java", nested anywhere in the base directory
inclusions.example.3=src/**/*.java
inclusions.example.3.blurb=Match any file ending in ".java", nested under the "src" directory
inclusions.addable.brief=Specifies a pattern for files to include (if no patterns are specified, \
  all files are captured).
inclusions.addable.verbose=Specifies an Apache Ant style pattern for files to be included in the \
  artifact.  If no such pattern is specified, all files are included.
inclusions.addable.attribute=The inclusion pattern.

exclusions.label=exclude patterns
exclusions.verbose=Apache Ant style patterns for files to be excluded from the artifact.
exclusions.example.1=**/*boring*.log
exclusions.example.1.blurb=Exclude .log files with "boring" somewhere in their name
exclusions.addable.brief=Specifies a pattern for files to exclude.
exclusions.addable.verbose=Specifies an Apache Ant style pattern for files to be excluded from the \
  artifact.
exclusions.addable.attribute=The exclusion pattern.
