failIfNotPresent.label=fail if not present
failIfNotPresent.verbose=If true, if the file(s) to be captured are not found the corresponding \
  command (and thus the build) will fail.

ignoreStale.label=ignore stale
ignoreStale.verbose=If true, files with modified times before the start of the recipe execution \
  will be ignored.

type.label=mime type
type.verbose=The MIME type for the files captured, passed to the browser when the files are \
  downloaded.
type.example.1=text/plain
type.example.1.blurb=For plain text files

postProcessors.label=post-processors
postProcessors.verbose=Post-processors to apply to the captured file(s).  Processors are used to \
  extract features (errors, warnings, etc) and test results from output.

publish.label=publish
publish.verbose=If checked, the files captured will be published to the internal artifact repository \
  and therefore be available to dependent builds.

artifactPattern.label=artifact pattern
artifactPattern.verbose=The artifact pattern is a regular expression used to extract name and type \
  from the artifact''s file name.  This name and type is then used when publishing the file to the \
  internal artifact repository.  The regular expression should contain 2 groups, the first of which \
  captures the artifact name, the second the artifact type.
artifactPattern.example.1=(.+)\\\\.(.+)
artifactPattern.example.1.blurb=The default regular expression, it will match a file name and\
  match everything before the last '.' in the first group (name), and the file suffix in the second group\
  (type)
artifactPattern.example.2=(.+)-[0-9]+\\\\.(.+)
artifactPattern.example.2.blurb=Matches file names that contain a numeric revision \
  string as part of the file name.  For example, artifact-1234.jar.  The regular expression group one matches\
  everything before the numeric, and group two matches the suffix

