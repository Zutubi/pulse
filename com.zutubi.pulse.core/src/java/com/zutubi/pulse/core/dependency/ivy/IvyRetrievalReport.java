package com.zutubi.pulse.core.dependency.ivy;

import static com.zutubi.pulse.core.util.api.XMLStreamUtils.*;
import com.zutubi.util.io.IOUtils;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.core.module.descriptor.DefaultArtifact;
import org.apache.ivy.core.module.id.ModuleRevisionId;
import org.apache.ivy.plugins.report.XmlReportParser;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.AttributesImpl;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.sax.SAXTransformerFactory;
import javax.xml.transform.sax.TransformerHandler;
import javax.xml.transform.stream.StreamResult;
import java.io.*;
import java.text.ParseException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * The retrieval report is generated by the ivy retrieval process, and
 * lists the artifacts that were retrieved to the local file system.
 *
 * This report can be persisted to xml format.
 */
public class IvyRetrievalReport
{
    private static final String ELEMENT_ARTIFACT = "artifact";
    private static final String ELEMENT_EXTRA_ATTRIBUTE = "extra";
    private static final String ELEMENT_MODULE = "module";
    private static final String ELEMENT_MODULES = "modules";

    private static final String ATTRIBUTE_ORGANISATION = "organisation";
    private static final String ATTRIBUTE_MODULE = "name";
    private static final String ATTRIBUTE_REVISION = "revision";
    private static final String ATTRIBUTE_EXTENSION = "ext";
    private static final String ATTRIBUTE_TYPE = "type";
    private static final String ATTRIBUTE_NAME = "name";

    private static final String XML_CDATA = "CDATA";

    private Map<ModuleRevisionId, List<Artifact>> moduleArtifacts = new HashMap<ModuleRevisionId, List<Artifact>>();

    /**
     * Read a retrieval report from the specified file.
     *
     * @param file  the file containing the xml formatted report.
     *
     * @return  an instance of the report representing the data contained within the file.
     *
     * @throws ParseException           is thrown if there is a problem parsing the file.
     * @throws FileNotFoundException    is thrown if the file could not be located
     * @throws XMLStreamException       is thrown if there is a problem parsing the file
     */
    public static IvyRetrievalReport fromXml(File file) throws ParseException, FileNotFoundException, XMLStreamException
    {
        FileInputStream input = null;
        try
        {
            input = new FileInputStream(file);
            return fromXml(input);
        }
        catch (Exception e)
        {
            // The file format is not what we expected, revert to the older format for backward compatibility.
        }
        finally
        {
            IOUtils.close(input);
        }

        XmlReportParser parser = new XmlReportParser();
        parser.parse(file);

        return fromXml(parser);
    }

    public static IvyRetrievalReport fromXml(XmlReportParser parser)
    {
        IvyRetrievalReport report = new IvyRetrievalReport();

        for (Artifact artifact : parser.getArtifacts())
        {
            report.addArtifact(artifact);
        }

        return report;
    }

    public static IvyRetrievalReport fromXml(InputStream input) throws XMLStreamException
    {
        XMLStreamReader reader = null;
        try
        {
            XMLInputFactory inputFactory = XMLInputFactory.newInstance();
            reader = inputFactory.createXMLStreamReader(input);

            // scroll forward past the header to the first element
            while (reader.getEventType() != XMLStreamConstants.END_DOCUMENT && !reader.isStartElement())
            {
                reader.next();
            }

            IvyRetrievalReport report = new IvyRetrievalReport();

            if (reader.isStartElement())
            {
                readModules(reader, report);
            }
            return report;
        }
        finally
        {
            close(reader);
        }
    }

    private static void readModules(XMLStreamReader reader, IvyRetrievalReport report) throws XMLStreamException
    {
        expectStartTag(ELEMENT_MODULES, reader);
        reader.nextTag();

        while (nextSiblingTag(reader, ELEMENT_MODULE))
        {
            Map<String, String> attributes = getAttributes(reader);
            ModuleRevisionId mrid = ModuleRevisionId.newInstance(
                    attributes.get(ATTRIBUTE_ORGANISATION),
                    attributes.get(ATTRIBUTE_MODULE),
                    attributes.get(ATTRIBUTE_REVISION));

            reader.nextTag();

            while (nextSiblingTag(reader, ELEMENT_ARTIFACT))
            {
                readArtifact(reader, mrid, report);
            }
            expectEndTag(ELEMENT_MODULE, reader);
            reader.nextTag();
        }

        expectEndTag(ELEMENT_MODULES, reader);
    }

    private static void readArtifact(XMLStreamReader reader, ModuleRevisionId mrid, IvyRetrievalReport report) throws XMLStreamException
    {
        expectStartTag(ELEMENT_ARTIFACT, reader);

        Map<String, String> attributes = getAttributes(reader);

        String name = attributes.get(ATTRIBUTE_NAME);
        String type = attributes.get(ATTRIBUTE_TYPE);
        String extension = attributes.get(ATTRIBUTE_EXTENSION);
        reader.nextTag();

        Map<String, String> extraAttributes = null;

        if (reader.getLocalName().equals(ELEMENT_EXTRA_ATTRIBUTE))
        {
            reader.nextTag();

            extraAttributes = readElements(reader);

            expectEndTag(ELEMENT_EXTRA_ATTRIBUTE, reader);
            reader.nextTag();
        }

        DefaultArtifact artifact = new DefaultArtifact(mrid, null, name, type, extension, extraAttributes);
        report.addArtifact(artifact);

        expectEndTag(ELEMENT_ARTIFACT, reader);
        reader.nextTag();
    }

    protected IvyRetrievalReport()
    {
    }

    /**
     * Write this report to the output stream in an xml format.
     *
     * @param output    the output stream to which this report is written.
     * @throws SAXException is thrown if there is a problem generating the xml output.
     */
    public void toXml(OutputStream output) throws TransformerConfigurationException, SAXException
    {
        TransformerHandler saxHandler = createTransformerHandler(output);
        saxHandler.startDocument();
        saxHandler.startElement(null, ELEMENT_MODULES, ELEMENT_MODULES, null);

        for (ModuleRevisionId mrid : moduleArtifacts.keySet())
        {
            AttributesImpl moduleAttrs = new AttributesImpl();
            moduleAttrs.addAttribute(null, ATTRIBUTE_ORGANISATION, ATTRIBUTE_ORGANISATION, XML_CDATA, mrid.getOrganisation());
            moduleAttrs.addAttribute(null, ATTRIBUTE_MODULE, ATTRIBUTE_MODULE, XML_CDATA, mrid.getName());
            moduleAttrs.addAttribute(null, ATTRIBUTE_REVISION, ATTRIBUTE_REVISION, XML_CDATA, mrid.getRevision());
            saxHandler.startElement(null, ELEMENT_MODULE, ELEMENT_MODULE, moduleAttrs);

            List<Artifact> artifacts = moduleArtifacts.get(mrid);
            for (Artifact artifact : artifacts)
            {
                AttributesImpl artifactAttrs = new AttributesImpl();
                artifactAttrs.addAttribute(null, ATTRIBUTE_NAME, ATTRIBUTE_NAME, XML_CDATA, artifact.getName());
                artifactAttrs.addAttribute(null, ATTRIBUTE_EXTENSION, ATTRIBUTE_EXTENSION, XML_CDATA, artifact.getExt());
                artifactAttrs.addAttribute(null, ATTRIBUTE_TYPE, ATTRIBUTE_TYPE, XML_CDATA, artifact.getType());
                saxHandler.startElement(null, ELEMENT_ARTIFACT, ELEMENT_ARTIFACT, artifactAttrs);

                if (artifact.getExtraAttributes().size() > 0)
                {
                    saxHandler.startElement(null, ELEMENT_EXTRA_ATTRIBUTE, ELEMENT_EXTRA_ATTRIBUTE, null);

                    Map<String, String> extraAttributes = artifact.getExtraAttributes();
                    for (String key : extraAttributes.keySet())
                    {
                        char[] value = extraAttributes.get(key).toCharArray();
                        saxHandler.startElement(null, key, key, null);
                        saxHandler.startCDATA();
                        saxHandler.characters(value, 0, value.length);
                        saxHandler.endCDATA();
                        saxHandler.endElement(null, key, key);
                    }

                    saxHandler.endElement(null, ELEMENT_EXTRA_ATTRIBUTE, ELEMENT_EXTRA_ATTRIBUTE);
                }

                saxHandler.endElement(null, ELEMENT_ARTIFACT, ELEMENT_ARTIFACT);
            }

            saxHandler.endElement(null, ELEMENT_MODULE, ELEMENT_MODULE);
        }

        saxHandler.endElement(null, ELEMENT_MODULES, ELEMENT_MODULES);
        saxHandler.endDocument();
    }

    private TransformerHandler createTransformerHandler(OutputStream outputStream) throws SAXException
    {
        try
        {
            SAXTransformerFactory transformerFact = (SAXTransformerFactory) SAXTransformerFactory.newInstance();
            TransformerHandler saxHandler = transformerFact.newTransformerHandler();
            saxHandler.getTransformer().setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            saxHandler.getTransformer().setOutputProperty(OutputKeys.INDENT, "yes");
            saxHandler.setResult(new StreamResult(outputStream));
            return saxHandler;
        }
        catch (TransformerConfigurationException e)
        {
            throw new SAXException(e);
        }
    }

    /**
     * Add an artifact to this report.
     *
     * @param artifact  the artifact to be added to the report.
     */
    protected void addArtifact(Artifact artifact)
    {
        ModuleRevisionId mrid = artifact.getModuleRevisionId();
        if (!moduleArtifacts.containsKey(mrid))
        {
            moduleArtifacts.put(mrid, new LinkedList<Artifact>());
        }
        List<Artifact> artifacts = moduleArtifacts.get(mrid);
        artifacts.add(artifact);
    }

    /**
     * Get a list of all of the artifacts contained within this report.
     *
     * @return a list of artifacts.
     */
    public List<Artifact> getArtifacts()
    {
        List<Artifact> artifacts = new LinkedList<Artifact>();
        for (ModuleRevisionId mrid : moduleArtifacts.keySet())
        {
            artifacts.addAll(moduleArtifacts.get(mrid));
        }
        return artifacts;
    }

    /**
     * Get a list of all the artifacts contained within this report
     * that belong to the specified module
     *
     * @param mrid  the module revision id specifying the subset of
     * artifacts to be returned.
     *
     * @return a list of artifacts.
     */
    public List<Artifact> getArtifacts(ModuleRevisionId mrid)
    {
        return moduleArtifacts.get(mrid);
    }
}
