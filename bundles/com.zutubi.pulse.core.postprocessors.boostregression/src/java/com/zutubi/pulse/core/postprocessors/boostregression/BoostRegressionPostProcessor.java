/* Copyright 2017 Zutubi Pty Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.zutubi.pulse.core.postprocessors.boostregression;

import com.zutubi.pulse.core.postprocessors.api.*;
import com.zutubi.pulse.core.util.api.XMLStreamUtils;
import static com.zutubi.pulse.core.util.api.XMLStreamUtils.*;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import java.util.Map;

/**
 * Processes the XML reports generated by Boost's process_jam_log utility.
 */
public class BoostRegressionPostProcessor extends StAXTestReportPostProcessorSupport
{
    private static final String ELEMENT_TEST_LOG = "test-log";

    // Actions
    private static final String ELEMENT_COMPILE = "compile";
    private static final String ELEMENT_LIB = "lib";
    private static final String ELEMENT_LINK = "link";
    private static final String ELEMENT_RUN = "run";

    private static final String[] ACTION_ELEMENTS = { ELEMENT_COMPILE, ELEMENT_LIB, ELEMENT_LINK, ELEMENT_RUN };
    
    // Test log attributes
    private static final String ATTRIBUTE_LIBRARY = "library";
    private static final String ATTRIBUTE_TEST_NAME = "test-name";

    // Action attributes
    private static final String ATTRIBUTE_RESULT = "result";

    // Possible results
    private static final String RESULT_FAILURE = "fail";

    private static final String ACTION_CONTENT_PREFIX = "============================[ %s output below ]============================";
    private static final String ACTION_CONTENT_SUFFIX = "============================[ %s output above ]============================\n";

    public BoostRegressionPostProcessor(BoostRegressionPostProcessorConfiguration config)
    {
        super(config);
    }

    protected void process(XMLStreamReader reader, TestSuiteResult tests) throws XMLStreamException
    {
        expectStartTag(ELEMENT_TEST_LOG, reader);
        Map<String, String> attributes = getAttributes(reader);

        if (attributes.containsKey(ATTRIBUTE_LIBRARY) && attributes.containsKey(ATTRIBUTE_TEST_NAME))
        {
            String suite = attributes.get(ATTRIBUTE_LIBRARY);
            String name = attributes.get(ATTRIBUTE_TEST_NAME);
            TestSuiteResult suiteResult = getSuite(suite, tests);

            nextTagOrEnd(reader);

            TestStatus status = TestStatus.PASS;
            StringBuilder detailsBuilder = new StringBuilder();

            while (nextSiblingTag(reader, ACTION_ELEMENTS))
            {
                String localname = reader.getLocalName();
                attributes = getAttributes(reader);
                if (attributes.containsKey(ATTRIBUTE_RESULT) && RESULT_FAILURE.equals(attributes.get(ATTRIBUTE_RESULT)))
                {
                    status = TestStatus.FAILURE;
                }
                String content = XMLStreamUtils.getElementText(reader);
                if(content != null && content.trim().length() > 0)
                {
                    detailsBuilder.append(String.format(ACTION_CONTENT_PREFIX, localname));
                    detailsBuilder.append(content);
                    detailsBuilder.append(String.format(ACTION_CONTENT_SUFFIX, localname));
                }
                nextTagOrEnd(reader);
            }

            String details = (status != TestStatus.PASS) ? detailsBuilder.toString() : null;
            suiteResult.addCase(new TestCaseResult(name, TestResult.DURATION_UNKNOWN, status, details));
        }
        else
        {
            skipElement(reader);
        }

        expectEndTag(ELEMENT_TEST_LOG, reader);
    }

    private TestSuiteResult getSuite(String suitePath, TestSuiteResult parentSuite)
    {
        String[] pieces = suitePath.split("/");
        return getSuite(pieces, 0, parentSuite);
    }

    private TestSuiteResult getSuite(String[] path, int index, TestSuiteResult parentSuite)
    {
        if(index == path.length)
        {
            return parentSuite;
        }

        TestSuiteResult suite = parentSuite.findSuite(path[index]);
        if(suite == null)
        {
            suite = new TestSuiteResult(path[index]);
            parentSuite.addSuite(suite);
        }

        return getSuite(path, index + 1, suite);
    }
}
