label=git configuration
wizard.label=git scm
introduction=The git configuration defines your SCM integration with a git repository.

repository.label=repository
repository.verbose=URL for the git repository, in the format supported by git clone.

branch.label=branch
branch.verbose=The git branch to check out.

inactivityTimeoutEnabled.label=enable inactivity timeout
inactivityTimeoutEnabled.verbose=If checked, an inactivity timeout is applied to all git commands. \
  See the inactivity timeout field for details.

inactivityTimeoutSeconds.label=inactivity timeout (seconds)
inactivityTimeoutSeconds.verbose=Number of seconds of inactivity after which a git subprocess \
  should be timed out.  Activity is defined as any output from the git command: i.e. if the \
  command does not produce any output for more than this number of seconds, it is timed out.  Note \
  that some versions of git will not produce any status output while cloning, so take care when \
  applying this timeout (especially for larger repositories where operations may take a long time).

cloneType.label=clone type
cloneType.help=indicates how much of the repository should be cloned when checking out this project
cloneType.verbose=Allows fine tuning of how the git repository for this project is cloned when \
  performing a checkout for a build.  Three options are available:\
  <ul>\
    <li>shallow: Clone with a limited depth.  This implies only cloning the selected branch.  \
        This can save time and space if you don''t need repository history for your builds.  \
        However, it is only feasible when the revision to build is known to always be within the \
        given depth (so may not work when building old revisions or for repositories with a lot \
        of commits in a short time).  It also restricts what the build can do with the repository.\
    </li>\
    <li>selected branch only: Only clone the branch that is being built.  This can save time and \
        space if the repository contains branches not required for the build.  However, it \
        restricts what the build can do with the repository.</li>\
    <li>normal: Performs a regular clone and checkout.  This should work in most cases, and is a \
        sensible default.</li>\
    <li>full mirror: Mirrors the full repository, mapping all refs directly to local equivalents \
        (rather than setting them up as remotes).  This may be useful if you would like to build \
        from refs that are not fetched in a default clone.</li>\
  </ul>\
  It is best to leave this setting as ''normal'' unless you have a specific need to change it.

cloneDepth.label=clone depth
cloneDepth.help=depth argument when using shallow clones
cloneDepth.verbose=When using the <b>shallow</b> clone type, this is the depth passed to git \
  clone.  You must ensure this depth is always large enough to include the build revision, or \
  builds will fail as the revision will not be found in the shallow clone.  Set the value higher \
  if you have a high commit rate, a busy server and multi-stage build (where some stages may \
  commence a long time after the build revision is fixed) or sometimes need to build old revisions.

submoduleProcessing.label=submodule processing
submoduleProcessing.verbose=<p>Determines how submodules are processed when checking out or \
  updating code for a build.  The following options are available:</p>\
  <ul>\
    <li>none: submodules are ignored</li>\
    <li>update all recursively: all submodules are checked out and kept up to date recursively</li>\
    <li>update selected: specified submodules are checked out and kept up to date</li>\
  </ul>

selectedSubmodules.label=selected submodules
selectedSubmodules.help=a space-separated list of submodules to keep up to date
selectedSubmodules.verbose=A space-separated list of submodules to check out and keep up to date \
  when using "update selected" submodule processing.  The submodules will be update in the order \
  specified.