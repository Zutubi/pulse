label=subversion configuration
wizard.label=subversion scm
introduction=The Subversion configuration defines your scm integration with a Subversion server.

username.label=username
username.verbose=Specifies the username to use to connect to the subversion server. The user must have access to the \
  URL specified.

url.label=url
url.verbose=Specifies the URL of the subversion repository you would like to check out from, including the protocol to \
  use, the location of the server and path of the code line within the server. The URL given should be in the exact \
  form used for the checkout command of the command line client svn.
url.example.1=http://svn.apache.org/repos/asf/jakarta/oro/trunk/
url.example.1.blurb=To checkout the Jakarta ORO source over HTTP
url.example.2=svn+ssh://svn.example.com/svn-repo/my-project/trunk/
url.example.2.blurb=To checkout the trunk of "my-project" from server "svn.example.com" using svn over ssh

password.label=password
password.verbose=<p>If the user configured above requires a password for authentication, it should be supplied in this \
  field.</p><p>This field is not required, and need not be specified when using anonymous access or other \
  authentication methods.</p>

keyfile.label=private key file
keyfile.help=if using ssh key authentication, full path to the private key file to use
keyfile.verbose=If using ssh private key authentication, the absolute path to the private key file on the pulse host \
  machine.

keyfilePassphrase.label=key file pass phrase
keyfilePassphrase.help=if using an encrypted private key file, the key file passphrase
keyfilePassphrase.verbose=<p>If using an ssh key file that has been encrypted with a passphrase, specify that \
  passphrase using this field.</p><p>This field is not used unless key file is set.</p>

cleanOnUpdateFailure.label=clean up failed updates
cleanOnUpdateFailure.help=if checked, automatically clean up and checkout on any update failure
cleanOnUpdateFailure.verbose=If checked, when an update operation fails Pulse will automatically retry by \
  cleaning up the existing working copy and performing a full checkout.  This allows recovery from a broken \
  working copy without any manual intervention.

useExport.label=use export
useExport.help=if checked, do an export rather than a full checkout when possible
useExport.verbose=<p>If checked, an export will be used rather than a full checkout where \
  possible.  Exports only contain the project source, not the .svn directories.  As such, they \
  save a lot of disk space (around half).  However, exports are not working copies, so they cannot \
  be updated, nor can they be used for many other operations.  Thus this option only makes sense \
  when using the clean checkout scheme, and when your build does not require an actual working \
  copy.</p>\
  <p><b>Note</b>: this option is also incompatible with externals monitoring.  When monitoring \
  externals, Pulse uses update operations to ensure the full working copy is at a consistent \
  revision.</p>
useExport.bad.scheme=the incremental update checkout scheme does not support using export
useExport.externals=externals monitoring cannot be enabled when using export

externalsMonitoring.label=externals monitoring
externalsMonitoring.help=determines if and how Pulse will monitor source included via svn:externals
externalsMonitoring.verbose=<p>Pulse includes some support for monitoring svn:externals references, as long as those \
  references point into the same Subversion repository. The following options are available:\
  <ul>\
    <li>do not monitor: Changes on paths referenced via svn:externals do not trigger builds and are not reported. \
        Externals will, however, be checked out in working copies as normal.</li>\
    <li>monitor all: Pulse will scan the source tree for all svn:externals settings, and also recursively scan within \
        any trees referenced by those externals (within the same repository).  All externals found will be monitored \
        for changes and those changes will be reported.  This option may come with a performance penalty.</li>\
    <li>monitor selected: Pulse will read the svn:externals property for a specified list of directories.  Any \
        externals found will be monitored for changes and those changes reported.  This is more efficient than \
        monitoring all externals, but requires extra configuration and can only be used for one level of externals.</li>\
  </ul>\
  </p>\
  <p>Note that only URLs referring to the same Subversion repository are supported. Additionally, when checking out or \
  updating source to a fixed revision (the normal case for a build), Pulse will force code from the externals to the \
  revision by a subsequent update in each external working copy.</p>

externalMonitorPaths.label=external monitor paths
externalMonitorPaths.help=list of paths (relative to the url) to read the svn:externals property from to monitor externals
externalMonitorPaths.verbose=<p>When monitoring selected externals, you should set this field to a list of paths to \
  check the svn:externals property for. These paths are relative to the Subversion URL specified above (to refer to the \
  base of the checkout, use ".").</p>\
  <p>Note that only URLs referring to the same Subversion repository are supported. Additionally, when checking out or \
  updating source to a fixed revision (the normal case for a build), Pulse will force code from the externals to the \
  revision by a subsequent update in each external working copy.</p>

verifyExternals.label=verify externals
verifyExternals.help=if checked, externals urls will be checked to ensure they refer to the same repository
verifyExternals.verbose=If using svn:externals support (see above), only externals from the same Subversion repository \
  are supported. By default this is verified by Pulse, and externals outside of the repository are ignored. However, \
  as this may take significant time, you may wish to disable verification by unchecking this option.  This will only \
  work if all of the monitored externals are indeed within the single repository.

enableHttpSpooling.label=enable HTTP spooling
enableHttpSpooling.verbose=If checked, spooling will be enabled for HTTP connections.  HTTP data will \
  be spooled to temporary files as it is read.  This may be necessary if you experience invalid data \
  errors accessing Subversion over HTTP.  Note that using spooling will require extra disk space, and \
  may delay feedback during bootstrapping.
