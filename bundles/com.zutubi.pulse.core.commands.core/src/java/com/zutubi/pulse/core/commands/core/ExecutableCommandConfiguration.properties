label=executable command
introduction=Executable commands can be used to run an arbitrary binary.
verbose=The executable command is used to run an arbitrary process. It forms the basis of all \
  commands that involve running an external process. The success or failure of the command is \
  determined by the exit code of the executed process (zero for success, non-zero for failure). \
  The output of the command that is executed is captured as an artifact named "command output", \
  with a single file "output.txt". A combination of the standard output and standard error streams \
  for the process is captured into the file, so that errors appear in line with useful context. \
  The output artifact may be post-processed just as any other artifact captured as part of the \
  build.

workingDir.label=working directory
workingDir.help=path, relative to the base directory, in which to execute the command
workingDir.verbose=If you wish to execute the command from a specific directory, provide the \
  path of the directory, relative to the base directory for the recipe.
workingDir.browse=browse
workingDir.popup.title=select directory

exe.label=executable
exe.verbose=The executable to run. This should be specified as either a command in the \
  PATH or the absolute path of the file to execute. If the file to execute is within your source \
  tree, use $'{'base.dir'}' to construct the absolute path. This property refers to the base \
  directory for the build, where your source code is checked out.
exe.example.1=$'{'base.dir'}'/scripts/my-build.sh
exe.example.1.blurb=Run the script scripts/my-build.sh in your source tree
exe.example.2=buildtool
exe.example.2.blurb=Run the command buildtool which is in the PATH

args.label=arguments
args.verbose=A space-separated list of command line arguments to pass to to the executable.

extraArguments.label=extra arguments
extraArguments.help=useful for passing arguments containing spaces
extraArguments.verbose=Extra arguments to add to the command-line.  The preferred way to specify \
  is via the arguments field, but this field provides a simpler way to add arguments containing \
  space characters.
extraArguments.addable.brief=Specifies an extra argument to add to the command line.
extraArguments.addable.verbose=Used to add an extra argument to the end of the command line.  The \
  preferred way to specify is via the arguments attribute, but this element provides a simpler way \
  to add an argument that contains space characters.
extraArguments.addable.content=The value of the argument to add.

inputFile.label=input file
inputFile.verbose=If specified, gives the path relative to the base directory of an input file to \
  feed into the standard input of the process.  The input is fed from a dedicated thread as fast \
  as the process will accept it.

example.simple.blurb=Run a custom build script with bash
example.environment.blurb=Run make, setting the BUILDMODE environment variable and post-processing \
  for compiler errors
