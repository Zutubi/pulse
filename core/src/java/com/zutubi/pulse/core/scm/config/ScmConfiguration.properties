label=scm
introduction=The project SCM is the version control system where the code is stored.

checkoutScheme.label=checkout scheme
checkoutScheme.help=defines the scheme used by pulse to bootstrap a build
checkoutScheme.verbose=<p>The checkout scheme defines two things:\
  <ol>\
    <li>Whether a clean working copy is used for each build</li>\
    <li>How the project source code is obtained from the SCM.</li>\
  </ol>\
  </p>\
  <p>The three checkout schemes currently available are:\
  <ul>\
    <li><strong>Clean checkout</strong>: always check out a fresh copy of the source from the SCM \
        and rebuild from scratch. This is the default behaviour, and has the advantage of \
        guaranteeing that the build is executed in a freshly checked out directory. This scheme is \
        recommended for those projects where checking out the full source and rebuilding does not \
        introduce too much of a delay into the build cycle.</li>\
    <li><strong>Clean update</strong>: uses a local check out directory to improve the efficiency \
        of updating the source code. When a project is built for the first time, the source files \
        are checked out into a directory on the server, and copied into the build directory. Each \
        build after that will trigger an update of the source files followed by a copy into a \
        clean build directory. The advantage of this approach is that pulse will only retrieve the \
        latest changes from the SCM. This scheme may be used as an optimisation for projects where \
        checking out the source takes a significant amount of time. Clean rebuilds are maintained \
        by copying into a clean build directory every time.</li>\
    <li><strong>Incremental update</strong>: keeps a working copy of the project source code and \
        reuses it for multiple builds of the project. When the project is built for the first \
        time, the source files are checked out directly into the build directory. Each build \
        after that the source code will be updated and the build executed in the same directory. \
        The advantage of this approach is that it allows incremental builds. The disadvantage is \
        that builds are not isolated from one another: the artifacts from one build can affect \
        the next. This scheme is recommended for projects that have build cycles too long to \
        allow clean rebuilds.</li>\
  </ul>\
  </p>


#
# wizard
#
wizard.step.select.label=select scm
wizard.step.select.description=Select the type of SCM to be used for this project.
wizard.select.label=scm type
wizard.step.configure.label=configure scm
wizard.step.configure.description=Configure the SCM details.
