<?xml version="1.0" encoding="UTF-8"?>
<project name="Pulse" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:zutubi="antlib:com.zutubi.ant">

    <!--
When testing new dependencies, it is easier to run them from a local repository first rather than uploading
them to zutubi.com/ivy .  So support this, use -Divy.settings.file=ivysettings.local.xml

For example:
    ant clean build.all -Dskip.tests=true -Divy.settings.file=ivysettings.local.xml
      -->
    <property name="ivy.settings.file" value="ivysettings.xml"/>

    <!-- Import general purpose macros. -->
    <import file="macros.xml"/>

    <property file="build.properties"/>
    <property environment="env"/>

    <condition property="on.windows">
        <os family="windows"/>
    </condition>

    <!-- check if the nsis executable is available for packaging. -->
    <condition property="nsis.found">
        <or>
            <available file="makensis" filepath="${env.PATH}"/>
            <available file="makensis.exe" filepath="${env.PATH}"/>
            <available file="makensis.exe" filepath="${env.Path}"/>
        </or>
    </condition>

    <!-- indicate whether or not we can run the nsis phase of the packaging -->
    <condition property="run.nsis">
        <and>
            <isset property="on.windows"/>
            <isset property="nsis.found"/>
        </and>
    </condition>

    <target name="init">
        <dirname property="project.root.dir" file="./build.xml"/>
        <property name="project.repository" value="${project.root.dir}/build/repository"/>

        <path id="custom.task.path">
            <fileset dir="${project.root.dir}/etc">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <taskdef name="copyright" classname="com.zutubi.pulse.CopyrightTask" classpathref="custom.task.path"/>
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="custom.task.path"/>
        <taskdef uri="antlib:com.zutubi.ant" resource="com/zutubi/ant/antlib.xml" classpathref="custom.task.path"/>
        <taskdef name="ideamodule" classname="configurator.task.IdeaJavaModuleTask" classpathref="custom.task.path"/>

        <load-ivy-taskdef/>
        <ivy:settings file="${ivy.settings.file}"/>

    </target>

    <target name="clean" depends="clean.all, clean.dev"/>

    <target name="buildlist" depends="init">
        <ivy:buildlist reference="build.path" onMissingDescriptor="skip">
            <fileset dir="${project.root.dir}" includes="*/build.xml"/>
            <fileset dir="${project.root.dir}/bundles" includes="*/build.xml"/>
        </ivy:buildlist>
    </target>

    <target name="show.all" depends="buildlist">
        <subant inheritall="false" target="show" buildpathref="build.path"/>
    </target>

    <target name="clean.all" depends="buildlist">
        <subant inheritall="false" target="clean" buildpathref="build.path"/>
        <delete dir="build"/>
    </target>

    <target name="build.all" depends="buildlist">
        <subant inheritall="false" target="build.module" buildpathref="build.path">
            <property name="skip.dependencies" value="true"/>
        </subant>

        <!-- Generate one mega report -->
        <property name="report.dir" value="build/reports/junit"/>
        <mkdir dir="${report.dir}/html"/>
        <junitreport todir="${report.dir}">
            <fileset dir=".">
                <include name="*/${report.dir}/xml/*.xml"/>
                <include name="bundles/*/${report.dir}/xml/*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
    </target>

    <target name="dist.all" depends="init"
            description="Publishes built artifacts to the Subversion repository, assuming they are already built.">
        <set-package-deps module="master"/>
        <subant inheritall="false" target="dist" buildpathref="build.path.master"/>
    </target>

    <target name="clean.dev" description="Cleans up data created during development.">
        <delete dir="data"/>

        <!-- clean up this annoying log file. -->
        <delete file="velocity.log"/>

        <!-- clean out the master -->
        <delete dir="com.zutubi.pulse.master/system"/>
        <delete file="com.zutubi.pulse.master/etc/admin.token"/>
        <delete file="com.zutubi.pulse.master/etc/service.token"/>
        <delete file="com.zutubi.pulse.master/etc/runtime.properties"/>

        <!-- clean out the slave -->
        <delete dir="com.zutubi.pulse.slave/system"/>
        <delete file="com.zutubi.pulse.slave/etc/admin.token"/>
        <delete file="com.zutubi.pulse.slave/etc/service.token"/>
        <delete file="com.zutubi.pulse.slave/etc/runtime.properties"/>

        <!-- clean out the script/test playground. -->
        <delete dir="working"/>

        <!-- clean out the user.home/.pulse2?/* directory -->
        <delete dir="${user.home}/.pulse2"/>
        <delete dir="${user.home}/.pulse2-agent"/>

        <!-- goodbye plugin registry -->
        <delete file="plugins/plugin-registry.xml"/>

        <!-- can the testing plugins -->
        <delete quiet="true">
            <fileset dir="plugins/prepackaged" includes="com.zutubi.pulse.core.postprocessors.test.*.jar"/>
        </delete>

        <!-- the following should be cleaned out by calls to the respective module/clean targets. -->
        <delete dir="package/core/build"/>
        <delete dir="package/dev/build"/>
        <delete dir="package/servercore/build"/>
        <delete dir="package/slave/build"/>
        <delete dir="package/master/build"/>
    </target>

    <target name="package.dev" depends="init">
        <build-package-deps module="dev"/>
        <antcall target="assemble.package.dev"/>
    </target>

    <target name="assemble.package.dev" depends="init">
        <property name="package.name.dev" value="pulse-dev-${pulse.version}"/>
        <property name="package.root.dev" value="build/package/${package.name.dev}"/>
        <property name="version.root.dev" value="${package.root.dev}/versions/${pulse.build}"/>

        <delete dir="${package.root.dev}"/>
        <mkdir dir="${package.root.dev}"/>

        <copy file="etc/active-version.txt" todir="${package.root.dev}"/>
        <replace file="${package.root.dev}/active-version.txt">
            <replacefilter token="__BUILD_NUMBER__" value="${pulse.build}"/>
        </replace>

        <copy todir="${package.root.dev}/bin">
            <fileset dir="com.zutubi.pulse.core/src/bin" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root.dev}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root.dev}/bin" includes="**/*.sh"/>

        <retrieve-package-deps module="dev" dest="${version.root.dev}"/>

        <copy todir="${version.root.dev}/lib">
            <fileset dir="com.zutubi.pulse.core/etc" includes="*.dll"/>
            <fileset dir="com.zutubi.pulse.dev/etc" includes="*.xml"/>
        </copy>

        <copy todir="${version.root.dev}/boot">
            <fileset dir="com.zutubi.pulse.core/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.dev/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.dev/etc" includes="classpath.txt"/>
        </copy>

        <native-zip dir="${package.root.dev}/.." file="../${package.name.dev}.zip" path="${package.name.dev}"/>

        <tar destfile="build/${package.name.dev}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root.dev}/.." mode="755" username="root" group="root">
                <include name="${package.name.dev}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root.dev}/.." username="root" group="root">
                <include name="${package.name.dev}/**/*"/>
                <exclude name="${package.name.dev}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.dev"/>

        <!--
         Now we retrieve the source dependencies into the ${package.root.dev}/src directory.
         -->
        <retrieve-package-src-deps module="dev" dest="${package.root.dev}/src"/>

        <native-zip dir="${package.root.dev}/.." file="../${package.name.dev}-src.zip" path="${package.name.dev}/src"/>

    </target>
    

    <target name="nsis.dev" if="run.nsis">
        <property name="package.name.dev" value="pulse-dev-${pulse.version}"/>
        <property name="package.root.dev" value="build/package/${package.name.dev}"/>

        <copy file="installer/env.nsh" todir="${package.root.dev}"/>
        <copy file="installer/pulse.ico" todir="${package.root.dev}"/>
        <copy file="installer/dev.nsi.in" tofile="${package.root.dev}/dev.nsi"/>
        <copy file="installer/findjava.exe" todir="${package.root.dev}/bin"/>

        <replace file="${package.root.dev}/dev.nsi">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name.dev}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root.dev}">
            <arg line="dev.nsi"/>
        </exec>
    </target>

    <target name="package.slave" depends="init">
        <build-package-deps module="slave"/>
        <antcall target="assemble.package.slave"/>
    </target>

    <target name="assemble.package.slave" depends="init">
        <property name="package.name.slave" value="pulse-agent-${pulse.version}"/>
        <property name="package.root.slave" value="build/package/${package.name.slave}"/>
        <property name="version.root.slave" value="${package.root.slave}/versions/${pulse.build}"/>

        <delete dir="${package.root.slave}"/>
        <mkdir dir="${package.root.slave}"/>

        <copy file="etc/active-version.txt" todir="${package.root.slave}"/>
        <replace file="${package.root.slave}/active-version.txt">
            <replacefilter token="__BUILD_NUMBER__" value="${pulse.build}"/>
        </replace>

        <copy todir="${package.root.slave}/bin">
            <fileset dir="com.zutubi.pulse.core/src/bin" includes="**/*"/>
            <fileset dir="com.zutubi.pulse.servercore/src/bin" includes="**/*"/>
        </copy>

        <copy todir="${package.root.slave}/lib">
            <fileset dir="com.zutubi.pulse.servercore/src/lib" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root.slave}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root.slave}/bin" includes="**/*.sh" verbose="true"/>

        <retrieve-package-deps module="slave" dest="${version.root.slave}"/>

        <copy todir="${package.root.slave}/logs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>

        <replace dir="${package.root.slave}" token="@VERSION@" value="${pulse.version}">
            <include name="README.txt"/>
        </replace>

        <copy todir="${version.root.slave}/system/config">
            <fileset dir="com.zutubi.pulse.slave/etc" includes="pulse-agent.properties,logging.properties"/>
            <fileset dir="com.zutubi.pulse.slave/etc" includes="logging/*.properties"/>
        </copy>

        <copy todir="${version.root.slave}/system/www">
            <fileset dir="com.zutubi.pulse.slave/src/www" includes="**/*"/>
        </copy>

        <copy todir="${version.root.slave}/lib">
            <fileset dir="com.zutubi.pulse.core/etc" includes="*.dll"/>
            <fileset dir="com.zutubi.pulse.slave/etc" includes="*.xml"/>
        </copy>

        <copy todir="${version.root.slave}/boot">
            <fileset dir="com.zutubi.pulse.core/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.dev/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.servercore/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.slave/etc" includes="classpath.txt"/>
        </copy>

        <replace dir="${package.root.slave}/bin" replacefilterfile="com.zutubi.pulse.slave/subst.properties">
            <include name="**/*.in"/>
        </replace>

        <move todir="${package.root.slave}/bin">
            <fileset dir="${package.root.slave}/bin"/>
            <mapper type="glob" from="*.in" to="*"/>
        </move>

        <!-- the ant zip command doesn't preserve permissions, so we call out to zip -->
        <exec executable="zip" dir="${package.root.slave}/..">
            <arg line="-r ../${package.name.slave}.zip ${package.name.slave}"/>
        </exec>

        <tar destfile="build/${package.name.slave}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root.slave}/.." mode="755" username="root" group="root">
                <include name="${package.name.slave}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root.slave}/.." username="root" group="root">
                <include name="${package.name.slave}/**/*"/>
                <exclude name="${package.name.slave}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.slave"/>

        <!--
         Now we retrieve the source dependencies into the ${package.root.slave}/src directory.
         -->
        <retrieve-package-src-deps module="slave" dest="${package.root.slave}/src"/>

        <native-zip dir="${package.root.slave}/.." file="../${package.name.slave}-src.zip" path="${package.name.slave}/src"/>

    </target>

    <target name="nsis.slave" if="run.nsis">
        <property name="package.name.slave" value="pulse-agent-${pulse.version}"/>
        <property name="package.root.slave" value="build/package/${package.name.slave}"/>

        <copy file="installer/env.nsh" todir="${package.root.slave}"/>
        <copy file="installer/pulse.ico" todir="${package.root.slave}"/>
        <copy file="installer/pulse.nsi.in" tofile="${package.root.slave}/pulse.nsi"/>
        <copy file="installer/findjava.exe" todir="${package.root.slave}/bin"/>

        <replace file="${package.root.slave}/pulse.nsi" replacefilterfile="com.zutubi.pulse.slave/subst.properties">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name.slave}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root.slave}">
            <arg line="pulse.nsi"/>
        </exec>
    </target>

    <target name="package.master" depends="init">
        <!-- Check that all plugins will be included in some package -->
        <exec executable="python" failonerror="true">
            <arg line="scripts/check-plugins.py"/>
        </exec>

        <build-package-deps module="master"/>

        <antcall target="assemble.package.dev"/>
        <antcall target="assemble.package.slave"/>

        <property name="package.name.master" value="pulse-${pulse.version}"/>
        <property name="package.root.master" value="build/package/${package.name.master}"/>
        <property name="version.root.master" value="${package.root.master}/versions/${pulse.build}"/>

        <delete dir="${package.root.master}"/>
        <mkdir dir="${package.root.master}"/>

        <copy file="etc/active-version.txt" todir="${package.root.master}"/>
        <replace file="${package.root.master}/active-version.txt">
            <replacefilter token="__BUILD_NUMBER__" value="${pulse.build}"/>
        </replace>

        <copy todir="${package.root.master}/bin">
            <fileset dir="com.zutubi.pulse.core/src/bin" includes="**/*"/>
            <fileset dir="com.zutubi.pulse.servercore/src/bin" includes="**/*"/>
        </copy>

        <copy todir="${package.root.master}/lib">
            <fileset dir="com.zutubi.pulse.servercore/src/lib" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root.master}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root.master}/bin" includes="**/*.sh" verbose="true"/>

        <retrieve-package-deps module="master" dest="${version.root.master}"/>

        <copy todir="${version.root.master}/system/templates">
            <fileset dir="com.zutubi.pulse.master/src/templates" includes="**/*.vm **/*.ftl **/*.properties **/*.example"/>
        </copy>
        <copy todir="${package.root.master}/logs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>
        <copy todir="${version.root.master}/system/www">
            <fileset dir="com.zutubi.pulse.master/src/www" includes="**/*"/>
        </copy>

        <!-- copy the readme file. -->
        <copy todir="${package.root.master}">
            <fileset dir="etc" includes="README.txt"/>
        </copy>
        <replace dir="${package.root.master}" token="@VERSION@" value="${pulse.version}">
            <include name="README.txt"/>
        </replace>

        <!-- /config is for user configuration properties -->
        <copy todir="${version.root.master}/system/config">
            <fileset dir="com.zutubi.pulse.master/etc" includes="pulse-defaults.properties,logging.properties"/>
            <fileset dir="com.zutubi.pulse.master/etc" includes="logging/*.properties"/>
            <fileset dir="com.zutubi.pulse.master/etc" includes="*.properties.template"/>
        </copy>

        <copy todir="${version.root.master}/lib">
            <fileset dir="com.zutubi.pulse.core/etc" includes="*.dll"/>
            <fileset dir="com.zutubi.pulse.master/etc" includes="*.xml"/>
        </copy>

        <copy todir="${version.root.master}/boot">
            <fileset dir="com.zutubi.pulse.core/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.dev/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.servercore/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.master/etc" includes="*.commands.properties"/>
            <fileset dir="com.zutubi.pulse.master/etc" includes="classpath.txt"/>
        </copy>

        <replace dir="${package.root.master}/bin" replacefilterfile="com.zutubi.pulse.master/subst.properties">
            <include name="**/*.in"/>
        </replace>

        <move todir="${package.root.master}/bin">
            <fileset dir="${package.root.master}/bin"/>
            <mapper type="glob" from="*.in" to="*"/>
        </move>

        <copy todir="${version.root.master}/system/packages">
            <fileset dir="build">
                <include name="pulse-agent-*"/>
                <include name="pulse-dev-*"/>
                <exclude name="*-src*"/>
            </fileset>
        </copy>

        <!-- the ant zip command doesn't preserve permissions, so we call out to zip -->
        <exec executable="zip" dir="${package.root.master}/..">
            <arg line="-r ../${package.name.master}.zip ${package.name.master}"/>
        </exec>

        <tar destfile="build/${package.name.master}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root.master}/.." mode="755" username="root" group="root">
                <include name="${package.name.master}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root.master}/.." username="root" group="root">
                <include name="${package.name.master}/**/*"/>
                <exclude name="${package.name.master}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.master"/>

        <!--
         Now we retrieve the source dependencies into the ${package.root.slave}/src directory.
         -->
        <retrieve-package-src-deps module="master" dest="${package.root.master}/src"/>

        <native-zip dir="${package.root.master}/.." file="../${package.name.master}-src.zip" path="${package.name.master}/src"/>


    </target>

    <target name="nsis.master" if="run.nsis">
        <property name="package.name.master" value="pulse-${pulse.version}"/>
        <property name="package.root.master" value="build/package/${package.name.master}"/>

        <copy file="installer/env.nsh" todir="${package.root.master}"/>
        <copy file="installer/pulse.ico" todir="${package.root.master}"/>
        <copy file="installer/pulse.nsi.in" tofile="${package.root.master}/pulse.nsi"/>
        <copy file="installer/findjava.exe" todir="${package.root.master}/bin"/>

        <replace file="${package.root.master}/pulse.nsi" replacefilterfile="com.zutubi.pulse.master/subst.properties">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name.master}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root.master}">
            <arg line="pulse.nsi"/>
        </exec>
    </target>

    <target name="accept.master" depends="package.master, run.accept.master"/>

    <target name="build.acceptance">
        <subant inheritall="false" target="build.module">
            <property name="skip.dependencies" value="true"/>
            <fileset dir="com.zutubi.pulse.acceptance" includes="build.xml"/>
        </subant>
    </target>

    <target name="run.accept.master" depends="build.acceptance, init">
        <property name="build.dir" value="com.zutubi.pulse.acceptance/build"/>
        <property name="report.dir" value="build/reports/junit"/>
        <mkdir dir="${report.dir}/xml"/>
        <mkdir dir="${report.dir}/html"/>

        <javac target="5" srcdir="com.zutubi.pulse.master/src/java" destdir="${build.dir}/classes" includes="**/LicenseEncoder*" debug="true">
            <classpath>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>

        <condition property="extension" value="tar.gz" else="zip">
            <os family="unix"/>
        </condition>

        <echo message="Startup services."/>
        <exec executable="bash" spawn="true">
            <arg line="scripts/setup-services.sh"/>
        </exec>

        <echo message="Start acceptance test suite."/>
        <junit printsummary="yes" fork="on" forkmode="once" outputtoformatters="false" maxmemory="512m"
               failureProperty="test.failed" errorProperty="test.failed">
            <sysproperty key="pulse.port" value="8889"/>
            <sysproperty key="pulse.package" value="build/pulse-${pulse.version}.${extension}"/>
            <sysproperty key="agent.package" value="build/pulse-agent-${pulse.version}.${extension}"/>
            <sysproperty key="bootstrap" value="com/zutubi/pulse/bootstrap/bootstrapContext.xml"/>
            <sysproperty key="work.dir" value="working"/>
            <classpath>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/test.classes"/>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/xml">
                <fileset dir="com.zutubi.pulse.acceptance/src/test">
                    <include name="**/AcceptanceTestSuite.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}">
            <fileset dir=".">
                <include name="*/${report.dir}/xml/*.xml"/>
                <include name="${report.dir}/xml/*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>

        <echo message="Shutdown services."/>
        <exec executable="bash">
            <arg line="scripts/teardown-services.sh"/>
        </exec>

        <fail message="One or more acceptance tests failed.  See the reports (${report.dir}) for details."
              if="test.failed"/>
    </target>

    <target name="apidoc" depends="init">
        <property name="apidir" value="build/docs/api"/>
        <delete dir="${apidir}"/>
        <javadoc destdir="${apidir}" useexternalfile="true">
            <doclet path="etc/com.zutubi.xmlrpc.doclet-0.1.jar" name="com.zutubi.xmlrpc.doclet.XmlRpcDoclet"/>
            <source file="com.zutubi.pulse.master/src/java/com/zutubi/pulse/master/api/RemoteApi.java"/>
            <arg line="-quiet -s"/>
        </javadoc>
    </target>

    <target name="javadoc" depends="init">
        <property name="docdir" value="build/docs/javadoc"/>
        <delete dir="${docdir}"/>
        <javadoc destdir="${docdir}" useexternalfile="true">
            <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
            <link href="http://java.sun.com/products/javamail/javadocs/"/>
            <link href="http://www.cafeconleche.org/XOM/apidocs/"/>
            <link href="http://www.jmock.org/javadoc/2.0.0/"/>

            <!-- The whole diff package is documented -->
            <fileset dir="com.zutubi.diff/src/java"/>

            <!-- Just the top level i18n package to show Messages -->
            <fileset dir="com.zutubi.i18n/src/java">
                <include name="com/zutubi/i18n/*.java"/>
            </fileset>

            <!-- Top level plus the validators -->
            <fileset dir="com.zutubi.validation/src/java">
                <include name="com/zutubi/pulse/validation/*.java"/>
                <include name="com/zutubi/pulse/validation/validators/*.java"/>
            </fileset>
            <fileset dir="com.zutubi.validation.annotations/src/java"/>

            <!-- Tove has separate API packages -->
            <fileset dir="com.zutubi.tove/src/java">
                <include name="**/api/*.java"/>
            </fileset>
            <fileset dir="com.zutubi.tove.annotations/src/java"/>

            <!-- Pick a handful of utils that are most useful and quite stable -->
            <fileset dir="com.zutubi.util/src/java">
                <include name="com/zutubi/util/Pair.java"/>
                <include name="com/zutubi/util/StringUtils.java"/>
                <include name="com/zutubi/util/WebUtils.java"/>
                <include name="com/zutubi/util/io/*.java"/>
            </fileset>

            <!-- Pulse has API packages, but don't show some internal tests -->
            <fileset dir="com.zutubi.pulse.core/src/java">
                <include name="**/api/*.java"/>
            </fileset>
            <fileset dir="com.zutubi.pulse.core/src/test">
                <include name="**/api/*.java"/>
                <exclude name="**/scm/api/*.java"/>
                <exclude name="**/util/api/*.java"/>
            </fileset>

            <!-- Pulse master APIs, but exclude remote api -->
            <fileset dir="com.zutubi.pulse.master/src/java">
                <include name="**/api/*.java"/>
                <exclude name="**/master/api/*.java"/>
            </fileset>
            <fileset dir="com.zutubi.pulse.master/src/test">
                <include name="com/zutubi/**/api/*.java"/>
                <exclude name="**/master/api/*.java"/>
            </fileset>

            <classpath>
                <fileset dir="com.zutubi.pulse.master/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javadoc>
    </target>

    <target name="idea" description="Runs build.idea.modules with -Dskip.tests=true">
        <antcall target="build.idea.modules">
            <param name="skip.tests" value="true"/>
        </antcall>
    </target>

    <target name="build.idea.modules" depends="build.all"
            description="Adds modules to an IDEA project file (pulse.ipr) for all Pulse modules and plugins.">

        <!-- copy the template idea project files into the project directory if they dont already exist. -->
        <available file="pulse.ipr" property="pulse.ipr.available"/>
        <if>
            <not><isset property="pulse.ipr.available"/></not>
            <then>
                <copy todir="${project.root.dir}" overwrite="true">
                    <fileset dir="etc">
                        <include name="pulse.ipr"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <available file="pulse.iws" property="pulse.iws.available"/>
        <if>
            <not><isset property="pulse.iws.available"/></not>
            <then>
                <copy todir="${project.root.dir}" overwrite="true">
                    <fileset dir="etc">
                        <include name="pulse.iws"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <zutubi:ivytoidea conf="build" projectFile="pulse.ipr" propertiesFile="build.properties">
            <fileset dir="${project.root.dir}/">
                <include name="*/ivy.xml"/>
                <include name="bundles/*/ivy.xml"/>
            </fileset>
        </zutubi:ivytoidea>
    </target>

    <target name="clean.plugins" depends="init"
            description="Removes all traces of plugins from your dev environment.">
        <delete dir="plugins"/>
    </target>

    <target name="refresh.plugins" description="Removes current plugins, reloads the jars for internal plugins and explodes third party dependencies of plugins.">
        <antcall target="build.refresh.plugins">
            <param name="skip.tests" value="true"/>
        </antcall>
    </target>

    <target name="build.refresh.plugins" depends="clean.plugins,buildlist">
        <property file="ivy.properties"/>
        <ivy:settings/>
        <retrieve-dependencies ivyfile="package/core/ivy.xml" conf="equinox-bundles" dest="plugins/internal"/>
        <subant inheritall="false" target="extract.prepackaged" buildpathref="build.path"/>
        <echo message=""/>
        <echo message="IMPORTANT: The plugin modules must now be compiled in your IDE before the plugins can be used."/>
        <echo message=""/>
    </target>

    <target name="setup.dev" depends="idea,refresh.plugins"
            description="Sets up a dev environment from a clean checkout."/>

    <target name="source.package" depends="init, clean">

        <property name="package.name" value="pulse-${pulse.version}-src"/>
        <mkdir dir="build/${package.name}"/>

        <copy todir="build/${package.name}">
            <fileset dir="${project.root.dir}">
                <include name="**/*"/>
                <exclude name="build/**"/>
                <exclude name="classes/**"/>
                <exclude name="etc/*.src"/>
                <exclude name="**/LicenseEncoder.java"/>
                <exclude name="**/LicenseEncodeDecodeTest.java"/>
                <exclude name="**/LicenseKeyValidatorTest.java"/>
                <exclude name="**/.svn"/>
                <!-- exclude intellij project files -->
                <exclude name="**/*.ipr"/>
                <exclude name="**/*.iws"/>
                <exclude name="**/*.iml"/>
                <!-- other excludes that are useful when generating source package from an existing workspace. -->
                <exclude name="**/*.*~"/>
                <exclude name="velocity.log"/>
            </fileset>
            <fileset dir="${project.root.dir}">
                <include name="etc/pulse.ipr"/>
                <include name="etc/pulse.iws"/>
            </fileset>
        </copy>

        <copy todir="build/${package.name}">
            <mapper type="glob" from="*.src" to="*"/>
            <fileset dir="${project.root.dir}/etc" includes="*.src"/>
        </copy>

        <copyright src="build/${package.name}" value="${copyright.statement}">
            <include name="**/*.java"/>
        </copyright>

        <native-zip dir="${project.root.dir}/build" file="${package.name}.zip" path="${package.name}"/>
    </target>

    <macrodef name="set-package-deps">
        <attribute name="module"/>
        <sequential>
            <ivy:buildlist reference="build.path.@{module}" root="com.zutubi.pulse.@{module}-package" ivyfilepath="ivy.xml" excluderoot="true" onMissingDescriptor="skip">
                <fileset dir="${project.root.dir}/">
                    <include name="*/build.xml"/>
                    <include name="bundles/*/build.xml"/>
                    <include name="package/*/build.xml"/>
                </fileset>
            </ivy:buildlist>
        </sequential>
    </macrodef>

    <macrodef name="build-package-deps">
        <attribute name="module"/>
        <sequential>
            <set-package-deps module="@{module}"/>
            <subant inheritAll="false" target="build.module" buildpathref="build.path.@{module}">
                <property name="skip.dependencies" value="true"/>
            </subant>
        </sequential>
    </macrodef>

    <macrodef name="retrieve-package-deps">
        <attribute name="module"/>
        <attribute name="dest"/>
        <sequential>
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="release" dest="@{dest}/lib"/>
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="internal-bundles" dest="@{dest}/system/plugins/internal"/>
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="prepackaged-bundles" dest="@{dest}/system/plugins/prepackaged"/>

            <copy todir="@{dest}/system/plugins/config">
                <fileset dir="com.zutubi.pulse.master/etc/osgi" includes="config.ini"/>
            </copy>

            <move tofile="@{dest}/../../lib/boot.jar">
                <fileset dir="@{dest}/lib" includes="boot-*.jar"/>
            </move>
        </sequential>
    </macrodef>

    <macrodef name="retrieve-package-src-deps">
        <attribute name="module"/>
        <attribute name="dest"/>
        <sequential>
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="src" dest="@{dest}"/>
        </sequential>
    </macrodef>

    <macrodef name="native-zip">
        <attribute name="dir"/>
        <attribute name="file"/>
        <attribute name="path"/>
        <sequential>
            <exec executable="zip" dir="@{dir}">
                <arg line="-r @{file} @{path}"/>
            </exec>
        </sequential>
    </macrodef>
</project>
