<?xml version="1.0" encoding="UTF-8"?>
<project name="Pulse" basedir="." xmlns:ivy="antlib:fr.jayasoft.ivy.ant" xmlns:zutubi="antlib:com.zutubi.ant">
    <!-- Import general purpose macros. -->
    <import file="macros.xml"/>

    <property file="build.properties"/>
    <property environment="env"/>

    <condition property="on.windows">
        <os family="windows"/>
    </condition>

    <!-- check if the nsis executable is available for packaging. -->
    <condition property="nsis.found">
        <or>
            <available file="makensis" filepath="${env.PATH}"/>
            <available file="makensis.exe" filepath="${env.PATH}"/>
            <available file="makensis.exe" filepath="${env.Path}"/>
        </or>
    </condition>

    <!-- indicate whether or not we can run the nsis phase of the packaging -->
    <condition property="run.nsis">
        <and>
            <isset property="on.windows"/>
            <isset property="nsis.found"/>
        </and>
    </condition>

    <target name="init">
        <dirname property="project.root.dir" file="./build.xml"/>
        <property name="project.repository" value="${project.root.dir}/build/repository"/>

        <path id="custom.task.path">
            <fileset dir="${project.root.dir}/etc">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <taskdef name="copyright" classname="com.zutubi.pulse.CopyrightTask" classpathref="custom.task.path"/>
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="custom.task.path"/>
        <taskdef uri="antlib:com.zutubi.ant" resource="com/zutubi/ant/antlib.xml" classpathref="custom.task.path"/>
    	<taskdef name="ideamodule" classname="configurator.task.IdeaJavaModuleTask" classpathref="custom.task.path"/>

        <load-ivy-taskdef/>

    </target>

    <target name="clean" depends="clean.all"/>

    <target name="buildlist" depends="init">
        <ivy:buildlist reference="build.path" skipbuildwithoutivy="true">
            <fileset dir="${project.root.dir}" includes="*/build.xml"/>
            <fileset dir="${project.root.dir}/bundles" includes="*/build.xml"/>
        </ivy:buildlist>
    </target>

    <target name="show.all" depends="buildlist">
        <subant inheritall="false" target="show" buildpathref="build.path"/>
    </target>

    <target name="clean.all" depends="buildlist">
        <subant inheritall="false" target="clean" buildpathref="build.path"/>
        <delete dir="build"/>
    </target>

    <target name="build.all" depends="buildlist">
        <subant inheritall="false" target="build.module" buildpathref="build.path">
            <property name="skip.dependencies" value="true"/>
        </subant>

        <!-- Generate one mega report -->
        <property name="report.dir" value="build/reports/junit"/>
        <mkdir dir="${report.dir}/html"/>
        <junitreport todir="${report.dir}">
            <fileset dir=".">
                <include name="*/${report.dir}/xml/*.xml"/>
                <include name="bundles/*/${report.dir}/xml/*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
    </target>

    <target name="clean.dev" description="Cleanup data created during development.">
        <delete dir="data"/>

        <!-- clean up this annoying log file. -->
        <delete file="velocity.log"/>

        <!-- clean out the master -->
        <delete dir="master/system"/>
        <delete file="master/etc/admin.token"/>
        <delete file="master/etc/service.token"/>
        <delete file="master/etc/runtime.properties"/>

        <!-- clean out the slave -->
        <delete dir="slave/system"/>
        <delete file="slave/etc/admin.token"/>
        <delete file="slave/etc/service.token"/>
        <delete file="slave/etc/runtime.properties"/>

        <!-- clean out the script/test playground. -->
        <delete dir="working/pulse-accept"/>

        <!-- clean out the user.home/.pulse/* directory -->
        <delete dir="${user.home}/.pulse"/>        
        <delete dir="${user.home}/.pulse2"/>        
        <delete dir="${user.home}/.pulse-agent"/>

        <delete file="plugins/plugins-registry.xml"/>

        <delete dir="package/core/build"/>
        <delete dir="package/local/build"/>
        <delete dir="package/server-core/build"/>
        <delete dir="package/slave/build"/>
        <delete dir="package/master/build"/>
    </target>

    <!--
        FIXME: these targets do not currently work.  Use: ant -f [module]/build.xml instead.
    -->
    
    <target name="build.core">
        <ant inheritAll="false" dir="core" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.server-core">
        <ant inheritAll="false" dir="server-core" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.bundles">
        <ant inheritAll="false" dir="bundles" antfile="build.xml"/>
    </target>

    <target name="build.local">
        <ant inheritAll="false" dir="local" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.master">
        <ant inheritAll="false" dir="master" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.slave">
        <ant inheritAll="false" dir="slave" antfile="build.xml" target="build.module"/>
    </target>

    <target name="package.local" depends="init">
        <build-package-deps module="local"/>
        <antcall target="assemble.package.local"/>
    </target>

    <target name="assemble.package.local" depends="init">
        <property name="package.name.local" value="pulse-dev-${pulse.version}"/>
        <property name="package.root.local" value="build/package/${package.name.local}"/>
        <property name="version.root.local" value="${package.root.local}/versions/${pulse.build}"/>

        <delete dir="${package.root.local}"/>
        <mkdir dir="${package.root.local}"/>

        <copy file="etc/active-version.txt" todir="${package.root.local}"/>
        <replace file="${package.root.local}/active-version.txt">
            <replacefilter token="__BUILD_NUMBER__" value="${pulse.build}"/>
        </replace>

        <copy todir="${package.root.local}/bin">
            <fileset dir="core/src/bin" includes="**/*"/>
            <fileset dir="local/src/bin" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root.local}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root.local}/bin" includes="**/*.sh"/>

        <retrieve-package-deps module="local" dest="${version.root.local}"/>        

        <copy todir="${version.root.local}/lib">
            <fileset dir="core/etc" includes="*.dll"/>
            <fileset dir="local/etc" includes="*.xml"/>
        </copy>

        <copy todir="${version.root.local}/boot">
            <fileset dir="core/etc" includes="*.commands.properties"/>
            <fileset dir="local/etc" includes="*.commands.properties"/>
            <fileset dir="local/etc" includes="classpath.txt"/>
        </copy>

        <exec executable="zip" dir="${package.root.local}/..">
            <arg line="-r ../${package.name.local}.zip ${package.name.local}"/>
        </exec>

        <tar destfile="build/${package.name.local}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root.local}/.." mode="755" username="root" group="root">
                <include name="${package.name.local}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root.local}/.." username="root" group="root">
                <include name="${package.name.local}/**/*"/>
                <exclude name="${package.name.local}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.local"/>
    </target>

    <target name="nsis.local" if="run.nsis">
        <property name="package.name.local" value="pulse-dev-${pulse.version}"/>
        <property name="package.root.local" value="build/package/${package.name.local}"/>

        <copy file="installer/env.nsh" todir="${package.root.local}"/>
        <copy file="installer/pulse.ico" todir="${package.root.local}"/>
        <copy file="installer/dev.nsi.in" tofile="${package.root.local}/dev.nsi"/>
        <copy file="installer/findjava.exe" todir="${package.root.local}/bin"/>

        <replace file="${package.root.local}/dev.nsi">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name.local}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root.local}">
            <arg line="dev.nsi"/>
        </exec>
    </target>

    <target name="package.slave" depends="init">
        <build-package-deps module="slave"/>
        <antcall target="assemble.package.slave"/>
    </target>

    <target name="assemble.package.slave" depends="init">
        <property name="package.name.slave" value="pulse-agent-${pulse.version}"/>
        <property name="package.root.slave" value="build/package/${package.name.slave}"/>
        <property name="version.root.slave" value="${package.root.slave}/versions/${pulse.build}"/>

        <delete dir="${package.root.slave}"/>
        <mkdir dir="${package.root.slave}"/>

        <copy file="etc/active-version.txt" todir="${package.root.slave}"/>
        <replace file="${package.root.slave}/active-version.txt">
            <replacefilter token="__BUILD_NUMBER__" value="${pulse.build}"/>
        </replace>

        <copy todir="${package.root.slave}/bin">
            <fileset dir="core/src/bin" includes="**/*"/>
            <fileset dir="local/src/bin" includes="**/*"/>
            <fileset dir="server-core/src/bin" includes="**/*"/>
        </copy>

        <copy todir="${package.root.slave}/lib">
            <fileset dir="server-core/src/lib" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root.slave}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root.slave}/bin" includes="**/*.sh" verbose="true"/>

        <retrieve-package-deps module="slave" dest="${version.root.slave}"/>

        <copy todir="${package.root.slave}/logs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>

        <replace dir="${package.root.slave}" token="@VERSION@" value="${pulse.version}">
            <include name="README.txt"/>
        </replace>

        <copy todir="${version.root.slave}/system/config">
            <fileset dir="slave/etc" includes="pulse-agent.properties,logging.properties"/>
            <fileset dir="slave/etc" includes="logging/*.properties"/>
        </copy>

        <copy todir="${version.root.slave}/system/www">
            <fileset dir="slave/src/www" includes="**/*"/>
        </copy>
        
        <copy todir="${version.root.slave}/lib">
            <fileset dir="core/etc" includes="*.dll"/>
            <fileset dir="slave/etc" includes="*.xml"/>
        </copy>

        <copy todir="${version.root.slave}/boot">
            <fileset dir="core/etc" includes="*.commands.properties"/>
            <fileset dir="local/etc" includes="*.commands.properties"/>
            <fileset dir="server-core/etc" includes="*.commands.properties"/>
            <fileset dir="slave/etc" includes="classpath.txt"/>
        </copy>

        <replace dir="${package.root.slave}/bin" replacefilterfile="slave/subst.properties">
            <include name="**/*.in"/>
        </replace>

        <move todir="${package.root.slave}/bin">
            <fileset dir="${package.root.slave}/bin"/>
            <mapper type="glob" from="*.in" to="*"/>
        </move>

        <!-- the ant zip command doesn't preserve permissions, so we call out to zip -->
        <exec executable="zip" dir="${package.root.slave}/..">
            <arg line="-r ../${package.name.slave}.zip ${package.name.slave}"/>
        </exec>

        <tar destfile="build/${package.name.slave}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root.slave}/.." mode="755" username="root" group="root">
                <include name="${package.name.slave}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root.slave}/.." username="root" group="root">
                <include name="${package.name.slave}/**/*"/>
                <exclude name="${package.name.slave}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.slave"/>
    </target>

    <target name="nsis.slave" if="run.nsis">
        <property name="package.name.slave" value="pulse-agent-${pulse.version}"/>
        <property name="package.root.slave" value="build/package/${package.name.slave}"/>

        <copy file="installer/env.nsh" todir="${package.root.slave}"/>
        <copy file="installer/pulse.ico" todir="${package.root.slave}"/>
        <copy file="installer/pulse.nsi.in" tofile="${package.root.slave}/pulse.nsi"/>
        <copy file="installer/findjava.exe" todir="${package.root.slave}/bin"/>

        <replace file="${package.root.slave}/pulse.nsi" replacefilterfile="slave/subst.properties">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name.slave}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root.slave}">
            <arg line="pulse.nsi"/>
        </exec>
    </target>

    <target name="package.master" depends="init">
        <!-- Check that all plugins will be included in some package -->
	<exec executable="python" failonerror="true">
            <arg line="scripts/check-plugins.py"/>
	</exec>

        <build-package-deps module="master"/>

        <antcall target="assemble.package.local"/>
        <antcall target="assemble.package.slave"/>

        <property name="package.name.master" value="pulse-${pulse.version}"/>
        <property name="package.root.master" value="build/package/${package.name.master}"/>
        <property name="version.root.master" value="${package.root.master}/versions/${pulse.build}"/>

        <delete dir="${package.root.master}"/>
        <mkdir dir="${package.root.master}"/>

        <copy file="etc/active-version.txt" todir="${package.root.master}"/>
        <replace file="${package.root.master}/active-version.txt">
            <replacefilter token="__BUILD_NUMBER__" value="${pulse.build}"/>
        </replace>

        <copy todir="${package.root.master}/bin">
            <fileset dir="core/src/bin" includes="**/*"/>
            <fileset dir="local/src/bin" includes="**/*"/>
            <fileset dir="server-core/src/bin" includes="**/*"/>
            <fileset dir="master/src/bin" includes="**/*"/>
        </copy>

        <copy todir="${package.root.master}/lib">
            <fileset dir="server-core/src/lib" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root.master}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root.master}/bin" includes="**/*.sh" verbose="true"/>

        <retrieve-package-deps module="master" dest="${version.root.master}"/>

        <copy todir="${version.root.master}/system/templates">
            <fileset dir="master/src/templates" includes="**/*.vm **/*.ftl **/*.properties **/*.example"/>
        </copy>
        <copy todir="${package.root.master}/logs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>
        <copy todir="${version.root.master}/system/www">
            <fileset dir="master/src/www" includes="**/*"/>
        </copy>

        <!-- copy the readme file. -->
        <copy todir="${package.root.master}">
            <fileset dir="etc" includes="README.txt"/>
        </copy>
        <replace dir="${package.root.master}" token="@VERSION@" value="${pulse.version}">
            <include name="README.txt"/>
        </replace>

        <!-- /config is for user configuration properties -->
        <copy todir="${version.root.master}/system/config">
            <fileset dir="master/etc" includes="pulse-defaults.properties,logging.properties"/>
            <fileset dir="master/etc" includes="logging/*.properties"/>
            <fileset dir="master/etc" includes="*.properties.template"/>
        </copy>

        <copy todir="${version.root.master}/lib">
            <fileset dir="core/etc" includes="*.dll"/>
            <fileset dir="master/etc" includes="*.xml"/>
        </copy>

        <copy todir="${version.root.master}/boot">
            <fileset dir="core/etc" includes="*.commands.properties"/>
            <fileset dir="local/etc" includes="*.commands.properties"/>
            <fileset dir="server-core/etc" includes="*.commands.properties"/>
            <fileset dir="master/etc" includes="*.commands.properties"/>
            <fileset dir="master/etc" includes="classpath.txt"/>
        </copy>

        <replace dir="${package.root.master}/bin" replacefilterfile="master/subst.properties">
            <include name="**/*.in"/>
        </replace>

        <move todir="${package.root.master}/bin">
            <fileset dir="${package.root.master}/bin"/>
            <mapper type="glob" from="*.in" to="*"/>
        </move>

        <copy todir="${version.root.master}/system/packages">
            <fileset dir="build">
                <include name="pulse-agent-*"/>
                <include name="pulse-dev-*"/>
            </fileset>
        </copy>

        <!-- the ant zip command doesn't preserve permissions, so we call out to zip -->
        <exec executable="zip" dir="${package.root.master}/..">
            <arg line="-r ../${package.name.master}.zip ${package.name.master}"/>
        </exec>

        <tar destfile="build/${package.name.master}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root.master}/.." mode="755" username="root" group="root">
                <include name="${package.name.master}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root.master}/.." username="root" group="root">
                <include name="${package.name.master}/**/*"/>
                <exclude name="${package.name.master}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.master"/>
    </target>

    <target name="nsis.master" if="run.nsis">
        <property name="package.name.master" value="pulse-${pulse.version}"/>
        <property name="package.root.master" value="build/package/${package.name.master}"/>

        <copy file="installer/env.nsh" todir="${package.root.master}"/>
        <copy file="installer/pulse.ico" todir="${package.root.master}"/>
        <copy file="installer/pulse.nsi.in" tofile="${package.root.master}/pulse.nsi"/>
        <copy file="installer/findjava.exe" todir="${package.root.master}/bin"/>

        <replace file="${package.root.master}/pulse.nsi" replacefilterfile="master/subst.properties">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name.master}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root.master}">
            <arg line="pulse.nsi"/>
        </exec>
    </target>

    <target name="accept.master" depends="package.master, run.accept.master"/>

    <target name="build.acceptance">
        <subant inheritall="false" target="build.module">
            <property name="skip.dependencies" value="true"/>
            <fileset dir="acceptance" includes="build.xml"/>
        </subant>
    </target>

    <target name="run.accept.master" depends="build.acceptance, init">
        <property name="build.dir" value="acceptance/build"/>
        <property name="report.dir" value="build/reports/junit"/>
        <mkdir dir="${report.dir}/xml"/>
        <mkdir dir="${report.dir}/html"/>

        <javac target="5" srcdir="master/src/java" destdir="${build.dir}/classes" includes="**/LicenseEncoder*" debug="true">
            <classpath>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>

        <condition property="extension" value="tar.gz" else="zip">
            <os family="unix"/>
        </condition>

        <echo message="Extract and start pulse-${pulse.version}.${extension}"/>
        <exec executable="bash" spawn="true">
            <arg line="scripts/acceptance-test-prep.sh build/pulse-${pulse.version}.${extension}"/>
        </exec>

        <exec executable="bash">
            <arg line="scripts/acceptance-test-wait.sh"/>
        </exec>

        <echo message="Start acceptance test suite."/>
        <junit printsummary="yes" fork="on" forkmode="once" maxmemory="512m" failureProperty="test.failed" errorProperty="test.failed">
            <sysproperty key="pulse.port" value="8889"/>
            <sysproperty key="bootstrap" value="com/zutubi/pulse/bootstrap/bootstrapContext.xml"/>
            <classpath>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/test.classes"/>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/xml">
                <fileset dir="acceptance/src/test">
                    <include name="**/AcceptanceTestSuite.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}">
            <fileset dir=".">
                <include name="*/${report.dir}/xml/*.xml"/>
                <include name="${report.dir}/xml/*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
        <exec executable="bash">
            <arg line="scripts/acceptance-test-post.sh ${pulse.version}"/>
        </exec>
        <fail message="One or more acceptance tests failed.  See the reports (${report.dir}) for details."
              if="test.failed"/>

        <antcall target="test.agent.upgrade"/>
    </target>

    <target name="test.agent.upgrade">
        <exec executable="python" failonerror="true">
            <arg line="scripts/upgradetest.py ${pulse.version} ${pulse.build} both"/>
        </exec>
    </target>
    
    <target name="setup.master" depends="init">
        <property name="build.dir" value="acceptance/build"/>
        <junit>
            <sysproperty key="pulse.port" value="${master.port}"/>
            <sysproperty key="bootstrap" value="com/zutubi/pulse/bootstrap/bootstrapContext.xml"/>
            <classpath>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/test.classes"/>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <batchtest todir="fubar">
                <fileset dir="acceptance/src/test">
                    <include name="**/SetupAcceptanceTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="idea" depends="build.all">
        <zutubi:ivytoidea conf="build" projectFile="pulse.ipr" propertiesFile="build.properties">
            <fileset dir="${project.root.dir}/">
	        <include name="*/ivy.xml"/>
	        <include name="bundles/*/ivy.xml"/>
	    </fileset>
        </zutubi:ivytoidea>
    </target>

    <target name="refresh.plugins" depends="init">
        <!-- retrieve the internal plugins -->
        <delete dir="plugins/internal"/>

        <!-- use the default ivy configuration properties. -->
        <property file="ivy.properties"/>
        <ivy:configure/>
        
        <retrieve-dependencies ivyfile="package/core/ivy.xml" conf="equinox-bundles" dest="plugins/internal"/>

        <echo message=""/>
        <echo message="====================================================================="/>
        <echo message="IMPORTANT:"/>
        <echo message="   Now run the following:"/>
        <echo message="   1)  ant package.master -Dskip.tests=true"/>
        <echo message="   2)  bundles/build.xml idea.prepare.prepackaged ant target"/>
        <echo message="   3)  remember to compile the plugins modules in idea into the plugins directory"/>

    </target>

    <macrodef name="build-package-deps">
        <attribute name="module"/>
        <sequential>
            <ivy:buildlist reference="build.path.@{module}" root="pulse-@{module}-package" ivyfilepath="ivy.xml" excluderoot="true" skipbuildwithoutivy="true">
                <fileset dir="${project.root.dir}/">
	            <include name="*/build.xml"/>
	            <include name="bundles/*/build.xml"/>
	            <include name="package/*/build.xml"/>
	        </fileset>
            </ivy:buildlist>

            <subant inheritAll="false" target="build.module" buildpathref="build.path.@{module}">
                <property name="skip.dependencies" value="true"/>
            </subant>
        </sequential>
    </macrodef>

    <macrodef name="retrieve-package-deps">
        <attribute name="module"/>
        <attribute name="dest"/>
        <sequential>
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="release" dest="@{dest}/lib"/>        
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="internal-bundles" dest="@{dest}/system/plugins/internal"/>
            <retrieve-dependencies ivyfile="package/@{module}/ivy.xml" conf="prepackaged-bundles" dest="@{dest}/system/plugins/prepackaged"/>        

            <copy todir="@{dest}/system/plugins/config">
                <fileset dir="master/etc/osgi" includes="config.ini"/>
            </copy>

            <move tofile="@{dest}/../../lib/boot.jar">
                <fileset dir="@{dest}/lib" includes="boot-*.jar"/>
            </move>
        </sequential>
    </macrodef>
</project>
