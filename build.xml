<?xml version="1.0" encoding="UTF-8"?>
<!-- -->
<!-- -->
<!-- -->
<project name="Pulse" basedir="." xmlns:ivy="antlib:fr.jayasoft.ivy.ant">

    <property file="build.properties"/>

    <condition property="on.windows">
        <os family="windows"/>
    </condition>

    <target name="clean" depends="clean.all"/>

    <target name="clean.all">
        <!-- trigger a clean for each module. -->
        <foreach target="clean"/>

        <delete dir="build"/>
        <delete dir="data"/>
        <delete dir="master/system"/>
        <delete file="master/etc/admin.token"/>
        <delete file="master/etc/service.token"/>
        <delete file="master/etc/pulse-init.properties"/>

        <!-- clean out the user.home/.pulse/* directory -->
        <delete dir="${user.home}/.pulse"/>
    </target>

    <target name="build.boot">
        <ant inheritAll="false" dir="boot" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.core" depends="build.boot">
        <ant inheritAll="false" dir="core" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.server-core" depends="build.core">
        <ant inheritAll="false" dir="server-core" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.local" depends="build.core">
        <ant inheritAll="false" dir="local" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.master" depends="build.server-core">
        <ant inheritAll="false" dir="master" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.slave" depends="build.server-core">
        <ant inheritAll="false" dir="slave" antfile="build.xml" target="build.module"/>
    </target>

    <target name="build.all" depends="clean">
        <foreach target="build.module"/>

        <!-- Generate one mega report -->
        <property name="report.dir" value="build/reports/junit"/>
        <mkdir dir="${report.dir}/html"/>
        <junitreport todir="${report.dir}">
            <fileset dir=".">
                <include name="*/${report.dir}/xml/*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
    </target>

    <target name="package.local" depends="init, build.local">

        <property name="package.name" value="pulse-local-${pulse.version}"/>
        <property name="package.root" value="build/package/${package.name}"/>

        <delete dir="${package.root}"/>
        <mkdir dir="${package.root}"/>

        <copy todir="${package.root}/bin">
            <fileset dir="core/src/bin" includes="**/*"/>
            <fileset dir="local/src/bin" includes="**/*"/>
        </copy>

        <fixcrlf srcdir="${package.root}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root}/bin" includes="**/*.sh"/>

        <retrieve.dependencies module="." conf="local" dest="${package.root}/lib"/>

        <copy todir="${package.root}/lib">
            <fileset dir="local/etc" includes="*.xml"/>
        </copy>

        <!-- place holder for package documentation -->
        <!--<copy todir="${package.root}/docs">-->
            <!--<fileset dir="etc" includes="delete-me.txt"/>-->
        <!--</copy>-->

        <exec executable="zip" dir="${package.root}/..">
            <arg line="-r ../${package.name}.zip ${package.name}"/>
        </exec>

        <tar destfile="build/${package.name}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root}/.." mode="755" username="root" group="root">
                <include name="${package.name}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root}/.." username="root" group="root">
                <include name="${package.name}/**/*"/>
                <exclude name="${package.name}/bin/*"/>
            </tarfileset>
        </tar>
    </target>

    <target name="package.master" depends="init, clean, build.local, build.master">

        <property name="package.name" value="pulse-${pulse.version}"/>
        <property name="package.root" value="build/package/${package.name}"/>

        <delete dir="${package.root}"/>
        <mkdir dir="${package.root}"/>

        <copy todir="${package.root}/bin">
            <fileset dir="core/src/bin" includes="**/*"/>
            <fileset dir="local/src/bin" includes="**/*"/>
            <fileset dir="server-core/src/bin" includes="**/*"/>
            <fileset dir="master/src/bin" includes="**/*"/>
        </copy>

        <copy todir="${package.root}/licenses">
            <fileset dir="ivy-repository" includes="**/*.txt"/>
        </copy>

        <fixcrlf srcdir="${package.root}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root}/bin" includes="**/*.sh" verbose="true"/>

        <retrieve.dependencies module="." conf="local" dest="${package.root}/lib"/>
        <retrieve.dependencies module="." conf="master" dest="${package.root}/lib"/>

        <!-- place holder for package documentation -->
<!--
        <copy todir="${package.root}/docs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>
-->
        <copy todir="${package.root}/system/templates">
            <fileset dir="master/src/templates" includes="**/*.vm **/*.ftl **/*.properties"/>
        </copy>
        <!-- place holder for the log directory -->
        <copy todir="${package.root}/system/logs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>
        <copy todir="${package.root}/system/www">
            <fileset dir="master/src/www" includes="**/*"/>
        </copy>

        <!-- copy the readme file. -->
        <copy todir="${package.root}">
            <fileset dir="etc" includes="README.txt"/>
        </copy>
        <replace dir="${package.root}" token="@VERSION@" value="${pulse.version}">
            <include name="README.txt"/>
        </replace>

        <!-- /config is for user configuration properties -->
        <copy todir="${package.root}/system/config">
            <fileset dir="master/etc" includes="pulse-defaults.properties,logging.properties"/>
            <fileset dir="master/etc" includes="logging/*.properties"/>
            <fileset dir="master/etc" includes="config.properties"/>
        </copy>

        <copy todir="${package.root}/lib">
            <fileset dir="master/etc" includes="*.xml"/>
        </copy>

        <replace dir="${package.root}/bin" replacefilterfile="master/subst.properties">
            <include name="**/*.in"/>
        </replace>

        <move todir="${package.root}/bin">
            <fileset dir="${package.root}/bin"/>
            <mapper type="glob" from="*.in" to="*"/>
        </move>

        <!-- the ant zip command doesn't preserve permissions, so we call out to zip -->
        <exec executable="zip" dir="${package.root}/..">
            <arg line="-r ../${package.name}.zip ${package.name}"/>
        </exec>

        <tar destfile="build/${package.name}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root}/.." mode="755" username="root" group="root">
                <include name="${package.name}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root}/.." username="root" group="root">
                <include name="${package.name}/**/*"/>
                <exclude name="${package.name}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.master"/>
    </target>

    <target name="nsis.master" if="on.windows">
        <property name="package.name" value="pulse-${pulse.version}"/>
        <property name="package.root" value="build/package/${package.name}"/>

        <copy file="installer/env.nsh" todir="${package.root}"/>
        <copy file="installer/pulse.ico" todir="${package.root}"/>
        <copy file="installer/pulse.nsi.in" tofile="${package.root}/pulse.nsi"/>

        <replace file="${package.root}/pulse.nsi" replacefilterfile="master/subst.properties">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root}">
            <arg line="pulse.nsi"/>
        </exec>
    </target>

    <target name="accept.master" depends="package.master">
        <property name="build.dir" value="master/build"/>
        <property name="report.dir" value="build/reports/junit"/>
        <mkdir dir="${report.dir}/xml"/>
        <mkdir dir="${report.dir}/html"/>

        <javac srcdir="server-core/src/java" destdir="${build.dir}/classes" includes="**/LicenseEncoder*" debug="true">
            <classpath>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>

        <condition property="extension" value="tar.gz" else="zip">
            <os family="unix"/>
        </condition>

        <exec executable="bash" spawn="true">
            <arg line="acceptance-test-prep.sh build/pulse-${pulse.version}.${extension}"/>
        </exec>

        <exec executable="bash">
            <arg line="acceptance-test-wait.sh"/>
        </exec>

        <junit printsummary="yes" fork="on" failureProperty="test.failed" errorProperty="test.failed">
            <sysproperty key="pulse.port" value="8889"/>
            <sysproperty key="bootstrap" value="com/zutubi/pulse/bootstrap/bootstrapContext.xml"/>
            <classpath>
                <pathelement location="${build.dir}/classes"/>
                <pathelement location="${build.dir}/test.classes"/>
                <pathelement location="${build.dir}/accept.classes"/>
                <fileset dir="${build.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}/xml">
                <fileset dir="master/src/acceptance">
                    <include name="**/AcceptanceTestSuite.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}">
            <fileset dir=".">
                <include name="*/${report.dir}/xml/*.xml"/>
                <include name="${report.dir}/xml/*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
        <exec executable="bash">
            <arg line="acceptance-test-post.sh ${pulse.version}"/>
        </exec>
        <fail message="One or more acceptance tests failed.  See the reports (${report.dir}) for details."
              if="test.failed"/>
    </target>

    <target name="package.slave" depends="init, clean, build.local, build.slave">

        <property name="package.name" value="pulse-agent-${pulse.version}"/>
        <property name="package.root" value="build/package/${package.name}"/>

        <delete dir="${package.root}"/>
        <mkdir dir="${package.root}"/>

        <copy todir="${package.root}/bin">
            <fileset dir="core/src/bin" includes="**/*"/>
            <fileset dir="server-core/src/bin" includes="**/*"/>
        </copy>

        <copy todir="${package.root}/licenses">
            <fileset dir="ivy-repository" includes="**/*.txt"/>
        </copy>

        <fixcrlf srcdir="${package.root}/bin" eol="lf" eof="remove" includes="**/*.sh"/>
        <chmod perm="755" dir="${package.root}/bin" includes="**/*.sh" verbose="true"/>

        <retrieve.dependencies module="." conf="local" dest="${package.root}/lib"/>
        <retrieve.dependencies module="." conf="slave" dest="${package.root}/lib"/>

        <!-- place holder for package documentation -->
<!--
        <copy todir="${package.root}/docs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>
-->
        <!-- place holder for the log directory -->
        <copy todir="${package.root}/system/logs">
            <fileset dir="etc" includes="delete-me.txt"/>
        </copy>

        <!-- copy the readme file. -->
        <replace dir="${package.root}" token="@VERSION@" value="${pulse.version}">
            <include name="README.txt"/>
        </replace>

        <copy todir="${package.root}/system/config">
            <fileset dir="slave/etc" includes="pulse-agent.properties,logging.properties"/>
            <fileset dir="slave/etc" includes="logging/*.properties"/>
        </copy>

        <copy todir="${package.root}/system/www">
            <fileset dir="slave/src/www" includes="**/*"/>
        </copy>
        
        <copy todir="${package.root}/lib">
            <fileset dir="slave/etc" includes="*.xml"/>
        </copy>

        <replace dir="${package.root}/bin" replacefilterfile="slave/subst.properties">
            <include name="**/*.in"/>
        </replace>

        <move todir="${package.root}/bin">
            <fileset dir="${package.root}/bin"/>
            <mapper type="glob" from="*.in" to="*"/>
        </move>

        <!-- the ant zip command doesn't preserve permissions, so we call out to zip -->
        <exec executable="zip" dir="${package.root}/..">
            <arg line="-r ../${package.name}.zip ${package.name}"/>
        </exec>

        <tar destfile="build/${package.name}.tar.gz" compression="gzip">
            <tarfileset dir="${package.root}/.." mode="755" username="root" group="root">
                <include name="${package.name}/bin/*"/>
            </tarfileset>
            <tarfileset dir="${package.root}/.." username="root" group="root">
                <include name="${package.name}/**/*"/>
                <exclude name="${package.name}/bin/*"/>
            </tarfileset>
        </tar>

        <antcall target="nsis.slave"/>
    </target>

    <target name="nsis.slave" if="on.windows">
        <property name="package.name" value="pulse-agent-${pulse.version}"/>
        <property name="package.root" value="build/package/${package.name}"/>

        <copy file="installer/env.nsh" todir="${package.root}"/>
        <copy file="installer/pulse.ico" todir="${package.root}"/>
        <copy file="installer/pulse.nsi.in" tofile="${package.root}/pulse.nsi"/>

        <replace file="${package.root}/pulse.nsi" replacefilterfile="slave/subst.properties">
            <replacefilter token="__PACKAGE_NAME__" value="${package.name}"/>
            <replacefilter token="__VERSION__" value="${pulse.version}"/>
        </replace>

        <exec executable="makensis" dir="${package.root}">
            <arg line="pulse.nsi"/>
        </exec>
    </target>

    <target name="init">
        <property name="project.root.dir" value="."/>
        <property name="project.repository" value="${project.root.dir}/build/repository"/>
    </target>

    <!--
     Refresh the projects lib directory by retrieving the latest module dependencies.
    -->
    <target name="refresh.lib" depends="clean, init">

        <!-- refreshing the lib directory -->
        <delete dir="lib"/>

        <!-- use the default ivy configuration properties. -->
        <property file="ivy.properties"/>
        <ivy:configure/>
        <!-- retrieve all of the modules external dependencies -->
        <retrieve.dependencies module="boot" dest="lib" conf="external"/>
        <retrieve.dependencies module="core" dest="lib" conf="external"/>
        <retrieve.dependencies module="server-core" dest="lib" conf="external"/>
        <retrieve.dependencies module="local" dest="lib" conf="external"/>
        <retrieve.dependencies module="master" dest="lib" conf="external"/>
        <retrieve.dependencies module="slave" dest="lib" conf="external"/>
    </target>

    <!--
     Retrieve the dependencies for the specified module, and place them into the
     destination directory.
    -->
    <macrodef name="retrieve.dependencies">
        <attribute name="module"/>
        <attribute name="conf" default="external"/>
        <attribute name="dest" default="lib"/>
        <sequential>
            <!-- resolve the modules ivy file. -->
            <ivy:resolve file="@{module}/ivy.xml" conf="@{conf}"/>
            <ivy:deliver deliverpattern="${project.repository}/[module]/ivy-[revision].xml"/>
            <ivy:retrieve pattern="@{dest}/[artifact]-[revision].[ext]" validate="true" conf="@{conf}"/>
        </sequential>
    </macrodef>

    <!--
     Execute the specified target on each of the modules.
    -->
    <macrodef name="foreach">
        <attribute name="target"/>
        <sequential>
            <ant inheritAll="false" dir="boot" antfile="build.xml" target="@{target}"/>
            <ant inheritAll="false" dir="core" antfile="build.xml" target="@{target}"/>
            <ant inheritAll="false" dir="local" antfile="build.xml" target="@{target}"/>
            <ant inheritAll="false" dir="server-core" antfile="build.xml" target="@{target}"/>
            <ant inheritAll="false" dir="master" antfile="build.xml" target="@{target}"/>
            <ant inheritAll="false" dir="slave" antfile="build.xml" target="@{target}"/>
        </sequential>
    </macrodef>
</project>
