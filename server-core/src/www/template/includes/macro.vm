##
## Outputs security / credentials content tgs for permissions related uses.
##
#macro(authorisationTags $user)
    #if($user)
        <content tag="user.name">$user.name</content>
        <content tag="user.login">$user.login</content>
    #end
#end

##
## Outputs sitemesh content tags for the project links on the header bar
##
#macro(projectTags $project)
    <content tag="projectId">$project.id</content>
    <content tag="projectName">$!webwork.htmlEncode($project.name)</content>
    <content tag="selectedTab">projects</content>
#end

##
## Outputs sitemesh content tags for build links on the header bar
##
#macro(buildTags $project $buildResult)
    #projectTags($project)
    <content tag="buildId">$buildResult.id</content>
    <content tag="buildNumber">$buildResult.number</content>
#end

##
## Outputs a tab header bar, with the javascript necessary to control the
## tab selection.
##
#macro(tabBar $tabNames)
    <script language="JavaScript" type="text/javascript">
        function Tab(htmlId)
       {
            this.elementId = htmlId;
            var selected = false;
            var self = this;

            /*
             * Shows or hides this page depending on whether the visible
             * tab id matches this objects id.
             *
             * @param visibleTabId the id of the tab that was selected
             */
            this.updateVisibility = function(visibleTabId)
            {
                var thElement = document.getElementById('tab_header_' + self.elementId);
                var tcElement = document.getElementById('tab_contents_' + self.elementId);

                if(!selected && visibleTabId == self.elementId)
                {
                    thElement.className = "active";
                    tcElement.style.display = "block";
                    self.selected = true;
                }
                else
                {
                    thElement.className = "inactive";
                    tcElement.style.display = "none";
                    self.selected = false;
                }
            }
        }

        var pageTabs = new Array(3);

    #foreach($name in $tabNames)
        #set($index = $velocityCount - 1)
        pageTabs[$index] = new Tab("$name");
    #end

        function chooseTab(selectedTab)
        {
            for(i in pageTabs)
            {
                pageTabs[i].updateVisibility(selectedTab);
            }

            return false;
        }

    </script>

    <ul id="innernav">
    #foreach($name in $tabNames)
        <li><a id="tab_header_$name" href="#" onclick="chooseTab('$name')" class="inactive">#wwtext("name=${name}.tab")</a></li>
    #end
    </ul>
    <span class="hidden">ie workaround</span>
#end

##
## Selects the given tab
##
#macro(selectTab $name)
    <script language="JavaScript" type="text/javascript">
        chooseTab("$name");
    </script>
#end

##
## Outputs a div to open a tab page
##
#macro(openTab $name)
    <div id="tab_contents_$name">
#end

##
## Closes off a tab page
##
#macro(closeTab)
    </div>
#end

##
## Opens a list of tabs
##
#macro(openTabs)
    <ul id="innernav">
#end

##
## Closes a list of tabs
##
#macro(closeTabs)
    </ul>
    <span class="hidden">ie workaround</span>
#end

##
## A single tab
##
#macro(tabItem $name $url $selected)
    <li>
        <a
    #if($selected == $name)
            class="active"
    #else
            href="$url" class="inactive"
    #end
          >
            #wwtext("name=${name}.tab")
        </a>
    </li>
#end

##
## Shows a project tab of the given name with the given action name
##
#macro(projectTab $name $action $selected)
    #tabItem($name "${action}.action?id=$project.id" $selected)
#end

##
## Shows the tab bar for project pages with the given tab selected.
##
#macro(projectTabs $selected)
    #openTabs()
        #projectTab("home" "currentBuild" $selected)
        #projectTab("history" "history" $selected)
        #projectTab("configuration" "configureProject" $selected)
    #closeTabs()
#end

##
## Shows a build tab of the given name with the given action name
##
#macro(buildTab $result $name $action $selected)
    #tabItem($name "${action}.action?id=$result.id" $selected)
#end

##
## Shows the tab bar for build pages with the given tab selected.
##
#macro(buildTabs $result $selected)
    #openTabs()
        #buildTab($result "summary" "viewBuild" $selected)
        #buildTab($result "command-log" "viewCommandLog" $selected)
        #buildTab($result "changes" "viewChanges" $selected)
        #buildTab($result "tests" "viewTests" $selected)
        #buildTab($result "artifacts" "viewBuildArtifacts" $selected)
        #tabItem("working-dir" "browseProjectDir.action?buildId=$result.id&amp;recipeId=$result.root.children.get(0).result.id" $selected)
    #closeTabs()
#end

##
## Shows a server tab of the given name with the given action name
##
#macro(serverTab $name $action $selected)
    #tabItem($name "${action}.action" $selected)
#end

##
## Shows the tab bar for server pages with the given tab selected.
##
#macro(serverTabs $selected)
    #openTabs()
        #serverTab("status" "viewRecipeQueue" $selected)
        #serverTab("resources" "viewResources" $selected)
        #serverTab("server-info" "viewSystemInfo" $selected)
    #closeTabs()
#end

##
## Shows an admin tab of the given name with the given action name
##
#macro(adminTab $name $action $selected)
    #tabItem($name "${action}.action" $selected)
#end

##
## Shows the tab bar for admin pages with the given tab selected.
##
#macro(adminTabs $selected)
    #openTabs()
        #adminTab("settings" "/admin/serverSettings" $selected)
        #adminTab("users" "/admin/userSettings" $selected)
    #closeTabs()
#end

##
## Shows a dashboard tab of the given name with the given action name
##
#macro(dashboardTab $name $action $selected)
    #tabItem($name "${action}.action" $selected)
#end

##
## Shows the tab bar for dashboard pages with the given tab selected.
##
#macro(dashboardTabs $selected)
    #openTabs()
        #dashboardTab("homepage" "/dashboard" $selected)
        #dashboardTab("preferences" "/preferences" $selected)
    #closeTabs()
#end

##
## Outputs an image tag with alt key looked up
##
#macro(image $src $altKey)
    <img src="$src" alt="$action.getText('$altKey')"/>
#end

##
## Outputs a heading row for a content table with an action
##
#macro(actionHeadingRow $key $span $actionKey $url $image $id)
    <tr>
        <th class="heading" colspan="$span">
    #if($actionKey)
            <span class="action">
                <a #if($id != "")id="$id"#end href="$url"><img alt="$action.getText($actionKey)" src="/images/$image"/>#wwtext("name=$actionKey")</a>
            </span>
    #end
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs a heading row for a content table with an action, restricted to specific roles
##
#macro(restrictedHeadingRow $key $span $roles $actionKey $url $image $id)
    <tr>
        <th class="heading" colspan="$span">
    #authorize("ifAllGranted=$roles")
            <span class="action">
                <a #if($id != "")id="$id"#end href="$url"><img alt="$action.getText($actionKey)" src="/images/$image"/>#wwtext("name=$actionKey")</a>
            </span>
    #end
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs a heading row for a content table
##
#macro(headingRow $key $span)
    #actionHeadingRow($key $span false false false "")
#end

##
## Outputs an information row for a content table
##
#macro(infoRow $key $span)
    <tr>
        <th class="info" colspan="$span">#wwtext("name=$key")</th>
    </tr>
#end

##
## Outputs a heading row with an edit action
##
#macro(editHeadingRow $key $span $url $id)
    #actionHeadingRow($key $span "edit" $url "pencil.gif" $id)
#end

##
## Outputs a heading row for a content table with a reset and edit action
##
#macro(adminHeadingRow $key $editUrl $editId $resetUrl $resetId)
    <tr>
        <th class="heading" colspan="2">
            <span class="action">
            #if($editUrl)
                <a #if($editId != "")id="$editId"#end href="$editUrl"><img alt="$action.getText('edit')" src="/images/pencil.gif"/>#wwtext("name=edit")</a>
            #end
            #if($resetUrl)
                <a #if($resetId != "")id="$resetId"#end href="$resetUrl"><img alt="$action.getText('reset')" src="/images/arrow_rotate_anticlockwise.gif"/>#wwtext("name=reset")</a>
            #end
            </span>
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs a heading cell for a search table.
##
#macro(searchHeadingRow $key $span $searchUrl $searchId $rssUrl $rssId)
    <tr>
        <th class="heading" colspan="$span">
            <span class="action">
            #if($searchUrl)
                <a #if($searchId != "")id="$searchId"#end href="$searchUrl"><img alt="$action.getText('search')" src="/images/zoom.gif"/>#wwtext("name=search")</a>
            #end
            #if($rssUrl)
                <a #if($rssId != "")id="$rssId"#end href="$rssUrl"><img alt="$action.getText('rss')" src="/images/rss.gif"/>#wwtext("name=rss")</a>
            #end
            </span>
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs a heading cell for a content table
##
#macro(contentHeading $key $span)
    <th class="content" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
#end

##
## Outputs a regular cell for a content table
##
#macro(contentCell $key)
    <td class="content">#wwtext("name=$key")</td>
#end

##
## Outputs a static cell for a content table
##
#macro(staticCell $cc)
    <td class="content">$cc</td>
#end

##
## Outputs a right-aligned cell for a content table
##
#macro(rightCell $cc)
    <td class="content-right">$cc</td>
#end

##
## Outputs a heading cell for a content table with the given dynamic content,
## which should be escaped
##
#macro(dynamicHeading $content)
    <th class="content-row">$!webwork.htmlEncode($content)</th>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped, with a row span.
##
#macro(dynamicCellSpan $content $span)
    <td class="content" rowspan="$span">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped
##
#macro(dynamicCell $content)
    <td class="content">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped, with a link to somewhere...
##
#macro(dynamicLinkCell $content $url)
    <td class="content"><a href="$url">$!webwork.htmlEncode($content)</a></td>
#end

##
## Outputs a name:value pair row where the value needs to be escaped, with a link
##
#macro(dynamicLinkRow $key $value $url)
    <tr>
        <th class="content-row" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
        #dynamicLinkCell($value $url)
    </tr>
#end

##
## Outputs a name:value pair row where the value needs to be escaped
##
#macro(dynamicRow $key $value)
    <tr>
        <th class="content-row" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
        #dynamicCell($value)
    </tr>
#end

##
## Outputs a name:value pair row from a property; both name and value need to
## be escaped.
##
#macro(propertyRow $property)
    <tr>
        #dynamicHeading($property.key)
        #dynamicCell($property.value)
    </tr>
#end

##
## Outputs an action cell with an id
##
#macro(actionCellId $actionKey $url $image $id $span)
    <td class="content"
#if($span)
        rowspan="$span"
#end
    >
        <a href="$url"
#if($id)
           id="$id"
#end
        >
            <img alt="$action.getText($actionKey)" src="/images/$image"/>
            #wwtext("name=$actionKey")
        </a>
    </td>
#end

##
## Outputs an action cell for a content table with an image.
##
#macro(actionCell $actionKey $url $image)
    #actionCellId($actionKey $url $image false false)
#end

##
## Outputs an action cell for a content table
##
#macro(actionCell2 $actionKey $url)
    <td class="content">
        <a href="$url">#wwtext("name=$actionKey")</a>
    </td>
#end

##
## Outputs a link cell for a content table
##
#macro(linkCell $key $url)
    <td class="content">
        <a href="$url">#wwtext("name=$key")</a>
    </td>
#end

##
## Outputs an edit cell for a content table
##
#macro(editCell $url $id)
    #actionCellId("edit" $url "pencil.gif" $id false)
#end

##
## Outputs an edit cell for a content table with a  row span
##
#macro(editCellSpan $url $id $span)
    #actionCellId("edit" $url "pencil.gif" $id $span)
#end

##
## Outputs a delete cell for a content table, and uses the specified id for the link.
##
#macro(deleteCell $message $url $id)
    <td class="content">
        <a href="#" id="$id" onclick="confirmUrl('$message', '$url')"><img alt="$action.getText('delete')" src="/images/delete.gif"/>#wwtext("name=delete")</a>
    </td>
#end

##
## Outputs a delete cell for a content table, and uses the specified id for
## the link, with a row span.
##
#macro(deleteCellSpan $message $url $id $span)
    <td class="content" rowspan="$span">
        <a href="#" id="$id" onclick="confirmUrl('$message', '$url')"><img alt="$action.getText('delete')" src="/images/delete.gif"/>#wwtext("name=delete")</a>
    </td>
#end

##
## Outputs a table cell with class based on $cssClass
##
#macro(classCell $content)
    <td class="$cssClass">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a right aligned table cell with class based on $cssClass
##
#macro(rightClassCell $content)
    <td class="${cssClass}-right">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs an add row for the tail of a content table
##
#macro(addRow $key $span $url $id)
    <tr>
        <td class="add" colspan="$span">
            <a #if($id != "") id="$id"#end href="$url"><img alt="add" src="/images/add.gif"/> #wwtext("name=$key")</a>
        </td>
    </tr>
#end

##
## Outputs a build/project status cell
##
#macro(statusCell $result)
    <td class="$result.state.string">
    #if($result.succeeded())
        <img alt="success" src="/images/accept.gif"/>
    #elseif($result.inProgress())
        <img alt="in progress" src="/images/hourglass.gif"/>
    #elseif($result.terminating())
        <img alt="terminating" src="/images/stop.gif"/>
    #elseif($result.pending())
        <img alt="pending" src="/images/hourglass.gif"/>
    #elseif($result.errored() || $result.failed())
        <img alt="failure" src="/images/exclamation.gif"/>
    #else
        &nbsp;
    #end
    </td>
    <td class="$result.state.string">
        $result.state.prettyString
    </td>
#end

##
## Outputs a result test summary cell
##
#macro(testResultsCell $result)
    <td class="$result.state.string">
        #set($summary = $result.testSummary)
    #if($summary.total == 0)
        #wwtext("name=tests.none")
    #else
        #if($summary.allPassed)
        $action.getText("tests.all.passed", ["$summary.total"])
        #else
        $action.getText("tests.some.broken", ["$summary.broken", "$summary.total"])
        #end
    #end
#end

##
## Outputs an action cell for viewing a build result
##
#macro(viewCell $project $result)
    <td class="content">
        <a href="viewBuild.action?id=$result.id">#wwtext("name=view")</a>
    </td>
#end

##
## Outputs an action cell for viewing a command log for a build
##
#macro(logCell $project $result)
    <td class="content">
        <a href="viewCommandLog.action?id=$result.id">#wwtext("name=command.log")</a>
    </td>
#end

##
## Outputs an action cell for viewing changes for a build
##
#macro(changesCell $project $result)
    <td class="content">
        <a href="viewChanges.action?id=$result.id">#wwtext("name=changes")</a>
    </td>
#end

##
## Outputs an action cell for viewing tests for a build
##
#macro(testsCell $project $result)
    <td class="content">
        <a href="viewTests.action?id=$result.id">#wwtext("name=tests")</a>
    </td>
#end

##
## Outputs an action cell for viewing artifacts for a build
##
#macro(artifactsCell $project $result)
    <td class="content">
        <a href="viewBuildArtifacts.action?id=$result.id">#wwtext("name=artifacts")</a>
    </td>
#end

##
## Outputs an action cell for viewing the working copy for a build
##
#macro(workingCopyCell $project $result)
    <td class="content">
        <a href="browseProjectDir.action?buildId=$result.id&amp;recipeId=$result.root.children.get(0).result.id">#wwtext("name=working.copy")</a>
    </td>
#end


##
## Expands to the icon for the given type of SCM.
##
#macro(scmIcon $scm)
    #if ($scm.class.name == 'com.cinnamonbob.model.Svn')<img alt="svn" src="/images/svn_16.png"/>#end
    #if ($scm.class.name == 'com.cinnamonbob.model.Cvs')<img alt="cvs" src="/images/cvs_16.png"/>#end
    #if ($scm.class.name == 'com.cinnamonbob.model.P4')<img alt="p4" src="/images/p4_16.png"/>#end
#end

##
## Expands to an SCM icon and name for the projects SCM.
##
#macro(scmDetail $project)
    #scmIcon($project.scm)
    #if ($project.scm.class.name == 'com.cinnamonbob.model.Svn') subversion #end
    #if ($project.scm.class.name == 'com.cinnamonbob.model.Cvs') cvs #end
    #if ($project.scm.class.name == 'com.cinnamonbob.model.P4') perforce #end
#end

##
## Outputs a row with SCM details
##
#macro(scmRow $project)
    <tr>
        #contentHeading("scm.type" 1)
        <td class="content">#scmDetail($project)</td>
    </tr>
#end

##
## Outputs a heading for a box
##
#macro(boxHeading $key)
    <h3 class="heading">#wwtext("name=$key")</h3>
#end

##
## Outputs a table row with inline help text
##
#macro(inlineHelp $helpKey)
    <tr>
        <td>&nbsp;</td>
        <td class="inline-help">#wwtext("name=$helpKey")</td>
    </tr>
#end

##
## Outputs a table row containing a message.
##
#macro(msgRow $msgKey $colspan)
    <tr>
        <td class="msg" colspan="$colspan" >#wwtext("name=$msgKey")</td>
    </tr>
#end

##
## Opens a row for submission buttons
##
#macro(openSubmit)
    <tr>
        <td class="submit" colspan="2">
#end

##
## Closes a row for submission buttons
##
#macro(closeSubmit)
        </td>
    </tr>
#end

##
## Shows a standard Save or Cancel submit row, given the first tab index.
##
#macro(saveCancel $tabIndex)
    #openSubmit()
        #wwsubmit("name=save" "value=%{getText('save.name')}" "tabindex=$tabIndex")
        #set($tabIndex = $tabIndex + 1)
        #wwsubmit("name=cancel" "value=%{getText('cancel.name')}" "tabindex=$tabIndex")
    #closeSubmit()
#end

##
## Shows a standard Continue or Cancel submit row, given the first tab index.
##
#macro(continueCancel $tabIndex)
    #openSubmit()
        #wwsubmit("name=continue" "value=%{getText('continue.name')}" "tabindex=$tabIndex")
        #set($tabIndex = $tabIndex + 1)
        #wwsubmit("name=cancel" "value=%{getText('cancel.name')}" "tabindex=$tabIndex")
    #closeSubmit()
#end

##
## Shows a standard Previous, Next or Cancel row, as used by wizards.
## param: tabIndex, indicates the first tab index to be used by the row.
##
#macro(previousNextCancel $tabIndex)
    #openSubmit()
        #set($nextTabIndex = $tabIndex)
        #set($prevTabIndex = $nextTabIndex + 1)
        #set($cancelTabIndex = $prevTabIndex + 1)
        #wwsubmit("name=previous" "value=%{getText('previous.name')}" "tabindex=$prevTabIndex")
        #wwsubmit("name=next" "value=%{getText('next.name')}" "tabindex=$nextTabIndex")
        #wwsubmit("name=cancel" "value=%{getText('cancel.name')}" "tabindex=$cancelTabIndex")
    #closeSubmit()
#end

##
## Shows a standard Next or Cancel row, as used by wizards.
## param: tabIndex, indicates the first tab index to be used by the row.
##
#macro(nextCancel $tabIndex)
    #openSubmit()
        #wwsubmit("name=next" "value=%{getText('next.name')}" "tabindex=$tabIndex")
        #set($tabIndex = $tabIndex + 1)
        #wwsubmit("name=cancel" "value=%{getText('cancel.name')}" "tabindex=$tabIndex")
    #closeSubmit()
#end

##
## Shows a standard Previous, Finish or Cancel row, as used by wizards.
## param: tabIndex, indicates the first tab index to be used by the row.
##
#macro(previousFinishCancel $tabIndex)
    #openSubmit()
        #set($finishTabIndex = $tabIndex)
        #set($prevTabIndex = $nextTabIndex + 1)
        #set($cancelTabIndex = $prevTabIndex + 1)
        #wwsubmit("name=previous" "value=%{getText('previous.name')}" "tabindex=$prevTabIndex")
        #wwsubmit("name=next" "value=%{getText('finish.name')}" "tabindex=$finishTabIndex")
        #wwsubmit("name=cancel" "value=%{getText('cancel.name')}" "tabindex=$cancelTabIndex")
    #closeSubmit()
#end

##
## Outputs a single row for a name-value pair table.  Used for basic entity
## details.
##
#macro(detailrow $header $content)
  <tr><th class="command-detail">$header</th><td class="command-detail">$content</td></tr>
#end

##
## Outputs table rows with a summary of the given result.
##
#macro(resultsummary $result)
  #classset($result)

  <tr>
    <th class="command-detail">commenced</th>
    <th class="command-detail">completed</th>
    <th class="command-detail">elapsed</th>
    <th class="command-detail">status</th>
  </tr>
  <tr>
    <td class="build-$class">$result.stamps.prettyStartTime</td>
    <td class="build-$class">$result.stamps.prettyEndTime</td>
    <td class="build-$class">$result.stamps.prettyElapsed</td>
    <td class="build-$class">$result.state.prettyString</td>
  <tr>
#end

##
## Shows a summary for a recipe result
##
#macro(recipeSummary $resultNode $build)
    <table class="content">
        #headingRow("recipe" 6)
        <tr>
            #contentHeading("recipe.name" 1)
            #contentHeading("build.status" 2)
            #contentHeading("build.tests" 1)
            #contentHeading("build.when" 1)
            #contentHeading("build.elapsed" 1)
##            #contentHeading("actions" 1)
        </tr>
        <tr>
            #set($id = $resultNode.id)
            #set($recipe = $resultNode.result)
            #set($cssClass = $recipe.state.string)
            #dynamicCell($recipe.recipeNameSafe)
            #statusCell($recipe)
            #testResultsCell($recipe)
            #classCell($recipe.stamps.prettyStartTime)
            #classCell($recipe.stamps.prettyElapsed)
##            #linkCell("view" "viewRecipe.action?id=$id&amp;projectId=$build.project.id")
        </tr>
#if($recipe.commandResults.size() > 0)
        <tr>
            #contentHeading("command.name" 1)
            #contentHeading("build.status" 2)
            #contentHeading("build.tests" 1)
            #contentHeading("build.when" 1)
            #contentHeading("build.elapsed" 1)
        </tr>
    #foreach($command in $recipe.commandResults)
        <tr>
            #set($cssClass = $command.state.string)
            #dynamicLinkCell($command.commandName "viewCommandLog.action?id=$build.id#command-$velocityCount")
            #statusCell($command)
            #testResultsCell($command)
            #classCell($command.stamps.prettyStartTime)
            #classCell($command.stamps.prettyElapsed)
        </tr>
    #end
#end
    </table>
#end

##
## Outputs list items for messages of a given level directly on the given result
##
#macro(resultMessageItems $result $level)
    #if($result.hasDirectMessages($level))
        #foreach($feature in $result.getFeatures($level))
    <li class="$level.toString().toLowerCase()">
            $!webwork.htmlEncode($feature.summary)
    </li>
        #end
    #end
#end

##
## Summarises the messages of a given level on a file artifact
##
#macro(fileArtifactMessageSummary $build $command $fileArtifact $level $showHeader)
    #if($fileArtifact.hasMessages($level))
        #if($showHeader)
    <li class="header">#wwtext("name=artifact") :: $!webwork.htmlEncode("$fileArtifact.path")
        #end
        <ul>
        #foreach($feature in $fileArtifact.getFeatures($level))
            <li class="$level.toString().toLowerCase()">
                <pre class="feature">$!webwork.htmlEncode($feature.summary)</pre>
            #if($feature.isPlain())
                <a class="unadorned" href="viewArtifact.action?id=$fileArtifact.id&amp;buildId=$build.id&amp;commandId=$command.id#$feature.firstLine">
                    <span class="small">#wwtext("name=jump.to")</span> <img src="/images/go_small.gif"/>
                </a>
            #end
            </li>
        #end
        </ul>
        #if($showHeader)
    </li>
        #end
    #end
#end

##
## Summarises broken tests for the given test result
##
#macro(testSummary $build $command $fileArtifact $test)
    #if($test.hasBrokenTests())
        #if($test.isSuite())
    <li class="header">#wwtext("name=test.suite") :: $!webwork.htmlEncode($test.name)
        <ul>
            #testSuiteSummary($build $command $fileArtifact $test)
        </ul>
    </li>
        #else
    <li class="error"><b>$test.status.toString().toLowerCase()</b> :: #wwtext("name=test.case") $!webwork.htmlEncode($test.name)
        <pre class="feature">$!webwork.htmlEncode($test.message)</pre>
    </li>
         #end
    #end
#end

##
## Summarises broken tests for the given test suite result
##
#macro(testSuiteSummary $build $command $fileArtifact $suite)
    #foreach($test in $suite.children)
        #testSummary($build $command $fileArtifact $test)
    #end
#end

##
## Summarises broken tests for the given file artifact into a nested list
##
#macro(fileArtifactTestSummary $build $command $fileArtifact $showHeader)
    #if($fileArtifact.hasBrokenTests())
        #if($showHeader)
    <li class="header">#wwtext("name=artifact") :: $!webwork.htmlEncode($fileArtifact.path)
        #end
        <ul>
        #foreach($test in $fileArtifact.tests)
            #testSummary($build $command $fileArtifact $test)
        #end
        </ul>
        #if($showHeader)
    </li>
        #end
    #end
#end

##
## Summarises the messages of a given level on an artifact into a nested list
##
#macro(artifactMessageSummary $build $command $artifact $level $showHeader)
    #if($artifact.hasMessages($level))
        #foreach($fileArtifact in $artifact.children)
            #fileArtifactMessageSummary($build $command $fileArtifact $level $showHeader)
        #end
    #end
#end

##
## Summarises broken tests for the given artifact into a nested list
##
#macro(artifactTestSummary $build $recipe $command $artifact $showHeader)
    #if($artifact.hasBrokenTests())
        #foreach($fileArtifact in $artifact.children)
            #fileArtifactTestSummary($build $command $fileArtifact $showHeader)
        #end
    #end
#end

##
## Summarises the messages of a given level on a command result into a nested list
##
#macro(commandMessageSummary $build $commandResult $level)
    #if($commandResult.hasMessages($level))
        #resultMessageItems($commandResult $level)
        #foreach($artifact in $commandResult.artifacts)
            #artifactMessageSummary($build $commandResult $artifact $level true)
        #end
    #end
#end

##
## Summarises broken tests for the given command result into a nested list
##
#macro(commandTestSummary $build $recipe $command)
    #foreach($artifact in $command.artifacts)
        #artifactTestSummary($build $recipe $command $artifact true)
    #end
#end

##
## Summarises the messages of a given level on a recipe result into a nested list
##
#macro(recipeMessageSummary $build $recipeResult $level $top)
    #if($recipeResult.hasMessages($level))
        #if($top)
            <h4>#wwtext("name=${level.toString().toLowerCase()}.messages")</h4>
            <ul class="$level.toString().toLowerCase()">
        #end

        #resultMessageItems($recipeResult $level)
        #foreach($commandResult in $recipeResult.commandResults)
            #if($commandResult.hasMessages($level))
                <li class="header">#wwtext("name=command") :: $!webwork.htmlEncode("$commandResult.commandName")
                    <ul>
                    #commandMessageSummary($build $commandResult $level)
                    </ul>
                </li>
            #end
        #end

        #if($top)
            </ul>
        #end
    #end
#end

##
## Summarises broken tests for the given recipe result into a nested list
##
#macro(recipeTestSummary $build $recipe)
    #foreach($command in $recipe.commandResults)
        #if($command.hasBrokenTests())
    <li class="header">#wwtext("name=command") :: $!webwork.htmlEncode($command.commandName)
        <ul>
            #commandTestSummary($build $recipe $command)
        </ul>
    </li>
        #end
    #end
#end

##
## Summarises the messages of a given level on a recipe result node into a nested list
##
#macro(nodeMessageSummary $build $node $level)
    #if($node.hasMessages($level))
        <li class="header">#wwtext("name=recipe") :: $!webwork.htmlEncode("$node.result.recipeNameSafe @ $node.hostSafe")
            <ul>
            #recipeMessageSummary($build $node.result $level false)
            #foreach($child in $node.children)
                #nodeMessageSummary($build $child $level)
            #end
            </ul>
        </li>
    #end
#end

##
## Summarises broken tests for the given node into a nested list
##
#macro(nodeTestSummary $build $node)
    #if($node.hasBrokenTests())
    <li class="header">#wwtext("name=recipe") :: $!webwork.htmlEncode("$node.result.recipeNameSafe @ $node.hostSafe")
        <ul>
            #recipeTestSummary($build $node.result)
        #foreach($child in $node.children)
            #nodeMessageSummaru($build $child)
        #end
        </ul>
    </il>
    #end
#end

##
## Summarises the messages of a given level on a build result into a nested list
##
#macro(buildMessageSummary $buildResult $level)
    #if($buildResult.hasMessages($level))
        <h4>#wwtext("name=${level.toString().toLowerCase()}.messages")</h4>
        <ul class="$level.toString().toLowerCase()">
        #resultMessageItems($buildResult $level)
        #foreach($node in $buildResult.root.children)
            #nodeMessageSummary($buildResult $node $level)
        #end
        </ul>
    #end
#end

##
## Summarises broken tests for the given build into a nested list
##
#macro(buildTestSummary $build)
    <ul class="error">
    #foreach($node in $build.root.children)
        #nodeTestSummary($build $node)
    #end
    </ul>
#end

##
## Shows features of all levels for the given artifact
##
#macro(fileArtifactFeatures $build $result $fileArtifact)
    #foreach($level in $featureLevels)
        #if($fileArtifact.hasMessages($level))
    <ul class="$level.toString().toLowerCase()">
        <li class="header">$level.toString().toLowerCase() #wwtext("name=features")</li>
        #fileArtifactMessageSummary($build $result $fileArtifact $level false)
    </ul>
        #end
    #end
#end

##
## Shows an artifact that is a single file
##
#macro(commandFileArtifact $artifact $fileArtifact $build $result $showFeatures $showArtifactLink)
    <li class="file-artifact">
    #set($trimmedPath = $artifact.trimmedPath($fileArtifact))
    #if($showArtifactLink)
        <a href="/view/$result.id/$artifact.id/$fileArtifact.path">$trimmedPath</a>
        #if($fileArtifact.canDecorate())
            [<a href="viewArtifact.action?id=$fileArtifact.id&amp;buildId=$build.id&amp;commandId=$result.id">decorated</a>]
        #end
    #else
        $trimmedPath
    #end
    #if($showFeatures)
        #fileArtifactFeatures($build $result $fileArtifact)
        #if($fileArtifact.hasBrokenTests())
            <ul class="error">
                <li class="header">#wwtext("name=tests.broken")</li>
                #fileArtifactTestSummary($build $result $fileArtifact false)
        #end
    #end
    </li>
#end

##
## Shows an artifact that is multi file, and possibly too many to display
##
#macro(commandMultiArtifact $artifact $build $result $showFeatures $showArtifactLink)
    #set($hasIndex = $artifact.hasIndexFile())
    #if($hasIndex)
        #set($artClass = "report-artifact")
    #else
        #set($artClass = "dir-artifact")
    #end
    <li class="$artClass">
    #if($hasIndex)
        <a href="/view/$result.id/$artifact.id/$artifact.name/">
    #end
            $!webwork.htmlEncode($artifact.name)
    #if($hasIndex)
        </a>
    #else
        <ul>
        #foreach($fileArtifact in $artifact.children)
            #commandFileArtifact($artifact $fileArtifact $build $result $showFeatures $showArtifactLink)
        #end
        </ul>
    #end
    </li>
#end

##
## Shows a list of artifacts for a command
##
#macro(commandArtifacts $build $result $showFeatures $showArtifactLink)
    <ul class="artifact">
    #foreach($artifact in $result.artifacts)
        #commandMultiArtifact($artifact $build $result $showFeatures $showArtifactLink)
    #end
    </ul>
#end

##
## Shows a nested list of artifacts for each command in a recipe
##
#macro(recipeArtifacts $build $result $top)
    #if($result.hasArtifacts())
        #if($top)
    <ul class="artifact">
        #end
        #foreach($commandResult in $result.commandResults)
            #if($commandResult.hasArtifacts())
        <li class="artifact">#wwtext("name=command") :: $!webwork.htmlEncode($commandResult.commandName)
            #commandArtifacts($build $commandResult false $result.completed())
        </li>
            #end
        #end
        #if($top)
    </ul>
        #end
    #else
    <p>
        #wwtext("name=artifacts.none")
    </p>
    #end
#end

##
## Shows a nested list of artifacts for a recipe result node
##
#macro(recipeNodeArtifacts $build $node)
    #if($node.hasArtifacts())
        <li class="artifact">#wwtext("name=recipe") :: $!webwork.htmlEncode($node.result.recipeNameSafe)
            <ul class="artifact">
            #recipeArtifacts($build $node.result false)
            #foreach($child in $node.children)
                #recipeNodeArtifacts($build $child)
            #end
            </ul>
        </li>
    #end

#end

##
## Shows a nested list of artifacts for the build result
##
#macro(buildArtifacts $result)
    #if($result.hasArtifacts())
    <ul class="artifact">
        #foreach($node in $result.root.children)
            #recipeNodeArtifacts($result $node)
        #end
    </ul>
    #else
    <p>
        #wwtext("name=artifacts.none")
    </p>
    #end
#end

##
## Shows the main build result view (shared with project current build)
##
#macro(showBuild $buildResult $showActions)
    <table>
        <tr><td>
            <table class="content">
                #headingRow("build.summary" 13)
                <tr>
                    #contentHeading("build.id" 1)
                    #contentHeading("build.status" 2)
                    #contentHeading("build.tests" 1)
                    #contentHeading("build.spec" 1)
                    #contentHeading("build.when" 1)
                    #contentHeading("build.elapsed" 1)
    #if($showActions)
                    #contentHeading("actions" 6)
    #end
                </tr>
                <tr>
                    #set($cssClass = $buildResult.state.string)
                    #rightCell($buildResult.number)
                    #statusCell($buildResult)
                    #testResultsCell($buildResult)
                    #classCell($buildResult.buildSpecification)
                    #classCell($buildResult.stamps.prettyStartTime)
                    #classCell($buildResult.stamps.prettyElapsed)
    #if($showActions)
                    #viewCell($project $buildResult)
                    #logCell($project $buildResult)
                    #changesCell($project $buildResult)
                    #testsCell($project $buildResult)
                    #artifactsCell($project $buildResult)
                    #workingCopyCell($project $buildResult)
    #end
                </tr>
            </table>
        </td></tr>
    #if($buildResult.hasMessages($errorLevel) || $buildResult.hasMessages($warningLevel))
        <tr><td>
            <table class="fill-content">
                #headingRow("build.features" 1)
               <tr>
                   <td class="content">
                       #buildMessageSummary($buildResult $errorLevel)
                       #buildMessageSummary($buildResult $warningLevel)
                   </td>
               </tr>
            </table>
        </td></tr>
    #end
    #if($buildResult.hasBrokenTests())
        <tr><td>
            <table class="fill-content">
                #headingRow("tests.broken" 1)
               <tr>
                   <td class="content">
                       #buildTestSummary($buildResult)
                   </td>
               </tr>
            </table>
        </td></tr>
    #end
        <tr><td>
##            <table class="content" width="100%">
##                #headingRow("recipe" 1)
##                <tr>
##                    <td class="content">
    #if($buildResult.root.children.size() > 0)
                          #recipeSummary($buildResult.root.children.get(0) $buildResult)
    #end
##                    </td>
##                </tr>
##            </table>
        </td></tr>
    </table>
#end

#macro( contactPointIcon $contact)
    #if ($contact.class.name == 'com.cinnamonbob.model.EmailContactPoint')<img alt="email" src="/images/email_16.png"/>#end
    #if ($contact.class.name == 'com.cinnamonbob.model.YahooContactPoint')<img alt="yahoo" src="/images/yahoo_16.png"/>#end
#end

<!--- quartz trigger state -->
#macro( renderQuartzTriggerState $state)
    #if ($state == -1)<span style='color:black;'>none</span>#end
    #if ($state == 0)<span style='color:blue;'>normal</span>#end
    #if ($state == 1)<span style='color:orange;'>paused</span>#end
    #if ($state == 2)<span style='color:green;'>complete</span>#end
    #if ($state == 3)<span style='color:red;'>error</span>#end
    #if ($state == 4)<span style='color:red;'>blocked</span>#end
#end

#macro( renderTriggerState $state)
    #if ($state.ordinal() == 0)<span style='color:blue;'>active</span>#end
    #if ($state.ordinal() == 1)<span style='color:black;'>none</span>#end
    #if ($state.ordinal() == 2)<span style='color:orange;'>paused</span>#end
#end

##
## Shows a list of recent builds for the given list of projects
##
#macro(recentBuilds $projects $showAdd)
    <table class="content">
        #headingRow("latest.builds" 14)
        <tr>
            #contentHeading("project.name" 1)
            #contentHeading("build.status" 2)
            #contentHeading("build.tests" 1)
            #contentHeading("last.built" 1)
            #contentHeading("build.id" 1)
            #contentHeading("build.spec" 1)
            #contentHeading("build.elapsed" 1)
            #contentHeading("actions" 6)
        </tr>

    #foreach($project in $projects)
        #set($index = $velocityCount - 1)

        <tr>
            <td class="content"><a href="currentBuild.action?id=$project.id">$!webwork.htmlEncode($project.name)</a></td>

        #if($latestBuilds.get($index))
            #set($lastResult = $latestBuilds.get($index))
            #set($cssClass = $lastResult.state.string)

            #statusCell($lastResult)
            #testResultsCell($lastResult)
            #classCell($lastResult.stamps.prettyStartTime)
            #rightClassCell($lastResult.number)
            #classCell($lastResult.buildSpecification)
            #classCell($lastResult.stamps.prettyElapsed)
            #viewCell($project $lastResult)
            #logCell($project $lastResult)
            #changesCell($project $lastResult)
            #testsCell($project $lastResult)
            #artifactsCell($project $lastResult)
            #workingCopyCell($project $lastResult)
        #else
            #contentCell("empty.cell")
            #contentCell("not.applicable")
            #contentCell("not.applicable")
            #contentCell("built.never")
            #contentCell("not.applicable")
            #contentCell("not.applicable")
            #contentCell("not.applicable")
            #contentCell("empty.cell")
            #contentCell("empty.cell")
            #contentCell("empty.cell")
            #contentCell("empty.cell")
            #contentCell("empty.cell")
            #contentCell("empty.cell")
        #end
        </tr>
    #end
    #if($showAdd)
        #addRow("add.project" 14 "addProject!input.action" "project.add")
    #end
        </table>
#end
