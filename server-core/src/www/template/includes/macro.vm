##
## Outputs sitemesh content tags for the project links on the header bar
##
#macro(projectTags $project)
    <content tag="projectId">$project.id</content>
    <content tag="projectName">$!webwork.htmlEncode($project.name)</content>
#end

##
## Outputs sitemesh content tags for build links on the header bar
##
#macro(buildTags $project $buildResult)
    #projectTags($project)
    <content tag="buildId">$buildResult.id</content>
    <content tag="buildNumber">$buildResult.number</content>
#end

##
## Outputs a tab header bar, with the javascript necessary to control the
## tab selection.
##
#macro(tabBar $tabNames)
    <script language="JavaScript" type="text/javascript">
        function Tab(htmlId)
       {
            this.elementId = htmlId;
            var selected = false;
            var self = this;

            /*
             * Shows or hides this page depending on whether the visible
             * tab id matches this objects id.
             *
             * @param visibleTabId the id of the tab that was selected
             */
            this.updateVisibility = function(visibleTabId)
            {
                var thElement = document.getElementById('tab_header_' + self.elementId);
                var tcElement = document.getElementById('tab_contents_' + self.elementId);

                if(!selected && visibleTabId == self.elementId)
                {
                    thElement.className = "active";
                    tcElement.style.display = "block";
                    self.selected = true;
                }
                else
                {
                    thElement.className = "inactive";
                    tcElement.style.display = "none";
                    self.selected = false;
                }
            }
        }

        var pageTabs = new Array(3);

    #foreach($name in $tabNames)
        #set($index = $velocityCount - 1)
        pageTabs[$index] = new Tab("$name");
    #end

        function chooseTab(selectedTab)
        {
            for(i in pageTabs)
            {
                pageTabs[i].updateVisibility(selectedTab);
            }

            return false;
        }

    </script>

    <ul id="innernav">
    #foreach($name in $tabNames)
        <li><a id="tab_header_$name" href="#" onclick="chooseTab('$name')" class="inactive">#wwtext("name=${name}.tab")</a></li>
    #end
    </ul>
    <span class="hidden">ie workaround</span>
#end

##
## Selects the given tab
##
#macro(selectTab $name)
    <script language="JavaScript" type="text/javascript">
        chooseTab("$name");
    </script>
#end

##
## Outputs a div to open a tab page
##
#macro(openTab $name)
    <div id="tab_contents_$name">
#end

##
## Closes off a tab page
##
#macro(closeTab)
    </div>
#end

##
## Opens a list of tabs
##
#macro(openTabs)
    <ul id="innernav">
#end

##
## Closes a list of tabs
##
#macro(closeTabs)
    </ul>
    <span class="hidden">ie workaround</span>
#end

##
## A single tab
##
#macro(tabItem $name $url $selected)
    <li>
        <a
    #if($selected == $name)
            class="active"
    #else
            href="$url" class="inactive"
    #end
          >
            #wwtext("name=${name}.tab")
        </a>
    </li>
#end

##
## Shows a project tab of the given name with the given action name
##
#macro(projectTab $name $action $selected)
    #tabItem($name "${action}.action?id=$project.id" $selected)
#end

##
## Shows the tab bar for project pages with the given tab selected.
##
#macro(projectTabs $selected)
    #openTabs()
        #projectTab("current-build" "currentBuild" $selected)
        #projectTab("history" "history" $selected)
        #projectTab("configuration" "configureProject" $selected)
    #closeTabs()
#end

##
## Shows a build tab of the given name with the given action name
##
#macro(buildTab $result $name $action $selected)
    #tabItem($name "${action}.action?id=$result.id" $selected)
#end

##
## Shows the tab bar for build pages with the given tab selected.
##
#macro(buildTabs $result $selected)
    #openTabs()
        #buildTab($result "summary" "viewBuild" $selected)
        #buildTab($result "command-log" "viewCommandLog" $selected)
        #buildTab($result "changes" "viewChanges" $selected)
        #buildTab($result "artifacts" "viewBuildArtifacts" $selected)
    #closeTabs()
#end

##
## Shows a server tab of the given name with the given action name
##
#macro(serverTab $name $action $selected)
    #tabItem($name "${action}.action" $selected)
#end

##
## Shows the tab bar for server pages with the given tab selected.
##
#macro(serverTabs $selected)
    #openTabs()
        #serverTab("recipe-queue" "viewRecipeQueue" $selected)
        #serverTab("resources" "viewResources" $selected)
        #serverTab("server-info" "viewSystemInfo" $selected)
    #closeTabs()
#end

##
## Outputs a heading row for a content table with an action
##
#macro(actionHeadingRow $key $span $actionKey $url $image)
    <tr>
        <th class="heading" colspan="$span">
    #if($actionKey)
            <span class="action">
                <a href="$url"><img alt="$action.getText($actionKey)" src="images/$image"/>#wwtext("name=$actionKey")</a>
            </span>
    #end
            #wwtext("name=$key")
        </th>
    </tr>
#end

##
## Outputs a heading row for a content table
##
#macro(headingRow $key $span)
    #actionHeadingRow($key $span false false false)
#end

##
## Outputs a heading row with an edit action
##
#macro(editHeadingRow $key $span $url)
    #actionHeadingRow($key $span "edit" $url "page_white_edit.gif")
#end

##
## Outputs a heading cell for a content table
##
#macro(contentHeading $key $span)
    <th class="content" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
#end

##
## Outputs a regular cell for a content table
##
#macro(contentCell $key)
    <td class="content">#wwtext("name=$key")</td>
#end

##
## Outputs a heading cell for a content table with the given dynamic content,
## which should be escaped
##
#macro(dynamicHeading $content)
    <th class="content-row">$!webwork.htmlEncode($content)</th>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped
##
#macro(dynamicCell $content)
    <td class="content">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs a cell for a content table with the given dynamic content, which
## should be escaped, with a link to somewhere...
##
#macro(dynamicLinkCell $content $url)
    <td class="content"><a href="$url">$!webwork.htmlEncode($content)</a></td>
#end


##
## Outputs a name:value pair row where the value needs to be escaped
##
#macro(dynamicRow $key $value)
    <tr>
        <th class="content-row" #if($span > 1) colspan="$span" #end>#wwtext("name=$key")</th>
        #dynamicCell($value)
    </tr>
#end

##
## Outputs a name:value pair row from a property; both name and value need to
## be escaped.
##
#macro(propertyRow $property)
    <tr>
        #dynamicHeading($property.key)
        #dynamicCell($property.value)
    </tr>
#end

##
## Outputs an action cell for a content table
##
#macro(actionCell $actionKey $url $image)
    <td class="content">
        <a href="$url"><img alt="$action.getText($actionKey)" src="images/$image"/>#wwtext("name=$actionKey")</a>
    </td>
#end

##
## Outputs a link cell for a content table
##
#macro(linkCell $key $url)
    <td class="content">
        <a href="$url">#wwtext("name=$key")</a>
    </td>
#end

##
## Outputs an edit cell for a content table
##
#macro(editCell $url)
    #actionCell("edit" $url "page_white_edit.gif")
#end

##
## Outputs a delete cell for a content table
##
#macro(deleteCell $message $url)
    <td class="content">
        <a href="#" onclick="confirmUrl('$message', '$url')"><img alt="$action.getText('delete')" src="images/delete.gif"/>#wwtext("name=delete")</a>
    </td>
##    #actionCell("delete" $url "delete.gif")
#end

##
## Outputs a table cell with class based on $cssClass
##
#macro(classCell $content)
    <td class="$cssClass">$!webwork.htmlEncode($content)</td>
#end

##
## Outputs an add row for the tail of a content table
##
#macro(addRow $key $span $url)
    <tr>
        <td class="add" colspan="$span">
            <a href="$url"><img alt="add" src="images/add.gif"/> #wwtext("name=$key")</a>
        </td>
    </tr>
#end

##
## Outputs a build/project status cell
##
#macro(statusCell $result)
    <td class="$result.state.string">
    #if($result.succeeded())
        <img alt="success" src="images/accept.gif"/>
    #elseif($result.inProgress())
        <img alt="in progress" src="images/hourglass.gif"/>
    #elseif($result.errored() || $result.failed())
        <img alt="failure" src="images/exclamation.gif"/>
    #else
        &nbsp;
    #end
    </td>
    <td class="$result.state.string">
        $result.state.prettyString
    </td>
#end

##
## Outputs an action cell for viewing a build result
##
#macro(viewCell $project $result)
    <td class="content">
        <a href="viewBuild.action?id=$result.id">#wwtext("name=view")</a>
    </td>
#end

##
## Outputs an action cell for viewing a command log for a build
##
#macro(logCell $project $result)
    <td class="content">
        <a href="viewCommandLog.action?id=$result.id">#wwtext("name=command.log")</a>
    </td>
#end

##
## Outputs an action cell for viewing changes for a build
##
#macro(changesCell $project $result)
    <td class="content">
        <a href="viewChanges.action?id=$result.id">#wwtext("name=changes")</a>
    </td>
#end

##
## Outputs an action cell for viewing artifacts for a build
##
#macro(artifactsCell $project $result)
    <td class="content">
        <a href="viewBuildArtifacts.action?id=$result.id">#wwtext("name=artifacts")</a>
    </td>
#end

##
## Outputs a row with SCM details
##
#macro(scmRow $project)
    <tr>
        #contentHeading("scm.type" 1)
        <td class="content">#scmDetail($project)</td>
    </tr>
#end

##
## Outputs a heading for a box
##
#macro(boxHeading $key)
    <h3 class="heading">#wwtext("name=$key")</h3>
#end

##
## Outputs a table row with inline help text
##
#macro(inlineHelp $helpKey)
    <tr>
        <td>&nbsp;</td>
        <td class="inline-help">#wwtext("name=$helpKey")</td>
    </tr>
#end

##
## Opens a row for submission buttons
##
#macro(openSubmit)
    <tr>
        <td class="submit" colspan="2">
#end

##
## Closes a row for submission buttons
##
#macro(closeSubmit)
        </td>
    </tr>
#end

##
## Shows a standard Save or Cancel submit row, given the first tab index.
##
#macro(saveCancel $tabIndex)
    #openSubmit()
        #wwsubmit("name=save" "value=%{getText('save.name')}" "tabindex=$tabIndex")
        #set($tabIndex = $tabIndex + 1)
        #wwsubmit("name=cancel" "value=%{getText('cancel.name')}" "tabindex=$tabIndex")
    #closeSubmit()
#end

##
## Outputs a single row for a name-value pair table.  Used for basic entity
## details.
##
#macro(detailrow $header $content)
  <tr><th class="command-detail">$header</th><td class="command-detail">$content</td></tr>
#end


##
## Sets the variable "class" depending on the state of the given result object.
##
#macro(classset $result)
  #if(!$result.commenced())
    #set($class = "pending")
  #elseif($result.inProgress())
    #set($class = "info")
  #elseif($result.succeeded())
    #set($class = "success")
  #else
    #set($class = "failure")
  #end
#end

##
## If the given result has an error or failure, outputs a table row with details.
##
#macro(errorrow $result)
  #if($result.errored())
    #set($resultMessage = $result.errorMessage)
  #elseif($result.failed())
    #set($resultMessage = $result.failureMessage)
  #else
    #set($resultMessage = false)
  #end

  #if($resultMessage)
    <tr>
      <td class="build-failure" colspan="4">
        <h4>error message</h4>
        <ul class="error-message">
          <li class="error">$resultMessage</li>
        </ul>
      </td>
    </tr>
  #end
#end

##
## Outputs table rows with a summary of the given result.
##
#macro(resultsummary $result)
  #classset($result)

  <tr>
    <th class="command-detail">commenced</th>
    <th class="command-detail">completed</th>
    <th class="command-detail">elapsed</th>
    <th class="command-detail">status</th>
  </tr>
  <tr>
    <td class="build-$class">$result.stamps.prettyStartTime</td>
    <td class="build-$class">$result.stamps.prettyEndTime</td>
    <td class="build-$class">$result.stamps.prettyElapsed</td>
    <td class="build-$class">$result.state.prettyString</td>
  <tr>
#end

##
## Shows a summary for a recipe result
##
#macro(recipeSummary $resultNode $project)
    <table class="content">
        #headingRow("recipe" 5)
        <tr>
            #contentHeading("recipe.name" 1)
            #contentHeading("build.status" 2)
            #contentHeading("build.when" 1)
            #contentHeading("build.elapsed" 1)
##            #contentHeading("actions" 1)
        </tr>
        <tr>
            #set($id = $resultNode.id)
            #set($result = $resultNode.result)
            #set($cssClass = $result.state.string)
            #contentCell($result.recipeNameSafe)
            #statusCell($result)
            #classCell($result.stamps.prettyStartTime)
            #classCell($result.stamps.prettyElapsed)
##            #linkCell("view" "viewRecipe.action?id=$id&amp;projectId=$project.id")
        </tr>
    </table>
#end

##
## Shows the main build result view (shared with project current build)
##
#macro(showBuild $buildResult $showActions)
    <table>
        <tr><td>
            <table class="content">
                #headingRow("build.summary" 10)
                <tr>
                    #contentHeading("build.id" 1)
                    #contentHeading("build.status" 2)
                    #contentHeading("build.spec" 1)
                    #contentHeading("build.when" 1)
                    #contentHeading("build.elapsed" 1)
    #if($showActions)
                    #contentHeading("actions" 4)
    #end
                </tr>
                <tr>
                    #set($cssClass = $buildResult.state.string)
                    #contentCell($buildResult.number)
                    #statusCell($buildResult)
                    #classCell($buildResult.buildSpecification.name)
                    #classCell($buildResult.stamps.prettyStartTime)
                    #classCell($buildResult.stamps.prettyElapsed)
    #if($showActions)
                    #viewCell($project $buildResult)
                    #logCell($project $buildResult)
                    #changesCell($project $buildResult)
                    #artifactsCell($project $buildResult)
    #end
                </tr>
            </table>
        </td></tr>
    #if($buildResult.hasMessages($errorLevel) || $buildResult.hasMessages($warningLevel))
        <tr><td>
            <table class="content" width="100%">
                #headingRow("build.features" 1)
               <tr>
                   <td class="content">
                       #buildMessageSummary($buildResult $errorLevel)
                       #buildMessageSummary($buildResult $warningLevel)
                   </td>
               </tr>
            </table>
        </td></tr>
    #end
        <tr><td>
##            <table class="content" width="100%">
##                #headingRow("recipe" 1)
##                <tr>
##                    <td class="content">
    #if($buildResult.root.children.size() > 0)
                          #recipeSummary($buildResult.root.children.get(0) $project)
    #end
##                    </td>
##                </tr>
##            </table>
        </td></tr>
    </table>
#end

##
## Outputs a nested list of RecipeResult details starting from the given node.
## If $showCommands is true, command results will also be displayed.
##
#macro(showrecipes $node $showCommands $projectId)
  <ul class="recipe-tree">
  #foreach($child in $node.children)
    <li class="recipe-tree">
      <table>
    #if($child.result.commenced())
        <tr>
          <th colspan="4" class="command-detail">$child.result.recipeNameSafe @ $child.hostSafe <a href="viewRecipe.action?id=$child.id&projectId=$projectId">details</a></th>
        </tr>
      #resultsummary($child.result)
    #else
        <tr>
          <th class="build-pending">$child.result.recipeNameSafe @ [pending]  <a href="viewRecipe.action?id=$child.id&projectId=$projectId">details</a></th>
        <tr>
    #end

    #if($showCommands && $child.result.commandResults.size() > 0)
        <tr>
          <th class="command-detail">command</th>
          <th class="command-detail">elapsed</th>
          <th class="command-detail">status</th>
          <th class="command-detail">primary artifact</th>
        </tr>
      #foreach($commandResult in $child.result.commandResults)
        #classset($commandResult)
        <tr>
          <td class="build-$class">$commandResult.commandName</td>
          <td class="build-$class">$commandResult.stamps.prettyElapsed</td>
          <td class="build-$class">$commandResult.state.prettyString</td>
          <td class="build-$class">
            #if($commandResult.artifacts.size() > 0)
              #set($artifact = $commandResult.artifacts.get(0))
                <img src="/images/gnome-mime-text.png"/><a href="viewArtifact.action?id=$artifact.id&commandId=$commandResult.id">$artifact.title</a>
            #else
              [none]
            #end
          </td>
        </tr>
        #errorrow($commandResult)
      #end
    #end
      </table>
    #if($child.children.size() > 0)
      #showrecipes($child $showCommands $projectId)
    #end
  #end
  </ul>
#end

##
## Outputs list items for messages of a given level directly on the given result
##
#macro(resultMessageItems $result $level)
    #if($level.toString() == "ERROR")
        #if($result.errorMessage)
            <li class="error">$!webwork.htmlEncode($result.errorMessage)</li>
        #end
        #if($result.failureMessage)
            <li class="error">$!webwork.htmlEncode($result.failureMessage)</li>
        #end
    #end
#end

##
## Summarises the messages of a given level on an artifact into a nested list
##
#macro(artifactMessageSummary $artifact $level)
    #if($artifact.hasMessages($level))
        #foreach($feature in $artifact.getFeatures($level))
            <li class="$level.toString().toLowerCase()">$!webwork.htmlEncode($feature.summary)</li>
        #end
    #end
#end

##
## Summarises the messages of a given level on a command result into a nested list
##
#macro(commandMessageSummary $commandResult $level)
    #if($commandResult.hasMessages($level))
        #resultMessageItems($commandResult $level)
        #foreach($artifact in $commandResult.getArtifacts())
            #if($artifact.hasMessages($level))
                <li class="header">#wwtext("name=artifact"): $!webwork.htmlEncode("$artifact.title")
                    <ul>
                    #artifactMessageSummary($artifact $level)
                    </ul>
                </li>
            #end
        #end
    #end
#end

##
## Summarises the messages of a given level on a recipe result into a nested list
##
#macro(recipeMessageSummary $recipeResult $level $top)
    #if($recipeResult.hasMessages($level))
        #if($top)
            <h4>#wwtext("name=${level.toString().toLowerCase()}.messages")</h4>
            <ul class="$level.toString().toLowerCase()">
        #end

        #resultMessageItems($recipeResult $level)
        #foreach($commandResult in $recipeResult.commandResults)
            #if($commandResult.hasMessages($level))
                <li class="header">#wwtext("name=command"): $!webwork.htmlEncode("$commandResult.commandName")
                    <ul>
                    #commandMessageSummary($commandResult $level)
                    </ul>
                </li>
            #end
        #end

        #if($top)
            </ul>
        #end
    #end
#end

##
## Summarises the messages of a given level on a recipe result node into a nested list
##
#macro(nodeMessageSummary $node $level)
    #if($node.hasMessages($level))
        <li class="header">#wwtext("name=recipe"): $!webwork.htmlEncode("$node.result.recipeNameSafe @ $node.hostSafe")
            <ul>
            #recipeMessageSummary($node.result $level false)
            #foreach($child in $node.children)
                #nodeMessageSummary($child $level)
            #end
            </ul>
        </li>
    #end
#end

##
## Summarises the messages of a given level on a build result into a nested list
##
#macro(buildMessageSummary $buildResult $level)
    #if($buildResult.hasMessages($level))
        <h4>#wwtext("name=${level.toString().toLowerCase()}.messages")</h4>
        <ul class="$level.toString().toLowerCase()">
        #resultMessageItems($buildResult $level)
        #foreach($node in $buildResult.root.children)
            #nodeMessageSummary($node $level)
        #end
        </ul>
    #end
#end

##
## Shows a list of artifacts for a command
##
#macro(commandArtifacts $result $showFeatures)
    <ul class="artifact">
    #foreach($artifact in $result.artifacts)
        <li class="file-artifact"><a href="viewArtifact.action?id=$artifact.id&amp;commandId=$result.id">$artifact.title</a>
        #if($showFeatures)
            #foreach($level in $featureLevels)
                #if($artifact.hasMessages($level))
        <ul class="$level.toString().toLowerCase()">
            <li class="header">$level.toString().toLowerCase() #wwtext("name=features")</li>
            #artifactMessageSummary($artifact $level)
        </ul>
                #end
            #end
        #end
        </li>
    #end
    </ul>
#end

##
## Shows a nested list of artifacts for each command in a recipe
##
#macro(recipeArtifacts $result $top)
    #if($result.hasArtifacts())
        #if($top)
    <ul class="artifact">
        #end
        #foreach($commandResult in $result.commandResults)
            #if($commandResult.hasArtifacts())
        <li class="artifact">#wwtext("name=command") :: $!webwork.htmlEncode($commandResult.commandName)
            #commandArtifacts($commandResult false)
        </li>
            #end
        #end
        #if($top)
    </ul>
        #end
    #else
    <p>
        #wwtext("name=artifacts.none")
    </p>
    #end
#end

##
## Shows a nested list of artifacts for a recipe result node
##
#macro(recipeNodeArtifacts $node)
    #if($node.hasArtifacts())
        <li class="artifact">#wwtext("name=recipe") :: $!webwork.htmlEncode($node.result.recipeNameSafe)
            <ul class="artifact">
            #recipeArtifacts($node.result false)
            #foreach($child in $node.children)
                #recipeNodeArtifacts($child)
            #end
            </ul>
        </li>
    #end

#end

##
## Shows a nested list of artifacts for the build result
##
#macro(buildArtifacts $result)
    #if($result.hasArtifacts())
    <ul class="artifact">
        #foreach($node in $result.root.children)
            #recipeNodeArtifacts($node)
        #end
    </ul>
    #else
    <p>
        #wwtext("name=artifacts.none")
    </p>
    #end
#end

#macro( contactPointIcon $contact)
    #if ($contact.class.name == 'com.cinnamonbob.model.EmailContactPoint')<img src="/images/email_16.png"/>#end
    #if ($contact.class.name == 'com.cinnamonbob.model.YahooContactPoint')<img src="/images/yahoo_16.png"/>#end
#end

#macro( scmIcon $scm)
    #if ($scm.class.name == 'com.cinnamonbob.model.Svn')<img src="/images/svn_16.png"/>#end
    #if ($scm.class.name == 'com.cinnamonbob.model.Cvs')<img src="/images/cvs_16.png"/>#end
    #if ($scm.class.name == 'com.cinnamonbob.model.P4')<img src="/images/p4_16.png"/>#end
#end

#macro( scmDetail $project)
    #scmIcon($project.scm)
    #if ($project.scm.class.name == 'com.cinnamonbob.model.Svn') subversion #end
    #if ($project.scm.class.name == 'com.cinnamonbob.model.Cvs') cvs #end
    #if ($project.scm.class.name == 'com.cinnamonbob.model.P4') perforce #end
#end

<!--- quartz trigger state -->
#macro( renderQuartzTriggerState $state)
    #if ($state == -1)<span style='color:black;'>none</span>#end
    #if ($state == 0)<span style='color:blue;'>normal</span>#end
    #if ($state == 1)<span style='color:orange;'>paused</span>#end
    #if ($state == 2)<span style='color:green;'>complete</span>#end
    #if ($state == 3)<span style='color:red;'>error</span>#end
    #if ($state == 4)<span style='color:red;'>blocked</span>#end
#end

#macro( renderTriggerState $state)
    #if ($state.ordinal() == 0)<span style='color:blue;'>active</span>#end
    #if ($state.ordinal() == 1)<span style='color:black;'>none</span>#end
    #if ($state.ordinal() == 2)<span style='color:orange;'>paused</span>#end
#end