package com.zutubi.events;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * An event dispatcher that dispatches events on a separate thread to the thread on which the event was raised.  All
 * dispatched events are processed on a single thread to maintain the order in which they are handled.
 */
public class AsynchronousDispatcher implements EventDispatcher
{
    private static final Logger LOG = Logger.getLogger(AsynchronousDispatcher.class.getName());

    private final ExecutorService executor = Executors.newSingleThreadExecutor();

    public void dispatch(final Event evt, final List<EventListener> listeners)
    {
        executor.execute(new Runnable()
        {
            public void run()
            {
                for (EventListener listener: listeners)
                {
                    try
                    {
                        listener.handleEvent(evt);
                    }
                    catch (Exception e)
                    {
                        // isolate the exceptions generated by the event handling.
                        evt.addException(e);
                        LOG.log(Level.WARNING, "Exception generated by " + listener + ".handleEvent(" + evt + ")", e);
                    }
                }
            }
        });
    }
}
